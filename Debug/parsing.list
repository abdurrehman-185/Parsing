
parsing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006118  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  080062c8  080062c8  000072c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d8  080066d8  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  080066d8  080066d8  000076d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066e0  080066e0  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066e0  080066e0  000076e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066e4  080066e4  000076e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080066e8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000070  08006758  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08006758  00008358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e381  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc2  00000000  00000000  00016421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  000180e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac6  00000000  00000000  00018ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a408  00000000  00000000  0001996e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb79  00000000  00000000  00043d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010430f  00000000  00000000  000538ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157bfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045d4  00000000  00000000  00157c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0015c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080062b0 	.word	0x080062b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080062b0 	.word	0x080062b0

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <print_param>:
uint32_t arr_value;
uint32_t pulse_value;
uint8_t duty_cycle = 50;

void print_param(char *input)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08e      	sub	sp, #56	@ 0x38
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	6078      	str	r0, [r7, #4]
    char name[10] = "";
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
 80005bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	809a      	strh	r2, [r3, #4]
    int value = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
    char name1[10] = "";
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	809a      	strh	r2, [r3, #4]
    int value1 = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
    int scanned = sscanf(input, "%s %d %s %d", name, &value, name1, &value1);
 80005dc:	f107 011c 	add.w	r1, r7, #28
 80005e0:	f107 0220 	add.w	r2, r7, #32
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	460b      	mov	r3, r1
 80005f2:	494a      	ldr	r1, [pc, #296]	@ (800071c <print_param+0x16c>)
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f004 f9a3 	bl	8004940 <siscanf>
 80005fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
    printf("\r\n==============================\r\n");
 80005fc:	4848      	ldr	r0, [pc, #288]	@ (8000720 <print_param+0x170>)
 80005fe:	f004 f977 	bl	80048f0 <puts>
    printf("total read :%d\r\n", scanned);
 8000602:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000604:	4847      	ldr	r0, [pc, #284]	@ (8000724 <print_param+0x174>)
 8000606:	f004 f90b 	bl	8004820 <iprintf>
    printf("name is :%s \r\nvalue is :%d\r\n", name, value);
 800060a:	69fa      	ldr	r2, [r7, #28]
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4619      	mov	r1, r3
 8000612:	4845      	ldr	r0, [pc, #276]	@ (8000728 <print_param+0x178>)
 8000614:	f004 f904 	bl	8004820 <iprintf>
    printf("name is :%s \r\nvalue is :%d\r\n", name1, value1);
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	4619      	mov	r1, r3
 8000620:	4841      	ldr	r0, [pc, #260]	@ (8000728 <print_param+0x178>)
 8000622:	f004 f8fd 	bl	8004820 <iprintf>

    if (scanned == 4) {
 8000626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000628:	2b04      	cmp	r3, #4
 800062a:	d148      	bne.n	80006be <print_param+0x10e>
        if (strcmp(name, "freq") == 0) {
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	493e      	ldr	r1, [pc, #248]	@ (800072c <print_param+0x17c>)
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fddc 	bl	80001f0 <strcmp>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d108      	bne.n	8000650 <print_param+0xa0>
            pwm_frequency = value;
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	461a      	mov	r2, r3
 8000642:	4b3b      	ldr	r3, [pc, #236]	@ (8000730 <print_param+0x180>)
 8000644:	601a      	str	r2, [r3, #0]
            printf("parameter one is freq: %d\r\n", value);
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	4619      	mov	r1, r3
 800064a:	483a      	ldr	r0, [pc, #232]	@ (8000734 <print_param+0x184>)
 800064c:	f004 f8e8 	bl	8004820 <iprintf>
        }
        if (strcmp(name, "duty") == 0) {
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4938      	ldr	r1, [pc, #224]	@ (8000738 <print_param+0x188>)
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff fdca 	bl	80001f0 <strcmp>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d108      	bne.n	8000674 <print_param+0xc4>
            duty_cycle = value;
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b35      	ldr	r3, [pc, #212]	@ (800073c <print_param+0x18c>)
 8000668:	701a      	strb	r2, [r3, #0]
            printf("parameter one is duty: %d\r\n", value);
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	4619      	mov	r1, r3
 800066e:	4834      	ldr	r0, [pc, #208]	@ (8000740 <print_param+0x190>)
 8000670:	f004 f8d6 	bl	8004820 <iprintf>
        }
        if (strcmp(name1, "freq") == 0) {
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	492c      	ldr	r1, [pc, #176]	@ (800072c <print_param+0x17c>)
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fdb8 	bl	80001f0 <strcmp>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d108      	bne.n	8000698 <print_param+0xe8>
            pwm_frequency = value1;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	461a      	mov	r2, r3
 800068a:	4b29      	ldr	r3, [pc, #164]	@ (8000730 <print_param+0x180>)
 800068c:	601a      	str	r2, [r3, #0]
            printf("parameter two is freq: %d\r\n", value1);
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	4619      	mov	r1, r3
 8000692:	482c      	ldr	r0, [pc, #176]	@ (8000744 <print_param+0x194>)
 8000694:	f004 f8c4 	bl	8004820 <iprintf>
        }
        if (strcmp(name1, "duty") == 0) {
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	4926      	ldr	r1, [pc, #152]	@ (8000738 <print_param+0x188>)
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fda6 	bl	80001f0 <strcmp>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d134      	bne.n	8000714 <print_param+0x164>
            duty_cycle = value1;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4b23      	ldr	r3, [pc, #140]	@ (800073c <print_param+0x18c>)
 80006b0:	701a      	strb	r2, [r3, #0]
            printf("parameter two is duty: %d\r\n", value1);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4619      	mov	r1, r3
 80006b6:	4824      	ldr	r0, [pc, #144]	@ (8000748 <print_param+0x198>)
 80006b8:	f004 f8b2 	bl	8004820 <iprintf>
            printf("parameter is duty: %d\r\n", value);
        }
    } else {
        printf("Invalid input format.\r\n");
    }
}
 80006bc:	e02a      	b.n	8000714 <print_param+0x164>
    } else if (scanned == 2) {
 80006be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	d124      	bne.n	800070e <print_param+0x15e>
        if (strcmp(name, "freq") == 0) {
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4918      	ldr	r1, [pc, #96]	@ (800072c <print_param+0x17c>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff fd90 	bl	80001f0 <strcmp>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d108      	bne.n	80006e8 <print_param+0x138>
            pwm_frequency = value;
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	461a      	mov	r2, r3
 80006da:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <print_param+0x180>)
 80006dc:	601a      	str	r2, [r3, #0]
            printf("parameter is freq: %d\r\n", value);
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	4619      	mov	r1, r3
 80006e2:	481a      	ldr	r0, [pc, #104]	@ (800074c <print_param+0x19c>)
 80006e4:	f004 f89c 	bl	8004820 <iprintf>
        if (strcmp(name, "duty") == 0) {
 80006e8:	f107 0320 	add.w	r3, r7, #32
 80006ec:	4912      	ldr	r1, [pc, #72]	@ (8000738 <print_param+0x188>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fd7e 	bl	80001f0 <strcmp>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d10c      	bne.n	8000714 <print_param+0x164>
            duty_cycle = value;
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <print_param+0x18c>)
 8000700:	701a      	strb	r2, [r3, #0]
            printf("parameter is duty: %d\r\n", value);
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	4619      	mov	r1, r3
 8000706:	4812      	ldr	r0, [pc, #72]	@ (8000750 <print_param+0x1a0>)
 8000708:	f004 f88a 	bl	8004820 <iprintf>
}
 800070c:	e002      	b.n	8000714 <print_param+0x164>
        printf("Invalid input format.\r\n");
 800070e:	4811      	ldr	r0, [pc, #68]	@ (8000754 <print_param+0x1a4>)
 8000710:	f004 f8ee 	bl	80048f0 <puts>
}
 8000714:	bf00      	nop
 8000716:	3730      	adds	r7, #48	@ 0x30
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	080062c8 	.word	0x080062c8
 8000720:	080062d4 	.word	0x080062d4
 8000724:	080062f8 	.word	0x080062f8
 8000728:	0800630c 	.word	0x0800630c
 800072c:	0800632c 	.word	0x0800632c
 8000730:	20000000 	.word	0x20000000
 8000734:	08006334 	.word	0x08006334
 8000738:	08006350 	.word	0x08006350
 800073c:	20000004 	.word	0x20000004
 8000740:	08006358 	.word	0x08006358
 8000744:	08006374 	.word	0x08006374
 8000748:	08006390 	.word	0x08006390
 800074c:	080063ac 	.word	0x080063ac
 8000750:	080063c4 	.word	0x080063c4
 8000754:	080063dc 	.word	0x080063dc

08000758 <main>:

int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
    HAL_Init();
 800075e:	f000 fc54 	bl	800100a <HAL_Init>
    SystemClock_Config();
 8000762:	f000 f939 	bl	80009d8 <SystemClock_Config>
    MX_GPIO_Init();
 8000766:	f000 f99f 	bl	8000aa8 <MX_GPIO_Init>
    MX_LPUART1_UART_Init();
 800076a:	f000 f9c9 	bl	8000b00 <MX_LPUART1_UART_Init>

    uart_buf_len = sprintf(uart_buf, "Enter 'led on' to turn on the LED.\r\n");
 800076e:	497b      	ldr	r1, [pc, #492]	@ (800095c <main+0x204>)
 8000770:	487b      	ldr	r0, [pc, #492]	@ (8000960 <main+0x208>)
 8000772:	f004 f8c5 	bl	8004900 <siprintf>
 8000776:	4603      	mov	r3, r0
 8000778:	4a7a      	ldr	r2, [pc, #488]	@ (8000964 <main+0x20c>)
 800077a:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 800077c:	4b79      	ldr	r3, [pc, #484]	@ (8000964 <main+0x20c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	b29a      	uxth	r2, r3
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	4976      	ldr	r1, [pc, #472]	@ (8000960 <main+0x208>)
 8000788:	4877      	ldr	r0, [pc, #476]	@ (8000968 <main+0x210>)
 800078a:	f003 f960 	bl	8003a4e <HAL_UART_Transmit>

    // Wait for 'led on' command
    int count = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
    while(count < sizeof(input) - 1) {
 8000792:	e012      	b.n	80007ba <main+0x62>
        char ch;
        HAL_UART_Receive(&hlpuart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000794:	1cf9      	adds	r1, r7, #3
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	2201      	movs	r2, #1
 800079c:	4872      	ldr	r0, [pc, #456]	@ (8000968 <main+0x210>)
 800079e:	f003 f9df 	bl	8003b60 <HAL_UART_Receive>
        if (ch == '\r')
 80007a2:	78fb      	ldrb	r3, [r7, #3]
 80007a4:	2b0d      	cmp	r3, #13
 80007a6:	d00c      	beq.n	80007c2 <main+0x6a>
            break;
        input[count] = ch;
 80007a8:	78f9      	ldrb	r1, [r7, #3]
 80007aa:	4a70      	ldr	r2, [pc, #448]	@ (800096c <main+0x214>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4413      	add	r3, r2
 80007b0:	460a      	mov	r2, r1
 80007b2:	701a      	strb	r2, [r3, #0]
        count++;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3301      	adds	r3, #1
 80007b8:	607b      	str	r3, [r7, #4]
    while(count < sizeof(input) - 1) {
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b30      	cmp	r3, #48	@ 0x30
 80007be:	d9e9      	bls.n	8000794 <main+0x3c>
 80007c0:	e000      	b.n	80007c4 <main+0x6c>
            break;
 80007c2:	bf00      	nop
    }
    input[count] = '\0';  // Null-terminate the string
 80007c4:	4a69      	ldr	r2, [pc, #420]	@ (800096c <main+0x214>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]

    if (strcmp(input, "led on") == 0) {
 80007ce:	4968      	ldr	r1, [pc, #416]	@ (8000970 <main+0x218>)
 80007d0:	4866      	ldr	r0, [pc, #408]	@ (800096c <main+0x214>)
 80007d2:	f7ff fd0d 	bl	80001f0 <strcmp>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f040 80a9 	bne.w	8000930 <main+0x1d8>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // Turn on the LED
 80007de:	2201      	movs	r2, #1
 80007e0:	2180      	movs	r1, #128	@ 0x80
 80007e2:	4864      	ldr	r0, [pc, #400]	@ (8000974 <main+0x21c>)
 80007e4:	f000 fefe 	bl	80015e4 <HAL_GPIO_WritePin>
        uart_buf_len = sprintf(uart_buf, "LED is now ON.\r\n");
 80007e8:	4963      	ldr	r1, [pc, #396]	@ (8000978 <main+0x220>)
 80007ea:	485d      	ldr	r0, [pc, #372]	@ (8000960 <main+0x208>)
 80007ec:	f004 f888 	bl	8004900 <siprintf>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4a5c      	ldr	r2, [pc, #368]	@ (8000964 <main+0x20c>)
 80007f4:	6013      	str	r3, [r2, #0]
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 80007f6:	4b5b      	ldr	r3, [pc, #364]	@ (8000964 <main+0x20c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000800:	4957      	ldr	r1, [pc, #348]	@ (8000960 <main+0x208>)
 8000802:	4859      	ldr	r0, [pc, #356]	@ (8000968 <main+0x210>)
 8000804:	f003 f923 	bl	8003a4e <HAL_UART_Transmit>

        while (1) {
            uart_buf_len = sprintf(uart_buf, "Enter PWM Frequency and Duty Cycle in format: freq=<value> duty=<value>\r\n");
 8000808:	495c      	ldr	r1, [pc, #368]	@ (800097c <main+0x224>)
 800080a:	4855      	ldr	r0, [pc, #340]	@ (8000960 <main+0x208>)
 800080c:	f004 f878 	bl	8004900 <siprintf>
 8000810:	4603      	mov	r3, r0
 8000812:	4a54      	ldr	r2, [pc, #336]	@ (8000964 <main+0x20c>)
 8000814:	6013      	str	r3, [r2, #0]
            HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8000816:	4b53      	ldr	r3, [pc, #332]	@ (8000964 <main+0x20c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	b29a      	uxth	r2, r3
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
 8000820:	494f      	ldr	r1, [pc, #316]	@ (8000960 <main+0x208>)
 8000822:	4851      	ldr	r0, [pc, #324]	@ (8000968 <main+0x210>)
 8000824:	f003 f913 	bl	8003a4e <HAL_UART_Transmit>

            count = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
            while(count < sizeof(input) - 1) {
 800082c:	e012      	b.n	8000854 <main+0xfc>
                char ch;
                HAL_UART_Receive(&hlpuart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800082e:	1cb9      	adds	r1, r7, #2
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	2201      	movs	r2, #1
 8000836:	484c      	ldr	r0, [pc, #304]	@ (8000968 <main+0x210>)
 8000838:	f003 f992 	bl	8003b60 <HAL_UART_Receive>
                if (ch == '\r')
 800083c:	78bb      	ldrb	r3, [r7, #2]
 800083e:	2b0d      	cmp	r3, #13
 8000840:	d00c      	beq.n	800085c <main+0x104>
                    break;
                input[count] = ch;
 8000842:	78b9      	ldrb	r1, [r7, #2]
 8000844:	4a49      	ldr	r2, [pc, #292]	@ (800096c <main+0x214>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	460a      	mov	r2, r1
 800084c:	701a      	strb	r2, [r3, #0]
                count++;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	3301      	adds	r3, #1
 8000852:	607b      	str	r3, [r7, #4]
            while(count < sizeof(input) - 1) {
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b30      	cmp	r3, #48	@ 0x30
 8000858:	d9e9      	bls.n	800082e <main+0xd6>
 800085a:	e000      	b.n	800085e <main+0x106>
                    break;
 800085c:	bf00      	nop
            }
            input[count] = '\0';  // Null-terminate the string
 800085e:	4a43      	ldr	r2, [pc, #268]	@ (800096c <main+0x214>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4413      	add	r3, r2
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]

            print_param(input);
 8000868:	4840      	ldr	r0, [pc, #256]	@ (800096c <main+0x214>)
 800086a:	f7ff fea1 	bl	80005b0 <print_param>

            arr_value = Calculate_Period(pwm_frequency);
 800086e:	4b44      	ldr	r3, [pc, #272]	@ (8000980 <main+0x228>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f898 	bl	80009a8 <Calculate_Period>
 8000878:	4603      	mov	r3, r0
 800087a:	4a42      	ldr	r2, [pc, #264]	@ (8000984 <main+0x22c>)
 800087c:	6013      	str	r3, [r2, #0]
            pulse_value = (arr_value * duty_cycle) / 100;
 800087e:	4b42      	ldr	r3, [pc, #264]	@ (8000988 <main+0x230>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	461a      	mov	r2, r3
 8000884:	4b3f      	ldr	r3, [pc, #252]	@ (8000984 <main+0x22c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	fb02 f303 	mul.w	r3, r2, r3
 800088c:	4a3f      	ldr	r2, [pc, #252]	@ (800098c <main+0x234>)
 800088e:	fba2 2303 	umull	r2, r3, r2, r3
 8000892:	095b      	lsrs	r3, r3, #5
 8000894:	4a3e      	ldr	r2, [pc, #248]	@ (8000990 <main+0x238>)
 8000896:	6013      	str	r3, [r2, #0]

            uart_buf_len = sprintf(uart_buf, "Value of ARR/Period is %lu\r\n", arr_value);
 8000898:	4b3a      	ldr	r3, [pc, #232]	@ (8000984 <main+0x22c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	493d      	ldr	r1, [pc, #244]	@ (8000994 <main+0x23c>)
 80008a0:	482f      	ldr	r0, [pc, #188]	@ (8000960 <main+0x208>)
 80008a2:	f004 f82d 	bl	8004900 <siprintf>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a2e      	ldr	r2, [pc, #184]	@ (8000964 <main+0x20c>)
 80008aa:	6013      	str	r3, [r2, #0]
            HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 80008ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000964 <main+0x20c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	492a      	ldr	r1, [pc, #168]	@ (8000960 <main+0x208>)
 80008b8:	482b      	ldr	r0, [pc, #172]	@ (8000968 <main+0x210>)
 80008ba:	f003 f8c8 	bl	8003a4e <HAL_UART_Transmit>

            uart_buf_len = sprintf(uart_buf, "Pulse value is %lu for %u%% duty cycle\r\n", pulse_value, duty_cycle);
 80008be:	4b34      	ldr	r3, [pc, #208]	@ (8000990 <main+0x238>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	4b31      	ldr	r3, [pc, #196]	@ (8000988 <main+0x230>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	4934      	ldr	r1, [pc, #208]	@ (8000998 <main+0x240>)
 80008c8:	4825      	ldr	r0, [pc, #148]	@ (8000960 <main+0x208>)
 80008ca:	f004 f819 	bl	8004900 <siprintf>
 80008ce:	4603      	mov	r3, r0
 80008d0:	4a24      	ldr	r2, [pc, #144]	@ (8000964 <main+0x20c>)
 80008d2:	6013      	str	r3, [r2, #0]
            HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 80008d4:	4b23      	ldr	r3, [pc, #140]	@ (8000964 <main+0x20c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	b29a      	uxth	r2, r3
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	4920      	ldr	r1, [pc, #128]	@ (8000960 <main+0x208>)
 80008e0:	4821      	ldr	r0, [pc, #132]	@ (8000968 <main+0x210>)
 80008e2:	f003 f8b4 	bl	8003a4e <HAL_UART_Transmit>

            HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 80008e6:	2104      	movs	r1, #4
 80008e8:	482c      	ldr	r0, [pc, #176]	@ (800099c <main+0x244>)
 80008ea:	f002 fb17 	bl	8002f1c <HAL_TIM_PWM_Stop>
            MX_TIM4_Init(pwm_frequency, duty_cycle);
 80008ee:	4b24      	ldr	r3, [pc, #144]	@ (8000980 <main+0x228>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a25      	ldr	r2, [pc, #148]	@ (8000988 <main+0x230>)
 80008f4:	7812      	ldrb	r2, [r2, #0]
 80008f6:	4611      	mov	r1, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 f92d 	bl	8000b58 <MX_TIM4_Init>
            HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80008fe:	2104      	movs	r1, #4
 8000900:	4826      	ldr	r0, [pc, #152]	@ (800099c <main+0x244>)
 8000902:	f002 fa05 	bl	8002d10 <HAL_TIM_PWM_Start>

            uart_buf_len = sprintf(uart_buf, "PWM Frequency is: %lu Hz, Duty Cycle is: %u%%\r\n", pwm_frequency, duty_cycle);
 8000906:	4b1e      	ldr	r3, [pc, #120]	@ (8000980 <main+0x228>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <main+0x230>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	4924      	ldr	r1, [pc, #144]	@ (80009a0 <main+0x248>)
 8000910:	4813      	ldr	r0, [pc, #76]	@ (8000960 <main+0x208>)
 8000912:	f003 fff5 	bl	8004900 <siprintf>
 8000916:	4603      	mov	r3, r0
 8000918:	4a12      	ldr	r2, [pc, #72]	@ (8000964 <main+0x20c>)
 800091a:	6013      	str	r3, [r2, #0]
            HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 800091c:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <main+0x20c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	b29a      	uxth	r2, r3
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	490e      	ldr	r1, [pc, #56]	@ (8000960 <main+0x208>)
 8000928:	480f      	ldr	r0, [pc, #60]	@ (8000968 <main+0x210>)
 800092a:	f003 f890 	bl	8003a4e <HAL_UART_Transmit>
            uart_buf_len = sprintf(uart_buf, "Enter PWM Frequency and Duty Cycle in format: freq=<value> duty=<value>\r\n");
 800092e:	e76b      	b.n	8000808 <main+0xb0>
        }
    } else {
        uart_buf_len = sprintf(uart_buf, "Invalid command. Please restart and try again.\r\n");
 8000930:	491c      	ldr	r1, [pc, #112]	@ (80009a4 <main+0x24c>)
 8000932:	480b      	ldr	r0, [pc, #44]	@ (8000960 <main+0x208>)
 8000934:	f003 ffe4 	bl	8004900 <siprintf>
 8000938:	4603      	mov	r3, r0
 800093a:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <main+0x20c>)
 800093c:	6013      	str	r3, [r2, #0]
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <main+0x20c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	b29a      	uxth	r2, r3
 8000944:	f04f 33ff 	mov.w	r3, #4294967295
 8000948:	4905      	ldr	r1, [pc, #20]	@ (8000960 <main+0x208>)
 800094a:	4807      	ldr	r0, [pc, #28]	@ (8000968 <main+0x210>)
 800094c:	f003 f87f 	bl	8003a4e <HAL_UART_Transmit>
 8000950:	2300      	movs	r3, #0
    }
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	080063f4 	.word	0x080063f4
 8000960:	20000160 	.word	0x20000160
 8000964:	200001c4 	.word	0x200001c4
 8000968:	2000008c 	.word	0x2000008c
 800096c:	200001c8 	.word	0x200001c8
 8000970:	0800641c 	.word	0x0800641c
 8000974:	48000400 	.word	0x48000400
 8000978:	08006424 	.word	0x08006424
 800097c:	08006438 	.word	0x08006438
 8000980:	20000000 	.word	0x20000000
 8000984:	200001fc 	.word	0x200001fc
 8000988:	20000004 	.word	0x20000004
 800098c:	51eb851f 	.word	0x51eb851f
 8000990:	20000200 	.word	0x20000200
 8000994:	08006484 	.word	0x08006484
 8000998:	080064a4 	.word	0x080064a4
 800099c:	20000114 	.word	0x20000114
 80009a0:	080064d0 	.word	0x080064d0
 80009a4:	08006500 	.word	0x08006500

080009a8 <Calculate_Period>:

static uint32_t Calculate_Period(uint32_t pwm_frequency)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
    uint32_t period = (80000000 / (pwm_frequency * (TIM_PRESCALAR + 1))) - 1;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80009b6:	fb02 f303 	mul.w	r3, r2, r3
 80009ba:	4a06      	ldr	r2, [pc, #24]	@ (80009d4 <Calculate_Period+0x2c>)
 80009bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c0:	3b01      	subs	r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
    return period;
 80009c4:	68fb      	ldr	r3, [r7, #12]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	04c4b400 	.word	0x04c4b400

080009d8 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b098      	sub	sp, #96	@ 0x60
 80009dc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	2244      	movs	r2, #68	@ 0x44
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f004 f8ae 	bl	8004b48 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 80009fc:	4b28      	ldr	r3, [pc, #160]	@ (8000aa0 <SystemClock_Config+0xc8>)
 80009fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a00:	4a27      	ldr	r2, [pc, #156]	@ (8000aa0 <SystemClock_Config+0xc8>)
 8000a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a06:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a08:	4b25      	ldr	r3, [pc, #148]	@ (8000aa0 <SystemClock_Config+0xc8>)
 8000a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a14:	4b23      	ldr	r3, [pc, #140]	@ (8000aa4 <SystemClock_Config+0xcc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000a1c:	4a21      	ldr	r2, [pc, #132]	@ (8000aa4 <SystemClock_Config+0xcc>)
 8000a1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a22:	6013      	str	r3, [r2, #0]
 8000a24:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <SystemClock_Config+0xcc>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a30:	2302      	movs	r3, #2
 8000a32:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3a:	2340      	movs	r3, #64	@ 0x40
 8000a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a42:	2302      	movs	r3, #2
 8000a44:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLM = 1;
 8000a46:	2301      	movs	r3, #1
 8000a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLN = 10;
 8000a4a:	230a      	movs	r3, #10
 8000a4c:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a4e:	2307      	movs	r3, #7
 8000a50:	657b      	str	r3, [r7, #84]	@ 0x54
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a52:	2302      	movs	r3, #2
 8000a54:	65bb      	str	r3, [r7, #88]	@ 0x58
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fdf6 	bl	8001650 <HAL_RCC_OscConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x96>
    {
        Error_Handler();
 8000a6a:	f000 f8d3 	bl	8000c14 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a6e:	230f      	movs	r3, #15
 8000a70:	60bb      	str	r3, [r7, #8]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a72:	2303      	movs	r3, #3
 8000a74:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	2104      	movs	r1, #4
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 f9fb 	bl	8001e84 <HAL_RCC_ClockConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xc0>
    {
        Error_Handler();
 8000a94:	f000 f8be 	bl	8000c14 <Error_Handler>
    }
}
 8000a98:	bf00      	nop
 8000a9a:	3760      	adds	r7, #96	@ 0x60
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40007000 	.word	0x40007000

08000aa8 <MX_GPIO_Init>:
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init 0 */

    /* USER CODE END MX_GPIO_Init 0 */

    // Enable GPIO Ports Clock
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_GPIO_Init+0x50>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab2:	4a11      	ldr	r2, [pc, #68]	@ (8000af8 <MX_GPIO_Init+0x50>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aba:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_GPIO_Init+0x50>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]

    // Configure GPIO pin : PB7
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ad4:	2380      	movs	r3, #128	@ 0x80
 8000ad6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4804      	ldr	r0, [pc, #16]	@ (8000afc <MX_GPIO_Init+0x54>)
 8000aea:	f000 fbe9 	bl	80012c0 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init 1 */

    /* USER CODE END MX_GPIO_Init 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000
 8000afc:	48000400 	.word	0x48000400

08000b00 <MX_LPUART1_UART_Init>:


// LPUART1 Initialization Function
static void MX_LPUART1_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_LPUART1_UART_Init 0 */

    /* USER CODE END MX_LPUART1_UART_Init 0 */

    hlpuart1.Instance = LPUART1;
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <MX_LPUART1_UART_Init+0x50>)
 8000b06:	4a13      	ldr	r2, [pc, #76]	@ (8000b54 <MX_LPUART1_UART_Init+0x54>)
 8000b08:	601a      	str	r2, [r3, #0]
    hlpuart1.Init.BaudRate = 115200;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_LPUART1_UART_Init+0x50>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
    hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <MX_LPUART1_UART_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
    hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0d      	ldr	r3, [pc, #52]	@ (8000b50 <MX_LPUART1_UART_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
    hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_LPUART1_UART_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
    hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <MX_LPUART1_UART_Init+0x50>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
    hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_LPUART1_UART_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
    hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b30:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <MX_LPUART1_UART_Init+0x50>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
    hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_LPUART1_UART_Init+0x50>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	@ (8000b50 <MX_LPUART1_UART_Init+0x50>)
 8000b3e:	f002 ff38 	bl	80039b2 <HAL_UART_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_LPUART1_UART_Init+0x4c>
    {
        Error_Handler();
 8000b48:	f000 f864 	bl	8000c14 <Error_Handler>
    }
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2000008c 	.word	0x2000008c
 8000b54:	40008000 	.word	0x40008000

08000b58 <MX_TIM4_Init>:

static void MX_TIM4_Init(uint32_t pwm_frequency, uint8_t duty_cycle)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	@ 0x30
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
 8000b74:	615a      	str	r2, [r3, #20]
 8000b76:	619a      	str	r2, [r3, #24]
    uint32_t prescaler = TIM_PRESCALAR;
 8000b78:	f641 733f 	movw	r3, #7999	@ 0x1f3f
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t arr_value = Calculate_Period(pwm_frequency);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ff12 	bl	80009a8 <Calculate_Period>
 8000b84:	62b8      	str	r0, [r7, #40]	@ 0x28
    uint32_t pulse_value = (arr_value * duty_cycle) / 100;
 8000b86:	78fb      	ldrb	r3, [r7, #3]
 8000b88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b8a:	fb02 f303 	mul.w	r3, r2, r3
 8000b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8000c08 <MX_TIM4_Init+0xb0>)
 8000b90:	fba2 2303 	umull	r2, r3, r2, r3
 8000b94:	095b      	lsrs	r3, r3, #5
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24

    htim4.Instance = TIM4;
 8000b98:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <MX_TIM4_Init+0xb4>)
 8000b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8000c10 <MX_TIM4_Init+0xb8>)
 8000b9c:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = prescaler;
 8000b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8000c0c <MX_TIM4_Init+0xb4>)
 8000ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ba2:	6053      	str	r3, [r2, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba4:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <MX_TIM4_Init+0xb4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = arr_value;
 8000baa:	4a18      	ldr	r2, [pc, #96]	@ (8000c0c <MX_TIM4_Init+0xb4>)
 8000bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bae:	60d3      	str	r3, [r2, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb0:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <MX_TIM4_Init+0xb4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <MX_TIM4_Init+0xb4>)
 8000bb8:	2280      	movs	r2, #128	@ 0x80
 8000bba:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bbc:	4813      	ldr	r0, [pc, #76]	@ (8000c0c <MX_TIM4_Init+0xb4>)
 8000bbe:	f002 f84f 	bl	8002c60 <HAL_TIM_PWM_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM4_Init+0x74>
    {
        Error_Handler();
 8000bc8:	f000 f824 	bl	8000c14 <Error_Handler>
    }

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bcc:	2360      	movs	r3, #96	@ 0x60
 8000bce:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
    sConfigOC.Pulse = pulse_value;
 8000be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be6:	60fb      	str	r3, [r7, #12]

    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	2204      	movs	r2, #4
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4806      	ldr	r0, [pc, #24]	@ (8000c0c <MX_TIM4_Init+0xb4>)
 8000bf2:	f002 fa29 	bl	8003048 <HAL_TIM_PWM_ConfigChannel>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM4_Init+0xa8>
    {
        Error_Handler();
 8000bfc:	f000 f80a 	bl	8000c14 <Error_Handler>
    }
}
 8000c00:	bf00      	nop
 8000c02:	3730      	adds	r7, #48	@ 0x30
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	51eb851f 	.word	0x51eb851f
 8000c0c:	20000114 	.word	0x20000114
 8000c10:	40000800 	.word	0x40000800

08000c14 <Error_Handler>:

void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <Error_Handler+0x4>

08000c1c <HAL_TIM_PWM_MspInit>:

/* USER CODE END ExternalFunctions */

/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx Peripheral clock enable */
  HAL_TIM_Base_MspInit(htim);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f000 f88b 	bl	8000d40 <HAL_TIM_Base_MspInit>
  HAL_TIM_MspPostInit(htim);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f000 f8a8 	bl	8000d80 <HAL_TIM_MspPostInit>

}
 8000c30:	bf00      	nop
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c42:	4a0e      	ldr	r2, [pc, #56]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c5a:	4a08      	ldr	r2, [pc, #32]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c62:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0ac      	sub	sp, #176	@ 0xb0
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	228c      	movs	r2, #140	@ 0x8c
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 ff51 	bl	8004b48 <memset>
  if(huart->Instance==LPUART1)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a22      	ldr	r2, [pc, #136]	@ (8000d34 <HAL_UART_MspInit+0xb4>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d13d      	bne.n	8000d2c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000cb0:	2320      	movs	r3, #32
 8000cb2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 fb05 	bl	80022cc <HAL_RCCEx_PeriphCLKConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc8:	f7ff ffa4 	bl	8000c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <HAL_UART_MspInit+0xb8>)
 8000cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cd0:	4a19      	ldr	r2, [pc, #100]	@ (8000d38 <HAL_UART_MspInit+0xb8>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000cd8:	4b17      	ldr	r3, [pc, #92]	@ (8000d38 <HAL_UART_MspInit+0xb8>)
 8000cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce4:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <HAL_UART_MspInit+0xb8>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce8:	4a13      	ldr	r2, [pc, #76]	@ (8000d38 <HAL_UART_MspInit+0xb8>)
 8000cea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <HAL_UART_MspInit+0xb8>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000cfc:	f000 fc98 	bl	8001630 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000d00:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d1a:	2308      	movs	r3, #8
 8000d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d24:	4619      	mov	r1, r3
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <HAL_UART_MspInit+0xbc>)
 8000d28:	f000 faca 	bl	80012c0 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000d2c:	bf00      	nop
 8000d2e:	37b0      	adds	r7, #176	@ 0xb0
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40008000 	.word	0x40008000
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	48001800 	.word	0x48001800

08000d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <HAL_TIM_Base_MspInit+0x38>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d10b      	bne.n	8000d6a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d52:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <HAL_TIM_Base_MspInit+0x3c>)
 8000d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d56:	4a09      	ldr	r2, [pc, #36]	@ (8000d7c <HAL_TIM_Base_MspInit+0x3c>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d5e:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <HAL_TIM_Base_MspInit+0x3c>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40000800 	.word	0x40000800
 8000d7c:	40021000 	.word	0x40021000

08000d80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a11      	ldr	r2, [pc, #68]	@ (8000de4 <HAL_TIM_MspPostInit+0x64>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d11b      	bne.n	8000dda <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <HAL_TIM_MspPostInit+0x68>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	4a10      	ldr	r2, [pc, #64]	@ (8000de8 <HAL_TIM_MspPostInit+0x68>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dae:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <HAL_TIM_MspPostInit+0x68>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dba:	2380      	movs	r3, #128	@ 0x80
 8000dbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	@ (8000dec <HAL_TIM_MspPostInit+0x6c>)
 8000dd6:	f000 fa73 	bl	80012c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	3720      	adds	r7, #32
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40000800 	.word	0x40000800
 8000de8:	40021000 	.word	0x40021000
 8000dec:	48000400 	.word	0x48000400

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <NMI_Handler+0x4>

08000df8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <MemManage_Handler+0x4>

08000e08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e46:	f000 f935 	bl	80010b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	60f8      	str	r0, [r7, #12]
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	e00a      	b.n	8000e76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e60:	f3af 8000 	nop.w
 8000e64:	4601      	mov	r1, r0
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	60ba      	str	r2, [r7, #8]
 8000e6c:	b2ca      	uxtb	r2, r1
 8000e6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	3301      	adds	r3, #1
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	dbf0      	blt.n	8000e60 <_read+0x12>
  }

  return len;
 8000e7e:	687b      	ldr	r3, [r7, #4]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	e009      	b.n	8000eae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	60ba      	str	r2, [r7, #8]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	dbf1      	blt.n	8000e9a <_write+0x12>
  }
  return len;
 8000eb6:	687b      	ldr	r3, [r7, #4]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <_close>:

int _close(int file)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ee8:	605a      	str	r2, [r3, #4]
  return 0;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <_isatty>:

int _isatty(int file)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f00:	2301      	movs	r3, #1
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b085      	sub	sp, #20
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	60f8      	str	r0, [r7, #12]
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f30:	4a14      	ldr	r2, [pc, #80]	@ (8000f84 <_sbrk+0x5c>)
 8000f32:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <_sbrk+0x60>)
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f3c:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f44:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <_sbrk+0x64>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	@ (8000f90 <_sbrk+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4a:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d207      	bcs.n	8000f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f58:	f003 fe44 	bl	8004be4 <__errno>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	220c      	movs	r2, #12
 8000f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	e009      	b.n	8000f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f68:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6e:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <_sbrk+0x64>)
 8000f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20050000 	.word	0x20050000
 8000f88:	00000400 	.word	0x00000400
 8000f8c:	20000204 	.word	0x20000204
 8000f90:	20000358 	.word	0x20000358

08000f94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <SystemInit+0x20>)
 8000f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f9e:	4a05      	ldr	r2, [pc, #20]	@ (8000fb4 <SystemInit+0x20>)
 8000fa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ff0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fbc:	f7ff ffea 	bl	8000f94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc0:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc2:	490d      	ldr	r1, [pc, #52]	@ (8000ff8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ffc <LoopForever+0xe>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001004 <LoopForever+0x16>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f003 fe03 	bl	8004bf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fea:	f7ff fbb5 	bl	8000758 <main>

08000fee <LoopForever>:

LoopForever:
    b LoopForever
 8000fee:	e7fe      	b.n	8000fee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ffc:	080066e8 	.word	0x080066e8
  ldr r2, =_sbss
 8001000:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001004:	20000358 	.word	0x20000358

08001008 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC1_2_IRQHandler>

0800100a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001014:	2003      	movs	r0, #3
 8001016:	f000 f91f 	bl	8001258 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800101a:	2000      	movs	r0, #0
 800101c:	f000 f80e 	bl	800103c <HAL_InitTick>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	71fb      	strb	r3, [r7, #7]
 800102a:	e001      	b.n	8001030 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800102c:	f7ff fe04 	bl	8000c38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001030:	79fb      	ldrb	r3, [r7, #7]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001048:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <HAL_InitTick+0x6c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d023      	beq.n	8001098 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001050:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <HAL_InitTick+0x70>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <HAL_InitTick+0x6c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800105e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001062:	fbb2 f3f3 	udiv	r3, r2, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f91d 	bl	80012a6 <HAL_SYSTICK_Config>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10f      	bne.n	8001092 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b0f      	cmp	r3, #15
 8001076:	d809      	bhi.n	800108c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001078:	2200      	movs	r2, #0
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f000 f8f5 	bl	800126e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001084:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <HAL_InitTick+0x74>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e007      	b.n	800109c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e004      	b.n	800109c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	73fb      	strb	r3, [r7, #15]
 8001096:	e001      	b.n	800109c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000010 	.word	0x20000010
 80010ac:	20000008 	.word	0x20000008
 80010b0:	2000000c 	.word	0x2000000c

080010b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_IncTick+0x20>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HAL_IncTick+0x24>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a04      	ldr	r2, [pc, #16]	@ (80010d8 <HAL_IncTick+0x24>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000010 	.word	0x20000010
 80010d8:	20000208 	.word	0x20000208

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b03      	ldr	r3, [pc, #12]	@ (80010f0 <HAL_GetTick+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000208 	.word	0x20000208

080010f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001104:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800111c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001126:	4a04      	ldr	r2, [pc, #16]	@ (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <__NVIC_GetPriorityGrouping+0x18>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f003 0307 	and.w	r3, r3, #7
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	@ (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	@ (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	@ 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
         );
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	@ 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001224:	d301      	bcc.n	800122a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001226:	2301      	movs	r3, #1
 8001228:	e00f      	b.n	800124a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122a:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <SysTick_Config+0x40>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001232:	210f      	movs	r1, #15
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f7ff ff8e 	bl	8001158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800123c:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <SysTick_Config+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001242:	4b04      	ldr	r3, [pc, #16]	@ (8001254 <SysTick_Config+0x40>)
 8001244:	2207      	movs	r2, #7
 8001246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010

08001258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff47 	bl	80010f4 <__NVIC_SetPriorityGrouping>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001280:	f7ff ff5c 	bl	800113c <__NVIC_GetPriorityGrouping>
 8001284:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff ff8e 	bl	80011ac <NVIC_EncodePriority>
 8001290:	4602      	mov	r2, r0
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff5d 	bl	8001158 <__NVIC_SetPriority>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ffb0 	bl	8001214 <SysTick_Config>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ce:	e166      	b.n	800159e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	2101      	movs	r1, #1
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	fa01 f303 	lsl.w	r3, r1, r3
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 8158 	beq.w	8001598 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d005      	beq.n	8001300 <HAL_GPIO_Init+0x40>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d130      	bne.n	8001362 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001336:	2201      	movs	r2, #1
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	f003 0201 	and.w	r2, r3, #1
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	2b03      	cmp	r3, #3
 800136c:	d017      	beq.n	800139e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d123      	bne.n	80013f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	08da      	lsrs	r2, r3, #3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3208      	adds	r2, #8
 80013b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	220f      	movs	r2, #15
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	691a      	ldr	r2, [r3, #16]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	6939      	ldr	r1, [r7, #16]
 80013ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0203 	and.w	r2, r3, #3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 80b2 	beq.w	8001598 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001434:	4b61      	ldr	r3, [pc, #388]	@ (80015bc <HAL_GPIO_Init+0x2fc>)
 8001436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001438:	4a60      	ldr	r2, [pc, #384]	@ (80015bc <HAL_GPIO_Init+0x2fc>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001440:	4b5e      	ldr	r3, [pc, #376]	@ (80015bc <HAL_GPIO_Init+0x2fc>)
 8001442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800144c:	4a5c      	ldr	r2, [pc, #368]	@ (80015c0 <HAL_GPIO_Init+0x300>)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	3302      	adds	r3, #2
 8001454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	220f      	movs	r2, #15
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001476:	d02b      	beq.n	80014d0 <HAL_GPIO_Init+0x210>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a52      	ldr	r2, [pc, #328]	@ (80015c4 <HAL_GPIO_Init+0x304>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d025      	beq.n	80014cc <HAL_GPIO_Init+0x20c>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a51      	ldr	r2, [pc, #324]	@ (80015c8 <HAL_GPIO_Init+0x308>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d01f      	beq.n	80014c8 <HAL_GPIO_Init+0x208>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a50      	ldr	r2, [pc, #320]	@ (80015cc <HAL_GPIO_Init+0x30c>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d019      	beq.n	80014c4 <HAL_GPIO_Init+0x204>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a4f      	ldr	r2, [pc, #316]	@ (80015d0 <HAL_GPIO_Init+0x310>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d013      	beq.n	80014c0 <HAL_GPIO_Init+0x200>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a4e      	ldr	r2, [pc, #312]	@ (80015d4 <HAL_GPIO_Init+0x314>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d00d      	beq.n	80014bc <HAL_GPIO_Init+0x1fc>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a4d      	ldr	r2, [pc, #308]	@ (80015d8 <HAL_GPIO_Init+0x318>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d007      	beq.n	80014b8 <HAL_GPIO_Init+0x1f8>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a4c      	ldr	r2, [pc, #304]	@ (80015dc <HAL_GPIO_Init+0x31c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d101      	bne.n	80014b4 <HAL_GPIO_Init+0x1f4>
 80014b0:	2307      	movs	r3, #7
 80014b2:	e00e      	b.n	80014d2 <HAL_GPIO_Init+0x212>
 80014b4:	2308      	movs	r3, #8
 80014b6:	e00c      	b.n	80014d2 <HAL_GPIO_Init+0x212>
 80014b8:	2306      	movs	r3, #6
 80014ba:	e00a      	b.n	80014d2 <HAL_GPIO_Init+0x212>
 80014bc:	2305      	movs	r3, #5
 80014be:	e008      	b.n	80014d2 <HAL_GPIO_Init+0x212>
 80014c0:	2304      	movs	r3, #4
 80014c2:	e006      	b.n	80014d2 <HAL_GPIO_Init+0x212>
 80014c4:	2303      	movs	r3, #3
 80014c6:	e004      	b.n	80014d2 <HAL_GPIO_Init+0x212>
 80014c8:	2302      	movs	r3, #2
 80014ca:	e002      	b.n	80014d2 <HAL_GPIO_Init+0x212>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <HAL_GPIO_Init+0x212>
 80014d0:	2300      	movs	r3, #0
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	f002 0203 	and.w	r2, r2, #3
 80014d8:	0092      	lsls	r2, r2, #2
 80014da:	4093      	lsls	r3, r2
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014e2:	4937      	ldr	r1, [pc, #220]	@ (80015c0 <HAL_GPIO_Init+0x300>)
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	089b      	lsrs	r3, r3, #2
 80014e8:	3302      	adds	r3, #2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014f0:	4b3b      	ldr	r3, [pc, #236]	@ (80015e0 <HAL_GPIO_Init+0x320>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001514:	4a32      	ldr	r2, [pc, #200]	@ (80015e0 <HAL_GPIO_Init+0x320>)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800151a:	4b31      	ldr	r3, [pc, #196]	@ (80015e0 <HAL_GPIO_Init+0x320>)
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800153e:	4a28      	ldr	r2, [pc, #160]	@ (80015e0 <HAL_GPIO_Init+0x320>)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001544:	4b26      	ldr	r3, [pc, #152]	@ (80015e0 <HAL_GPIO_Init+0x320>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001568:	4a1d      	ldr	r2, [pc, #116]	@ (80015e0 <HAL_GPIO_Init+0x320>)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <HAL_GPIO_Init+0x320>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001592:	4a13      	ldr	r2, [pc, #76]	@ (80015e0 <HAL_GPIO_Init+0x320>)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	3301      	adds	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	fa22 f303 	lsr.w	r3, r2, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f47f ae91 	bne.w	80012d0 <HAL_GPIO_Init+0x10>
  }
}
 80015ae:	bf00      	nop
 80015b0:	bf00      	nop
 80015b2:	371c      	adds	r7, #28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40010000 	.word	0x40010000
 80015c4:	48000400 	.word	0x48000400
 80015c8:	48000800 	.word	0x48000800
 80015cc:	48000c00 	.word	0x48000c00
 80015d0:	48001000 	.word	0x48001000
 80015d4:	48001400 	.word	0x48001400
 80015d8:	48001800 	.word	0x48001800
 80015dc:	48001c00 	.word	0x48001c00
 80015e0:	40010400 	.word	0x40010400

080015e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
 80015f0:	4613      	mov	r3, r2
 80015f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f4:	787b      	ldrb	r3, [r7, #1]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015fa:	887a      	ldrh	r2, [r7, #2]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001600:	e002      	b.n	8001608 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001618:	4b04      	ldr	r3, [pc, #16]	@ (800162c <HAL_PWREx_GetVoltageRange+0x18>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40007000 	.word	0x40007000

08001630 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001634:	4b05      	ldr	r3, [pc, #20]	@ (800164c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	4a04      	ldr	r2, [pc, #16]	@ (800164c <HAL_PWREx_EnableVddIO2+0x1c>)
 800163a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800163e:	6053      	str	r3, [r2, #4]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40007000 	.word	0x40007000

08001650 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d102      	bne.n	8001664 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	f000 bc08 	b.w	8001e74 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001664:	4b96      	ldr	r3, [pc, #600]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800166e:	4b94      	ldr	r3, [pc, #592]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80e4 	beq.w	800184e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d007      	beq.n	800169c <HAL_RCC_OscConfig+0x4c>
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2b0c      	cmp	r3, #12
 8001690:	f040 808b 	bne.w	80017aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2b01      	cmp	r3, #1
 8001698:	f040 8087 	bne.w	80017aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800169c:	4b88      	ldr	r3, [pc, #544]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <HAL_RCC_OscConfig+0x64>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e3df      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1a      	ldr	r2, [r3, #32]
 80016b8:	4b81      	ldr	r3, [pc, #516]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d004      	beq.n	80016ce <HAL_RCC_OscConfig+0x7e>
 80016c4:	4b7e      	ldr	r3, [pc, #504]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016cc:	e005      	b.n	80016da <HAL_RCC_OscConfig+0x8a>
 80016ce:	4b7c      	ldr	r3, [pc, #496]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 80016d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016da:	4293      	cmp	r3, r2
 80016dc:	d223      	bcs.n	8001726 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 fd92 	bl	800220c <RCC_SetFlashLatencyFromMSIRange>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e3c0      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016f2:	4b73      	ldr	r3, [pc, #460]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a72      	ldr	r2, [pc, #456]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b70      	ldr	r3, [pc, #448]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	496d      	ldr	r1, [pc, #436]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 800170c:	4313      	orrs	r3, r2
 800170e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001710:	4b6b      	ldr	r3, [pc, #428]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	4968      	ldr	r1, [pc, #416]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
 8001724:	e025      	b.n	8001772 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001726:	4b66      	ldr	r3, [pc, #408]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a65      	ldr	r2, [pc, #404]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 800172c:	f043 0308 	orr.w	r3, r3, #8
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b63      	ldr	r3, [pc, #396]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	4960      	ldr	r1, [pc, #384]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 8001740:	4313      	orrs	r3, r2
 8001742:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001744:	4b5e      	ldr	r3, [pc, #376]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	495b      	ldr	r1, [pc, #364]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d109      	bne.n	8001772 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4618      	mov	r0, r3
 8001764:	f000 fd52 	bl	800220c <RCC_SetFlashLatencyFromMSIRange>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e380      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001772:	f000 fc87 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8001776:	4602      	mov	r2, r0
 8001778:	4b51      	ldr	r3, [pc, #324]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	4950      	ldr	r1, [pc, #320]	@ (80018c4 <HAL_RCC_OscConfig+0x274>)
 8001784:	5ccb      	ldrb	r3, [r1, r3]
 8001786:	f003 031f 	and.w	r3, r3, #31
 800178a:	fa22 f303 	lsr.w	r3, r2, r3
 800178e:	4a4e      	ldr	r2, [pc, #312]	@ (80018c8 <HAL_RCC_OscConfig+0x278>)
 8001790:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001792:	4b4e      	ldr	r3, [pc, #312]	@ (80018cc <HAL_RCC_OscConfig+0x27c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fc50 	bl	800103c <HAL_InitTick>
 800179c:	4603      	mov	r3, r0
 800179e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d052      	beq.n	800184c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	e364      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d032      	beq.n	8001818 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017b2:	4b43      	ldr	r3, [pc, #268]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a42      	ldr	r2, [pc, #264]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017be:	f7ff fc8d 	bl	80010dc <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017c6:	f7ff fc89 	bl	80010dc <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e34d      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017d8:	4b39      	ldr	r3, [pc, #228]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017e4:	4b36      	ldr	r3, [pc, #216]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a35      	ldr	r2, [pc, #212]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 80017ea:	f043 0308 	orr.w	r3, r3, #8
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b33      	ldr	r3, [pc, #204]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4930      	ldr	r1, [pc, #192]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001802:	4b2f      	ldr	r3, [pc, #188]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	492b      	ldr	r1, [pc, #172]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
 8001816:	e01a      	b.n	800184e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001818:	4b29      	ldr	r3, [pc, #164]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a28      	ldr	r2, [pc, #160]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 800181e:	f023 0301 	bic.w	r3, r3, #1
 8001822:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001824:	f7ff fc5a 	bl	80010dc <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800182c:	f7ff fc56 	bl	80010dc <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e31a      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800183e:	4b20      	ldr	r3, [pc, #128]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x1dc>
 800184a:	e000      	b.n	800184e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800184c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d073      	beq.n	8001942 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	2b08      	cmp	r3, #8
 800185e:	d005      	beq.n	800186c <HAL_RCC_OscConfig+0x21c>
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2b0c      	cmp	r3, #12
 8001864:	d10e      	bne.n	8001884 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2b03      	cmp	r3, #3
 800186a:	d10b      	bne.n	8001884 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186c:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d063      	beq.n	8001940 <HAL_RCC_OscConfig+0x2f0>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d15f      	bne.n	8001940 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e2f7      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800188c:	d106      	bne.n	800189c <HAL_RCC_OscConfig+0x24c>
 800188e:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a0b      	ldr	r2, [pc, #44]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 8001894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e025      	b.n	80018e8 <HAL_RCC_OscConfig+0x298>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018a4:	d114      	bne.n	80018d0 <HAL_RCC_OscConfig+0x280>
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a05      	ldr	r2, [pc, #20]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 80018ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b03      	ldr	r3, [pc, #12]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a02      	ldr	r2, [pc, #8]	@ (80018c0 <HAL_RCC_OscConfig+0x270>)
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e013      	b.n	80018e8 <HAL_RCC_OscConfig+0x298>
 80018c0:	40021000 	.word	0x40021000
 80018c4:	08006540 	.word	0x08006540
 80018c8:	20000008 	.word	0x20000008
 80018cc:	2000000c 	.word	0x2000000c
 80018d0:	4ba0      	ldr	r3, [pc, #640]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a9f      	ldr	r2, [pc, #636]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 80018d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	4b9d      	ldr	r3, [pc, #628]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a9c      	ldr	r2, [pc, #624]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 80018e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d013      	beq.n	8001918 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff fbf4 	bl	80010dc <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f8:	f7ff fbf0 	bl	80010dc <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	@ 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e2b4      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800190a:	4b92      	ldr	r3, [pc, #584]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0x2a8>
 8001916:	e014      	b.n	8001942 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff fbe0 	bl	80010dc <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001920:	f7ff fbdc 	bl	80010dc <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	@ 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e2a0      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001932:	4b88      	ldr	r3, [pc, #544]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x2d0>
 800193e:	e000      	b.n	8001942 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d060      	beq.n	8001a10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	2b04      	cmp	r3, #4
 8001952:	d005      	beq.n	8001960 <HAL_RCC_OscConfig+0x310>
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d119      	bne.n	800198e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d116      	bne.n	800198e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001960:	4b7c      	ldr	r3, [pc, #496]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_OscConfig+0x328>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e27d      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001978:	4b76      	ldr	r3, [pc, #472]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	061b      	lsls	r3, r3, #24
 8001986:	4973      	ldr	r1, [pc, #460]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800198c:	e040      	b.n	8001a10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d023      	beq.n	80019de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001996:	4b6f      	ldr	r3, [pc, #444]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a6e      	ldr	r2, [pc, #440]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a2:	f7ff fb9b 	bl	80010dc <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019aa:	f7ff fb97 	bl	80010dc <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e25b      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019bc:	4b65      	ldr	r3, [pc, #404]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c8:	4b62      	ldr	r3, [pc, #392]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	061b      	lsls	r3, r3, #24
 80019d6:	495f      	ldr	r1, [pc, #380]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
 80019dc:	e018      	b.n	8001a10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019de:	4b5d      	ldr	r3, [pc, #372]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a5c      	ldr	r2, [pc, #368]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 80019e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ea:	f7ff fb77 	bl	80010dc <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f2:	f7ff fb73 	bl	80010dc <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e237      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a04:	4b53      	ldr	r3, [pc, #332]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f0      	bne.n	80019f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d03c      	beq.n	8001a96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d01c      	beq.n	8001a5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a24:	4b4b      	ldr	r3, [pc, #300]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a2a:	4a4a      	ldr	r2, [pc, #296]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a34:	f7ff fb52 	bl	80010dc <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a3c:	f7ff fb4e 	bl	80010dc <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e212      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a4e:	4b41      	ldr	r3, [pc, #260]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0ef      	beq.n	8001a3c <HAL_RCC_OscConfig+0x3ec>
 8001a5c:	e01b      	b.n	8001a96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a64:	4a3b      	ldr	r2, [pc, #236]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001a66:	f023 0301 	bic.w	r3, r3, #1
 8001a6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6e:	f7ff fb35 	bl	80010dc <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a76:	f7ff fb31 	bl	80010dc <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e1f5      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a88:	4b32      	ldr	r3, [pc, #200]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1ef      	bne.n	8001a76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 80a6 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10d      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab4:	4b27      	ldr	r3, [pc, #156]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab8:	4a26      	ldr	r2, [pc, #152]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001abe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ac0:	4b24      	ldr	r3, [pc, #144]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001acc:	2301      	movs	r3, #1
 8001ace:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad0:	4b21      	ldr	r3, [pc, #132]	@ (8001b58 <HAL_RCC_OscConfig+0x508>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d118      	bne.n	8001b0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001adc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b58 <HAL_RCC_OscConfig+0x508>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8001b58 <HAL_RCC_OscConfig+0x508>)
 8001ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae8:	f7ff faf8 	bl	80010dc <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af0:	f7ff faf4 	bl	80010dc <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e1b8      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <HAL_RCC_OscConfig+0x508>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d108      	bne.n	8001b28 <HAL_RCC_OscConfig+0x4d8>
 8001b16:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b26:	e029      	b.n	8001b7c <HAL_RCC_OscConfig+0x52c>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b05      	cmp	r3, #5
 8001b2e:	d115      	bne.n	8001b5c <HAL_RCC_OscConfig+0x50c>
 8001b30:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b36:	4a07      	ldr	r2, [pc, #28]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b40:	4b04      	ldr	r3, [pc, #16]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b46:	4a03      	ldr	r2, [pc, #12]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b50:	e014      	b.n	8001b7c <HAL_RCC_OscConfig+0x52c>
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40007000 	.word	0x40007000
 8001b5c:	4b9d      	ldr	r3, [pc, #628]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b62:	4a9c      	ldr	r2, [pc, #624]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b6c:	4b99      	ldr	r3, [pc, #612]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b72:	4a98      	ldr	r2, [pc, #608]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001b74:	f023 0304 	bic.w	r3, r3, #4
 8001b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d016      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7ff faaa 	bl	80010dc <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b8c:	f7ff faa6 	bl	80010dc <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e168      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba2:	4b8c      	ldr	r3, [pc, #560]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0ed      	beq.n	8001b8c <HAL_RCC_OscConfig+0x53c>
 8001bb0:	e015      	b.n	8001bde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb2:	f7ff fa93 	bl	80010dc <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7ff fa8f 	bl	80010dc <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e151      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd0:	4b80      	ldr	r3, [pc, #512]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1ed      	bne.n	8001bba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bde:	7ffb      	ldrb	r3, [r7, #31]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d105      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be4:	4b7b      	ldr	r3, [pc, #492]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be8:	4a7a      	ldr	r2, [pc, #488]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001bea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0320 	and.w	r3, r3, #32
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d03c      	beq.n	8001c76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d01c      	beq.n	8001c3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c04:	4b73      	ldr	r3, [pc, #460]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c0a:	4a72      	ldr	r2, [pc, #456]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c14:	f7ff fa62 	bl	80010dc <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c1c:	f7ff fa5e 	bl	80010dc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e122      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c2e:	4b69      	ldr	r3, [pc, #420]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001c30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0ef      	beq.n	8001c1c <HAL_RCC_OscConfig+0x5cc>
 8001c3c:	e01b      	b.n	8001c76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c3e:	4b65      	ldr	r3, [pc, #404]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001c40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c44:	4a63      	ldr	r2, [pc, #396]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001c46:	f023 0301 	bic.w	r3, r3, #1
 8001c4a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4e:	f7ff fa45 	bl	80010dc <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c56:	f7ff fa41 	bl	80010dc <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e105      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c68:	4b5a      	ldr	r3, [pc, #360]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1ef      	bne.n	8001c56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80f9 	beq.w	8001e72 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	f040 80cf 	bne.w	8001e28 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c8a:	4b52      	ldr	r3, [pc, #328]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f003 0203 	and.w	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d12c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d123      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d11b      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d113      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cda:	085b      	lsrs	r3, r3, #1
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d109      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	085b      	lsrs	r3, r3, #1
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d071      	beq.n	8001ddc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d068      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cfe:	4b35      	ldr	r3, [pc, #212]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d105      	bne.n	8001d16 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d0a:	4b32      	ldr	r3, [pc, #200]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e0ac      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001d20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d26:	f7ff f9d9 	bl	80010dc <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2e:	f7ff f9d5 	bl	80010dc <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e099      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d40:	4b24      	ldr	r3, [pc, #144]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f0      	bne.n	8001d2e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d4c:	4b21      	ldr	r3, [pc, #132]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	4b21      	ldr	r3, [pc, #132]	@ (8001dd8 <HAL_RCC_OscConfig+0x788>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d5c:	3a01      	subs	r2, #1
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	4311      	orrs	r1, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d66:	0212      	lsls	r2, r2, #8
 8001d68:	4311      	orrs	r1, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d6e:	0852      	lsrs	r2, r2, #1
 8001d70:	3a01      	subs	r2, #1
 8001d72:	0552      	lsls	r2, r2, #21
 8001d74:	4311      	orrs	r1, r2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d7a:	0852      	lsrs	r2, r2, #1
 8001d7c:	3a01      	subs	r2, #1
 8001d7e:	0652      	lsls	r2, r2, #25
 8001d80:	4311      	orrs	r1, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d86:	06d2      	lsls	r2, r2, #27
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	4912      	ldr	r1, [pc, #72]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d90:	4b10      	ldr	r3, [pc, #64]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001d96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001da2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001da6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001da8:	f7ff f998 	bl	80010dc <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db0:	f7ff f994 	bl	80010dc <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e058      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc2:	4b04      	ldr	r3, [pc, #16]	@ (8001dd4 <HAL_RCC_OscConfig+0x784>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dce:	e050      	b.n	8001e72 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e04f      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ddc:	4b27      	ldr	r3, [pc, #156]	@ (8001e7c <HAL_RCC_OscConfig+0x82c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d144      	bne.n	8001e72 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001de8:	4b24      	ldr	r3, [pc, #144]	@ (8001e7c <HAL_RCC_OscConfig+0x82c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a23      	ldr	r2, [pc, #140]	@ (8001e7c <HAL_RCC_OscConfig+0x82c>)
 8001dee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001df2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001df4:	4b21      	ldr	r3, [pc, #132]	@ (8001e7c <HAL_RCC_OscConfig+0x82c>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	4a20      	ldr	r2, [pc, #128]	@ (8001e7c <HAL_RCC_OscConfig+0x82c>)
 8001dfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dfe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e00:	f7ff f96c 	bl	80010dc <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e08:	f7ff f968 	bl	80010dc <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e02c      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1a:	4b18      	ldr	r3, [pc, #96]	@ (8001e7c <HAL_RCC_OscConfig+0x82c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x7b8>
 8001e26:	e024      	b.n	8001e72 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2b0c      	cmp	r3, #12
 8001e2c:	d01f      	beq.n	8001e6e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2e:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <HAL_RCC_OscConfig+0x82c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a12      	ldr	r2, [pc, #72]	@ (8001e7c <HAL_RCC_OscConfig+0x82c>)
 8001e34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3a:	f7ff f94f 	bl	80010dc <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e42:	f7ff f94b 	bl	80010dc <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e00f      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e54:	4b09      	ldr	r3, [pc, #36]	@ (8001e7c <HAL_RCC_OscConfig+0x82c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1f0      	bne.n	8001e42 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e60:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <HAL_RCC_OscConfig+0x82c>)
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	4905      	ldr	r1, [pc, #20]	@ (8001e7c <HAL_RCC_OscConfig+0x82c>)
 8001e66:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_RCC_OscConfig+0x830>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60cb      	str	r3, [r1, #12]
 8001e6c:	e001      	b.n	8001e72 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3720      	adds	r7, #32
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	feeefffc 	.word	0xfeeefffc

08001e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0e7      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b75      	ldr	r3, [pc, #468]	@ (8002070 <HAL_RCC_ClockConfig+0x1ec>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d910      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b72      	ldr	r3, [pc, #456]	@ (8002070 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 0207 	bic.w	r2, r3, #7
 8001eae:	4970      	ldr	r1, [pc, #448]	@ (8002070 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	4b6e      	ldr	r3, [pc, #440]	@ (8002070 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0cf      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d010      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	4b66      	ldr	r3, [pc, #408]	@ (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d908      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee4:	4b63      	ldr	r3, [pc, #396]	@ (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	4960      	ldr	r1, [pc, #384]	@ (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d04c      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0a:	4b5a      	ldr	r3, [pc, #360]	@ (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d121      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e0a6      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f22:	4b54      	ldr	r3, [pc, #336]	@ (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d115      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e09a      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f3a:	4b4e      	ldr	r3, [pc, #312]	@ (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e08e      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e086      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f5a:	4b46      	ldr	r3, [pc, #280]	@ (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f023 0203 	bic.w	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4943      	ldr	r1, [pc, #268]	@ (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f6c:	f7ff f8b6 	bl	80010dc <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f74:	f7ff f8b2 	bl	80010dc <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e06e      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 020c 	and.w	r2, r3, #12
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1eb      	bne.n	8001f74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d010      	beq.n	8001fca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	4b31      	ldr	r3, [pc, #196]	@ (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d208      	bcs.n	8001fca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	492b      	ldr	r1, [pc, #172]	@ (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fca:	4b29      	ldr	r3, [pc, #164]	@ (8002070 <HAL_RCC_ClockConfig+0x1ec>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d210      	bcs.n	8001ffa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd8:	4b25      	ldr	r3, [pc, #148]	@ (8002070 <HAL_RCC_ClockConfig+0x1ec>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f023 0207 	bic.w	r2, r3, #7
 8001fe0:	4923      	ldr	r1, [pc, #140]	@ (8002070 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe8:	4b21      	ldr	r3, [pc, #132]	@ (8002070 <HAL_RCC_ClockConfig+0x1ec>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e036      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b00      	cmp	r3, #0
 8002004:	d008      	beq.n	8002018 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002006:	4b1b      	ldr	r3, [pc, #108]	@ (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	4918      	ldr	r1, [pc, #96]	@ (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8002014:	4313      	orrs	r3, r2
 8002016:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d009      	beq.n	8002038 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002024:	4b13      	ldr	r3, [pc, #76]	@ (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4910      	ldr	r1, [pc, #64]	@ (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002038:	f000 f824 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 800203c:	4602      	mov	r2, r0
 800203e:	4b0d      	ldr	r3, [pc, #52]	@ (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	091b      	lsrs	r3, r3, #4
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	490b      	ldr	r1, [pc, #44]	@ (8002078 <HAL_RCC_ClockConfig+0x1f4>)
 800204a:	5ccb      	ldrb	r3, [r1, r3]
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
 8002054:	4a09      	ldr	r2, [pc, #36]	@ (800207c <HAL_RCC_ClockConfig+0x1f8>)
 8002056:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002058:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <HAL_RCC_ClockConfig+0x1fc>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe ffed 	bl	800103c <HAL_InitTick>
 8002062:	4603      	mov	r3, r0
 8002064:	72fb      	strb	r3, [r7, #11]

  return status;
 8002066:	7afb      	ldrb	r3, [r7, #11]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40022000 	.word	0x40022000
 8002074:	40021000 	.word	0x40021000
 8002078:	08006540 	.word	0x08006540
 800207c:	20000008 	.word	0x20000008
 8002080:	2000000c 	.word	0x2000000c

08002084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	@ 0x24
 8002088:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002092:	4b3e      	ldr	r3, [pc, #248]	@ (800218c <HAL_RCC_GetSysClockFreq+0x108>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800209c:	4b3b      	ldr	r3, [pc, #236]	@ (800218c <HAL_RCC_GetSysClockFreq+0x108>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0x34>
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b0c      	cmp	r3, #12
 80020b0:	d121      	bne.n	80020f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d11e      	bne.n	80020f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020b8:	4b34      	ldr	r3, [pc, #208]	@ (800218c <HAL_RCC_GetSysClockFreq+0x108>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020c4:	4b31      	ldr	r3, [pc, #196]	@ (800218c <HAL_RCC_GetSysClockFreq+0x108>)
 80020c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ca:	0a1b      	lsrs	r3, r3, #8
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	e005      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020d4:	4b2d      	ldr	r3, [pc, #180]	@ (800218c <HAL_RCC_GetSysClockFreq+0x108>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10d      	bne.n	800210c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020f4:	e00a      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d102      	bne.n	8002102 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020fc:	4b25      	ldr	r3, [pc, #148]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x110>)
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	e004      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	2b08      	cmp	r3, #8
 8002106:	d101      	bne.n	800210c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002108:	4b23      	ldr	r3, [pc, #140]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x114>)
 800210a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	2b0c      	cmp	r3, #12
 8002110:	d134      	bne.n	800217c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002112:	4b1e      	ldr	r3, [pc, #120]	@ (800218c <HAL_RCC_GetSysClockFreq+0x108>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d003      	beq.n	800212a <HAL_RCC_GetSysClockFreq+0xa6>
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d003      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0xac>
 8002128:	e005      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800212a:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x110>)
 800212c:	617b      	str	r3, [r7, #20]
      break;
 800212e:	e005      	b.n	800213c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002130:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x114>)
 8002132:	617b      	str	r3, [r7, #20]
      break;
 8002134:	e002      	b.n	800213c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	617b      	str	r3, [r7, #20]
      break;
 800213a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800213c:	4b13      	ldr	r3, [pc, #76]	@ (800218c <HAL_RCC_GetSysClockFreq+0x108>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	3301      	adds	r3, #1
 8002148:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800214a:	4b10      	ldr	r3, [pc, #64]	@ (800218c <HAL_RCC_GetSysClockFreq+0x108>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	fb03 f202 	mul.w	r2, r3, r2
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002160:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002162:	4b0a      	ldr	r3, [pc, #40]	@ (800218c <HAL_RCC_GetSysClockFreq+0x108>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	0e5b      	lsrs	r3, r3, #25
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	3301      	adds	r3, #1
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	fbb2 f3f3 	udiv	r3, r2, r3
 800217a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800217c:	69bb      	ldr	r3, [r7, #24]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3724      	adds	r7, #36	@ 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	08006558 	.word	0x08006558
 8002194:	00f42400 	.word	0x00f42400
 8002198:	007a1200 	.word	0x007a1200

0800219c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a0:	4b03      	ldr	r3, [pc, #12]	@ (80021b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000008 	.word	0x20000008

080021b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021b8:	f7ff fff0 	bl	800219c <HAL_RCC_GetHCLKFreq>
 80021bc:	4602      	mov	r2, r0
 80021be:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	4904      	ldr	r1, [pc, #16]	@ (80021dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ca:	5ccb      	ldrb	r3, [r1, r3]
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000
 80021dc:	08006550 	.word	0x08006550

080021e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021e4:	f7ff ffda 	bl	800219c <HAL_RCC_GetHCLKFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	0adb      	lsrs	r3, r3, #11
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4904      	ldr	r1, [pc, #16]	@ (8002208 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	08006550 	.word	0x08006550

0800220c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002218:	4b2a      	ldr	r3, [pc, #168]	@ (80022c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002224:	f7ff f9f6 	bl	8001614 <HAL_PWREx_GetVoltageRange>
 8002228:	6178      	str	r0, [r7, #20]
 800222a:	e014      	b.n	8002256 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800222c:	4b25      	ldr	r3, [pc, #148]	@ (80022c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002230:	4a24      	ldr	r2, [pc, #144]	@ (80022c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002236:	6593      	str	r3, [r2, #88]	@ 0x58
 8002238:	4b22      	ldr	r3, [pc, #136]	@ (80022c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800223a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002244:	f7ff f9e6 	bl	8001614 <HAL_PWREx_GetVoltageRange>
 8002248:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800224a:	4b1e      	ldr	r3, [pc, #120]	@ (80022c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224e:	4a1d      	ldr	r2, [pc, #116]	@ (80022c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002254:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800225c:	d10b      	bne.n	8002276 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b80      	cmp	r3, #128	@ 0x80
 8002262:	d919      	bls.n	8002298 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2ba0      	cmp	r3, #160	@ 0xa0
 8002268:	d902      	bls.n	8002270 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800226a:	2302      	movs	r3, #2
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	e013      	b.n	8002298 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002270:	2301      	movs	r3, #1
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	e010      	b.n	8002298 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b80      	cmp	r3, #128	@ 0x80
 800227a:	d902      	bls.n	8002282 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800227c:	2303      	movs	r3, #3
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	e00a      	b.n	8002298 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b80      	cmp	r3, #128	@ 0x80
 8002286:	d102      	bne.n	800228e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002288:	2302      	movs	r3, #2
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	e004      	b.n	8002298 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b70      	cmp	r3, #112	@ 0x70
 8002292:	d101      	bne.n	8002298 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002294:	2301      	movs	r3, #1
 8002296:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002298:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f023 0207 	bic.w	r2, r3, #7
 80022a0:	4909      	ldr	r1, [pc, #36]	@ (80022c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022a8:	4b07      	ldr	r3, [pc, #28]	@ (80022c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d001      	beq.n	80022ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40022000 	.word	0x40022000

080022cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022d4:	2300      	movs	r3, #0
 80022d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022d8:	2300      	movs	r3, #0
 80022da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d041      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022f0:	d02a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022f6:	d824      	bhi.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022fc:	d008      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002302:	d81e      	bhi.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00a      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002308:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800230c:	d010      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800230e:	e018      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002310:	4b86      	ldr	r3, [pc, #536]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a85      	ldr	r2, [pc, #532]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800231c:	e015      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3304      	adds	r3, #4
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f000 facd 	bl	80028c4 <RCCEx_PLLSAI1_Config>
 800232a:	4603      	mov	r3, r0
 800232c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800232e:	e00c      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3320      	adds	r3, #32
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fbb6 	bl	8002aa8 <RCCEx_PLLSAI2_Config>
 800233c:	4603      	mov	r3, r0
 800233e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002340:	e003      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	74fb      	strb	r3, [r7, #19]
      break;
 8002346:	e000      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800234a:	7cfb      	ldrb	r3, [r7, #19]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10b      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002350:	4b76      	ldr	r3, [pc, #472]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002356:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800235e:	4973      	ldr	r1, [pc, #460]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002366:	e001      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002368:	7cfb      	ldrb	r3, [r7, #19]
 800236a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d041      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800237c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002380:	d02a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002382:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002386:	d824      	bhi.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002388:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800238c:	d008      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800238e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002392:	d81e      	bhi.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800239c:	d010      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800239e:	e018      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023a0:	4b62      	ldr	r3, [pc, #392]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4a61      	ldr	r2, [pc, #388]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023ac:	e015      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3304      	adds	r3, #4
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 fa85 	bl	80028c4 <RCCEx_PLLSAI1_Config>
 80023ba:	4603      	mov	r3, r0
 80023bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023be:	e00c      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3320      	adds	r3, #32
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 fb6e 	bl	8002aa8 <RCCEx_PLLSAI2_Config>
 80023cc:	4603      	mov	r3, r0
 80023ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023d0:	e003      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	74fb      	strb	r3, [r7, #19]
      break;
 80023d6:	e000      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023da:	7cfb      	ldrb	r3, [r7, #19]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10b      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023e0:	4b52      	ldr	r3, [pc, #328]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023ee:	494f      	ldr	r1, [pc, #316]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80023f6:	e001      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80a0 	beq.w	800254a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800240e:	4b47      	ldr	r3, [pc, #284]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800241e:	2300      	movs	r3, #0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00d      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002424:	4b41      	ldr	r3, [pc, #260]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002428:	4a40      	ldr	r2, [pc, #256]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800242e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002430:	4b3e      	ldr	r3, [pc, #248]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800243c:	2301      	movs	r3, #1
 800243e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002440:	4b3b      	ldr	r3, [pc, #236]	@ (8002530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a3a      	ldr	r2, [pc, #232]	@ (8002530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800244a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800244c:	f7fe fe46 	bl	80010dc <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002452:	e009      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002454:	f7fe fe42 	bl	80010dc <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d902      	bls.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	74fb      	strb	r3, [r7, #19]
        break;
 8002466:	e005      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002468:	4b31      	ldr	r3, [pc, #196]	@ (8002530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0ef      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d15c      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800247a:	4b2c      	ldr	r3, [pc, #176]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002480:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002484:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01f      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	429a      	cmp	r2, r3
 8002496:	d019      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002498:	4b24      	ldr	r3, [pc, #144]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024a4:	4b21      	ldr	r3, [pc, #132]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024aa:	4a20      	ldr	r2, [pc, #128]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024b4:	4b1d      	ldr	r3, [pc, #116]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ba:	4a1c      	ldr	r2, [pc, #112]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024c4:	4a19      	ldr	r2, [pc, #100]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d016      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d6:	f7fe fe01 	bl	80010dc <HAL_GetTick>
 80024da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024dc:	e00b      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024de:	f7fe fdfd 	bl	80010dc <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d902      	bls.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	74fb      	strb	r3, [r7, #19]
            break;
 80024f4:	e006      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f6:	4b0d      	ldr	r3, [pc, #52]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0ec      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10c      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800250a:	4b08      	ldr	r3, [pc, #32]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002510:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251a:	4904      	ldr	r1, [pc, #16]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002522:	e009      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002524:	7cfb      	ldrb	r3, [r7, #19]
 8002526:	74bb      	strb	r3, [r7, #18]
 8002528:	e006      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002534:	7cfb      	ldrb	r3, [r7, #19]
 8002536:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002538:	7c7b      	ldrb	r3, [r7, #17]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d105      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800253e:	4ba6      	ldr	r3, [pc, #664]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002542:	4aa5      	ldr	r2, [pc, #660]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002544:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002548:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002556:	4ba0      	ldr	r3, [pc, #640]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255c:	f023 0203 	bic.w	r2, r3, #3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002564:	499c      	ldr	r1, [pc, #624]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00a      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002578:	4b97      	ldr	r3, [pc, #604]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257e:	f023 020c 	bic.w	r2, r3, #12
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002586:	4994      	ldr	r1, [pc, #592]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00a      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800259a:	4b8f      	ldr	r3, [pc, #572]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800259c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	498b      	ldr	r1, [pc, #556]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00a      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025bc:	4b86      	ldr	r3, [pc, #536]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ca:	4983      	ldr	r1, [pc, #524]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00a      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025de:	4b7e      	ldr	r3, [pc, #504]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ec:	497a      	ldr	r1, [pc, #488]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00a      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002600:	4b75      	ldr	r3, [pc, #468]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002606:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260e:	4972      	ldr	r1, [pc, #456]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002622:	4b6d      	ldr	r3, [pc, #436]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002628:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002630:	4969      	ldr	r1, [pc, #420]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002644:	4b64      	ldr	r3, [pc, #400]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002652:	4961      	ldr	r1, [pc, #388]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002666:	4b5c      	ldr	r3, [pc, #368]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002674:	4958      	ldr	r1, [pc, #352]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00a      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002688:	4b53      	ldr	r3, [pc, #332]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002696:	4950      	ldr	r1, [pc, #320]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026aa:	4b4b      	ldr	r3, [pc, #300]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b8:	4947      	ldr	r1, [pc, #284]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026cc:	4b42      	ldr	r3, [pc, #264]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026da:	493f      	ldr	r1, [pc, #252]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d028      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026ee:	4b3a      	ldr	r3, [pc, #232]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fc:	4936      	ldr	r1, [pc, #216]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002708:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800270c:	d106      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800270e:	4b32      	ldr	r3, [pc, #200]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	4a31      	ldr	r2, [pc, #196]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002714:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002718:	60d3      	str	r3, [r2, #12]
 800271a:	e011      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002720:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002724:	d10c      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3304      	adds	r3, #4
 800272a:	2101      	movs	r1, #1
 800272c:	4618      	mov	r0, r3
 800272e:	f000 f8c9 	bl	80028c4 <RCCEx_PLLSAI1_Config>
 8002732:	4603      	mov	r3, r0
 8002734:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002736:	7cfb      	ldrb	r3, [r7, #19]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d028      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800274c:	4b22      	ldr	r3, [pc, #136]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002752:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800275a:	491f      	ldr	r1, [pc, #124]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002766:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800276a:	d106      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800276c:	4b1a      	ldr	r3, [pc, #104]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4a19      	ldr	r2, [pc, #100]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002776:	60d3      	str	r3, [r2, #12]
 8002778:	e011      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800277e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002782:	d10c      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3304      	adds	r3, #4
 8002788:	2101      	movs	r1, #1
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f89a 	bl	80028c4 <RCCEx_PLLSAI1_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800279a:	7cfb      	ldrb	r3, [r7, #19]
 800279c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d02a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027aa:	4b0b      	ldr	r3, [pc, #44]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027b8:	4907      	ldr	r1, [pc, #28]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027c8:	d108      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ca:	4b03      	ldr	r3, [pc, #12]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	4a02      	ldr	r2, [pc, #8]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027d4:	60d3      	str	r3, [r2, #12]
 80027d6:	e013      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80027d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027e4:	d10c      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2101      	movs	r1, #1
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 f869 	bl	80028c4 <RCCEx_PLLSAI1_Config>
 80027f2:	4603      	mov	r3, r0
 80027f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027f6:	7cfb      	ldrb	r3, [r7, #19]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80027fc:	7cfb      	ldrb	r3, [r7, #19]
 80027fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d02f      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800280c:	4b2c      	ldr	r3, [pc, #176]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002812:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800281a:	4929      	ldr	r1, [pc, #164]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002826:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800282a:	d10d      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3304      	adds	r3, #4
 8002830:	2102      	movs	r1, #2
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f846 	bl	80028c4 <RCCEx_PLLSAI1_Config>
 8002838:	4603      	mov	r3, r0
 800283a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800283c:	7cfb      	ldrb	r3, [r7, #19]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d014      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002842:	7cfb      	ldrb	r3, [r7, #19]
 8002844:	74bb      	strb	r3, [r7, #18]
 8002846:	e011      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800284c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002850:	d10c      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3320      	adds	r3, #32
 8002856:	2102      	movs	r1, #2
 8002858:	4618      	mov	r0, r3
 800285a:	f000 f925 	bl	8002aa8 <RCCEx_PLLSAI2_Config>
 800285e:	4603      	mov	r3, r0
 8002860:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002862:	7cfb      	ldrb	r3, [r7, #19]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00b      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002878:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002888:	490d      	ldr	r1, [pc, #52]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00b      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800289c:	4b08      	ldr	r3, [pc, #32]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028ac:	4904      	ldr	r1, [pc, #16]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000

080028c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028d2:	4b74      	ldr	r3, [pc, #464]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d018      	beq.n	8002910 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028de:	4b71      	ldr	r3, [pc, #452]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0203 	and.w	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d10d      	bne.n	800290a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
       ||
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d009      	beq.n	800290a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028f6:	4b6b      	ldr	r3, [pc, #428]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
       ||
 8002906:	429a      	cmp	r2, r3
 8002908:	d047      	beq.n	800299a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
 800290e:	e044      	b.n	800299a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b03      	cmp	r3, #3
 8002916:	d018      	beq.n	800294a <RCCEx_PLLSAI1_Config+0x86>
 8002918:	2b03      	cmp	r3, #3
 800291a:	d825      	bhi.n	8002968 <RCCEx_PLLSAI1_Config+0xa4>
 800291c:	2b01      	cmp	r3, #1
 800291e:	d002      	beq.n	8002926 <RCCEx_PLLSAI1_Config+0x62>
 8002920:	2b02      	cmp	r3, #2
 8002922:	d009      	beq.n	8002938 <RCCEx_PLLSAI1_Config+0x74>
 8002924:	e020      	b.n	8002968 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002926:	4b5f      	ldr	r3, [pc, #380]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d11d      	bne.n	800296e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002936:	e01a      	b.n	800296e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002938:	4b5a      	ldr	r3, [pc, #360]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002940:	2b00      	cmp	r3, #0
 8002942:	d116      	bne.n	8002972 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002948:	e013      	b.n	8002972 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800294a:	4b56      	ldr	r3, [pc, #344]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10f      	bne.n	8002976 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002956:	4b53      	ldr	r3, [pc, #332]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002966:	e006      	b.n	8002976 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
      break;
 800296c:	e004      	b.n	8002978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800296e:	bf00      	nop
 8002970:	e002      	b.n	8002978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002972:	bf00      	nop
 8002974:	e000      	b.n	8002978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002976:	bf00      	nop
    }

    if(status == HAL_OK)
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10d      	bne.n	800299a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800297e:	4b49      	ldr	r3, [pc, #292]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6819      	ldr	r1, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	430b      	orrs	r3, r1
 8002994:	4943      	ldr	r1, [pc, #268]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002996:	4313      	orrs	r3, r2
 8002998:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d17c      	bne.n	8002a9a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029a0:	4b40      	ldr	r3, [pc, #256]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a3f      	ldr	r2, [pc, #252]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ac:	f7fe fb96 	bl	80010dc <HAL_GetTick>
 80029b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029b2:	e009      	b.n	80029c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029b4:	f7fe fb92 	bl	80010dc <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d902      	bls.n	80029c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	73fb      	strb	r3, [r7, #15]
        break;
 80029c6:	e005      	b.n	80029d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029c8:	4b36      	ldr	r3, [pc, #216]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ef      	bne.n	80029b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d15f      	bne.n	8002a9a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d110      	bne.n	8002a02 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029e0:	4b30      	ldr	r3, [pc, #192]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80029e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6892      	ldr	r2, [r2, #8]
 80029f0:	0211      	lsls	r1, r2, #8
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68d2      	ldr	r2, [r2, #12]
 80029f6:	06d2      	lsls	r2, r2, #27
 80029f8:	430a      	orrs	r2, r1
 80029fa:	492a      	ldr	r1, [pc, #168]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	610b      	str	r3, [r1, #16]
 8002a00:	e027      	b.n	8002a52 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d112      	bne.n	8002a2e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a08:	4b26      	ldr	r3, [pc, #152]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002a10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6892      	ldr	r2, [r2, #8]
 8002a18:	0211      	lsls	r1, r2, #8
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6912      	ldr	r2, [r2, #16]
 8002a1e:	0852      	lsrs	r2, r2, #1
 8002a20:	3a01      	subs	r2, #1
 8002a22:	0552      	lsls	r2, r2, #21
 8002a24:	430a      	orrs	r2, r1
 8002a26:	491f      	ldr	r1, [pc, #124]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	610b      	str	r3, [r1, #16]
 8002a2c:	e011      	b.n	8002a52 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a36:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6892      	ldr	r2, [r2, #8]
 8002a3e:	0211      	lsls	r1, r2, #8
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6952      	ldr	r2, [r2, #20]
 8002a44:	0852      	lsrs	r2, r2, #1
 8002a46:	3a01      	subs	r2, #1
 8002a48:	0652      	lsls	r2, r2, #25
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	4915      	ldr	r1, [pc, #84]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a52:	4b14      	ldr	r3, [pc, #80]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a13      	ldr	r2, [pc, #76]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a5c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5e:	f7fe fb3d 	bl	80010dc <HAL_GetTick>
 8002a62:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a64:	e009      	b.n	8002a7a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a66:	f7fe fb39 	bl	80010dc <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d902      	bls.n	8002a7a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	73fb      	strb	r3, [r7, #15]
          break;
 8002a78:	e005      	b.n	8002a86 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0ef      	beq.n	8002a66 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d106      	bne.n	8002a9a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a8c:	4b05      	ldr	r3, [pc, #20]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	4903      	ldr	r1, [pc, #12]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40021000 	.word	0x40021000

08002aa8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ab6:	4b69      	ldr	r3, [pc, #420]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d018      	beq.n	8002af4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ac2:	4b66      	ldr	r3, [pc, #408]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 0203 	and.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d10d      	bne.n	8002aee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ada:	4b60      	ldr	r3, [pc, #384]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
       ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d047      	beq.n	8002b7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
 8002af2:	e044      	b.n	8002b7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d018      	beq.n	8002b2e <RCCEx_PLLSAI2_Config+0x86>
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d825      	bhi.n	8002b4c <RCCEx_PLLSAI2_Config+0xa4>
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d002      	beq.n	8002b0a <RCCEx_PLLSAI2_Config+0x62>
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d009      	beq.n	8002b1c <RCCEx_PLLSAI2_Config+0x74>
 8002b08:	e020      	b.n	8002b4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b0a:	4b54      	ldr	r3, [pc, #336]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d11d      	bne.n	8002b52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1a:	e01a      	b.n	8002b52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b1c:	4b4f      	ldr	r3, [pc, #316]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d116      	bne.n	8002b56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b2c:	e013      	b.n	8002b56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b2e:	4b4b      	ldr	r3, [pc, #300]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10f      	bne.n	8002b5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b3a:	4b48      	ldr	r3, [pc, #288]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b4a:	e006      	b.n	8002b5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b50:	e004      	b.n	8002b5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b52:	bf00      	nop
 8002b54:	e002      	b.n	8002b5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b56:	bf00      	nop
 8002b58:	e000      	b.n	8002b5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10d      	bne.n	8002b7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b62:	4b3e      	ldr	r3, [pc, #248]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6819      	ldr	r1, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	430b      	orrs	r3, r1
 8002b78:	4938      	ldr	r1, [pc, #224]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d166      	bne.n	8002c52 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b84:	4b35      	ldr	r3, [pc, #212]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a34      	ldr	r2, [pc, #208]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b90:	f7fe faa4 	bl	80010dc <HAL_GetTick>
 8002b94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b96:	e009      	b.n	8002bac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b98:	f7fe faa0 	bl	80010dc <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d902      	bls.n	8002bac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	73fb      	strb	r3, [r7, #15]
        break;
 8002baa:	e005      	b.n	8002bb8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bac:	4b2b      	ldr	r3, [pc, #172]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1ef      	bne.n	8002b98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d149      	bne.n	8002c52 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d110      	bne.n	8002be6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bc4:	4b25      	ldr	r3, [pc, #148]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002bcc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6892      	ldr	r2, [r2, #8]
 8002bd4:	0211      	lsls	r1, r2, #8
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68d2      	ldr	r2, [r2, #12]
 8002bda:	06d2      	lsls	r2, r2, #27
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	491f      	ldr	r1, [pc, #124]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	614b      	str	r3, [r1, #20]
 8002be4:	e011      	b.n	8002c0a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002be6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002bee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6892      	ldr	r2, [r2, #8]
 8002bf6:	0211      	lsls	r1, r2, #8
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6912      	ldr	r2, [r2, #16]
 8002bfc:	0852      	lsrs	r2, r2, #1
 8002bfe:	3a01      	subs	r2, #1
 8002c00:	0652      	lsls	r2, r2, #25
 8002c02:	430a      	orrs	r2, r1
 8002c04:	4915      	ldr	r1, [pc, #84]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c0a:	4b14      	ldr	r3, [pc, #80]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a13      	ldr	r2, [pc, #76]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c14:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c16:	f7fe fa61 	bl	80010dc <HAL_GetTick>
 8002c1a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c1c:	e009      	b.n	8002c32 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c1e:	f7fe fa5d 	bl	80010dc <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d902      	bls.n	8002c32 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	73fb      	strb	r3, [r7, #15]
          break;
 8002c30:	e005      	b.n	8002c3e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c32:	4b0a      	ldr	r3, [pc, #40]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0ef      	beq.n	8002c1e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d106      	bne.n	8002c52 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c44:	4b05      	ldr	r3, [pc, #20]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	4903      	ldr	r1, [pc, #12]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40021000 	.word	0x40021000

08002c60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e049      	b.n	8002d06 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fd ffc8 	bl	8000c1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	f000 fae6 	bl	8003270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <HAL_TIM_PWM_Start+0x24>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	bf14      	ite	ne
 8002d2c:	2301      	movne	r3, #1
 8002d2e:	2300      	moveq	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	e03c      	b.n	8002dae <HAL_TIM_PWM_Start+0x9e>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d109      	bne.n	8002d4e <HAL_TIM_PWM_Start+0x3e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	bf14      	ite	ne
 8002d46:	2301      	movne	r3, #1
 8002d48:	2300      	moveq	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	e02f      	b.n	8002dae <HAL_TIM_PWM_Start+0x9e>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d109      	bne.n	8002d68 <HAL_TIM_PWM_Start+0x58>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	bf14      	ite	ne
 8002d60:	2301      	movne	r3, #1
 8002d62:	2300      	moveq	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	e022      	b.n	8002dae <HAL_TIM_PWM_Start+0x9e>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b0c      	cmp	r3, #12
 8002d6c:	d109      	bne.n	8002d82 <HAL_TIM_PWM_Start+0x72>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	bf14      	ite	ne
 8002d7a:	2301      	movne	r3, #1
 8002d7c:	2300      	moveq	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	e015      	b.n	8002dae <HAL_TIM_PWM_Start+0x9e>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	d109      	bne.n	8002d9c <HAL_TIM_PWM_Start+0x8c>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	bf14      	ite	ne
 8002d94:	2301      	movne	r3, #1
 8002d96:	2300      	moveq	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	e008      	b.n	8002dae <HAL_TIM_PWM_Start+0x9e>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	bf14      	ite	ne
 8002da8:	2301      	movne	r3, #1
 8002daa:	2300      	moveq	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e09c      	b.n	8002ef0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d104      	bne.n	8002dc6 <HAL_TIM_PWM_Start+0xb6>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dc4:	e023      	b.n	8002e0e <HAL_TIM_PWM_Start+0xfe>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d104      	bne.n	8002dd6 <HAL_TIM_PWM_Start+0xc6>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dd4:	e01b      	b.n	8002e0e <HAL_TIM_PWM_Start+0xfe>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d104      	bne.n	8002de6 <HAL_TIM_PWM_Start+0xd6>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002de4:	e013      	b.n	8002e0e <HAL_TIM_PWM_Start+0xfe>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b0c      	cmp	r3, #12
 8002dea:	d104      	bne.n	8002df6 <HAL_TIM_PWM_Start+0xe6>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002df4:	e00b      	b.n	8002e0e <HAL_TIM_PWM_Start+0xfe>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b10      	cmp	r3, #16
 8002dfa:	d104      	bne.n	8002e06 <HAL_TIM_PWM_Start+0xf6>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e04:	e003      	b.n	8002e0e <HAL_TIM_PWM_Start+0xfe>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2201      	movs	r2, #1
 8002e14:	6839      	ldr	r1, [r7, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fda6 	bl	8003968 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a35      	ldr	r2, [pc, #212]	@ (8002ef8 <HAL_TIM_PWM_Start+0x1e8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d013      	beq.n	8002e4e <HAL_TIM_PWM_Start+0x13e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a34      	ldr	r2, [pc, #208]	@ (8002efc <HAL_TIM_PWM_Start+0x1ec>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00e      	beq.n	8002e4e <HAL_TIM_PWM_Start+0x13e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a32      	ldr	r2, [pc, #200]	@ (8002f00 <HAL_TIM_PWM_Start+0x1f0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d009      	beq.n	8002e4e <HAL_TIM_PWM_Start+0x13e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a31      	ldr	r2, [pc, #196]	@ (8002f04 <HAL_TIM_PWM_Start+0x1f4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d004      	beq.n	8002e4e <HAL_TIM_PWM_Start+0x13e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a2f      	ldr	r2, [pc, #188]	@ (8002f08 <HAL_TIM_PWM_Start+0x1f8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_PWM_Start+0x142>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <HAL_TIM_PWM_Start+0x144>
 8002e52:	2300      	movs	r3, #0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d007      	beq.n	8002e68 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e66:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a22      	ldr	r2, [pc, #136]	@ (8002ef8 <HAL_TIM_PWM_Start+0x1e8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01d      	beq.n	8002eae <HAL_TIM_PWM_Start+0x19e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e7a:	d018      	beq.n	8002eae <HAL_TIM_PWM_Start+0x19e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a22      	ldr	r2, [pc, #136]	@ (8002f0c <HAL_TIM_PWM_Start+0x1fc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_TIM_PWM_Start+0x19e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a21      	ldr	r2, [pc, #132]	@ (8002f10 <HAL_TIM_PWM_Start+0x200>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00e      	beq.n	8002eae <HAL_TIM_PWM_Start+0x19e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1f      	ldr	r2, [pc, #124]	@ (8002f14 <HAL_TIM_PWM_Start+0x204>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d009      	beq.n	8002eae <HAL_TIM_PWM_Start+0x19e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a17      	ldr	r2, [pc, #92]	@ (8002efc <HAL_TIM_PWM_Start+0x1ec>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_TIM_PWM_Start+0x19e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a15      	ldr	r2, [pc, #84]	@ (8002f00 <HAL_TIM_PWM_Start+0x1f0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d115      	bne.n	8002eda <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	4b18      	ldr	r3, [pc, #96]	@ (8002f18 <HAL_TIM_PWM_Start+0x208>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b06      	cmp	r3, #6
 8002ebe:	d015      	beq.n	8002eec <HAL_TIM_PWM_Start+0x1dc>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ec6:	d011      	beq.n	8002eec <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed8:	e008      	b.n	8002eec <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0201 	orr.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e000      	b.n	8002eee <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40012c00 	.word	0x40012c00
 8002efc:	40013400 	.word	0x40013400
 8002f00:	40014000 	.word	0x40014000
 8002f04:	40014400 	.word	0x40014400
 8002f08:	40014800 	.word	0x40014800
 8002f0c:	40000400 	.word	0x40000400
 8002f10:	40000800 	.word	0x40000800
 8002f14:	40000c00 	.word	0x40000c00
 8002f18:	00010007 	.word	0x00010007

08002f1c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	6839      	ldr	r1, [r7, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fd1a 	bl	8003968 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a3e      	ldr	r2, [pc, #248]	@ (8003034 <HAL_TIM_PWM_Stop+0x118>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d013      	beq.n	8002f66 <HAL_TIM_PWM_Stop+0x4a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a3d      	ldr	r2, [pc, #244]	@ (8003038 <HAL_TIM_PWM_Stop+0x11c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00e      	beq.n	8002f66 <HAL_TIM_PWM_Stop+0x4a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a3b      	ldr	r2, [pc, #236]	@ (800303c <HAL_TIM_PWM_Stop+0x120>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d009      	beq.n	8002f66 <HAL_TIM_PWM_Stop+0x4a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a3a      	ldr	r2, [pc, #232]	@ (8003040 <HAL_TIM_PWM_Stop+0x124>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d004      	beq.n	8002f66 <HAL_TIM_PWM_Stop+0x4a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a38      	ldr	r2, [pc, #224]	@ (8003044 <HAL_TIM_PWM_Stop+0x128>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d101      	bne.n	8002f6a <HAL_TIM_PWM_Stop+0x4e>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_TIM_PWM_Stop+0x50>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d017      	beq.n	8002fa0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6a1a      	ldr	r2, [r3, #32]
 8002f76:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10f      	bne.n	8002fa0 <HAL_TIM_PWM_Stop+0x84>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6a1a      	ldr	r2, [r3, #32]
 8002f86:	f240 4344 	movw	r3, #1092	@ 0x444
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d107      	bne.n	8002fa0 <HAL_TIM_PWM_Stop+0x84>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f9e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6a1a      	ldr	r2, [r3, #32]
 8002fa6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10f      	bne.n	8002fd0 <HAL_TIM_PWM_Stop+0xb4>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6a1a      	ldr	r2, [r3, #32]
 8002fb6:	f240 4344 	movw	r3, #1092	@ 0x444
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d107      	bne.n	8002fd0 <HAL_TIM_PWM_Stop+0xb4>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d104      	bne.n	8002fe0 <HAL_TIM_PWM_Stop+0xc4>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fde:	e023      	b.n	8003028 <HAL_TIM_PWM_Stop+0x10c>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d104      	bne.n	8002ff0 <HAL_TIM_PWM_Stop+0xd4>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fee:	e01b      	b.n	8003028 <HAL_TIM_PWM_Stop+0x10c>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d104      	bne.n	8003000 <HAL_TIM_PWM_Stop+0xe4>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ffe:	e013      	b.n	8003028 <HAL_TIM_PWM_Stop+0x10c>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b0c      	cmp	r3, #12
 8003004:	d104      	bne.n	8003010 <HAL_TIM_PWM_Stop+0xf4>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800300e:	e00b      	b.n	8003028 <HAL_TIM_PWM_Stop+0x10c>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b10      	cmp	r3, #16
 8003014:	d104      	bne.n	8003020 <HAL_TIM_PWM_Stop+0x104>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800301e:	e003      	b.n	8003028 <HAL_TIM_PWM_Stop+0x10c>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40013400 	.word	0x40013400
 800303c:	40014000 	.word	0x40014000
 8003040:	40014400 	.word	0x40014400
 8003044:	40014800 	.word	0x40014800

08003048 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003062:	2302      	movs	r3, #2
 8003064:	e0ff      	b.n	8003266 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b14      	cmp	r3, #20
 8003072:	f200 80f0 	bhi.w	8003256 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003076:	a201      	add	r2, pc, #4	@ (adr r2, 800307c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307c:	080030d1 	.word	0x080030d1
 8003080:	08003257 	.word	0x08003257
 8003084:	08003257 	.word	0x08003257
 8003088:	08003257 	.word	0x08003257
 800308c:	08003111 	.word	0x08003111
 8003090:	08003257 	.word	0x08003257
 8003094:	08003257 	.word	0x08003257
 8003098:	08003257 	.word	0x08003257
 800309c:	08003153 	.word	0x08003153
 80030a0:	08003257 	.word	0x08003257
 80030a4:	08003257 	.word	0x08003257
 80030a8:	08003257 	.word	0x08003257
 80030ac:	08003193 	.word	0x08003193
 80030b0:	08003257 	.word	0x08003257
 80030b4:	08003257 	.word	0x08003257
 80030b8:	08003257 	.word	0x08003257
 80030bc:	080031d5 	.word	0x080031d5
 80030c0:	08003257 	.word	0x08003257
 80030c4:	08003257 	.word	0x08003257
 80030c8:	08003257 	.word	0x08003257
 80030cc:	08003215 	.word	0x08003215
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f970 	bl	80033bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0208 	orr.w	r2, r2, #8
 80030ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699a      	ldr	r2, [r3, #24]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0204 	bic.w	r2, r2, #4
 80030fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6999      	ldr	r1, [r3, #24]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	619a      	str	r2, [r3, #24]
      break;
 800310e:	e0a5      	b.n	800325c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f9e0 	bl	80034dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800312a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800313a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6999      	ldr	r1, [r3, #24]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	021a      	lsls	r2, r3, #8
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	619a      	str	r2, [r3, #24]
      break;
 8003150:	e084      	b.n	800325c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fa49 	bl	80035f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69da      	ldr	r2, [r3, #28]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0208 	orr.w	r2, r2, #8
 800316c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69da      	ldr	r2, [r3, #28]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0204 	bic.w	r2, r2, #4
 800317c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69d9      	ldr	r1, [r3, #28]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	61da      	str	r2, [r3, #28]
      break;
 8003190:	e064      	b.n	800325c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fab1 	bl	8003700 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69da      	ldr	r2, [r3, #28]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69d9      	ldr	r1, [r3, #28]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	021a      	lsls	r2, r3, #8
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	61da      	str	r2, [r3, #28]
      break;
 80031d2:	e043      	b.n	800325c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fafa 	bl	80037d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0208 	orr.w	r2, r2, #8
 80031ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0204 	bic.w	r2, r2, #4
 80031fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003212:	e023      	b.n	800325c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fb3e 	bl	800389c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800322e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800323e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	021a      	lsls	r2, r3, #8
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003254:	e002      	b.n	800325c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	75fb      	strb	r3, [r7, #23]
      break;
 800325a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003264:	7dfb      	ldrb	r3, [r7, #23]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop

08003270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a46      	ldr	r2, [pc, #280]	@ (800339c <TIM_Base_SetConfig+0x12c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d013      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800328e:	d00f      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a43      	ldr	r2, [pc, #268]	@ (80033a0 <TIM_Base_SetConfig+0x130>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00b      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a42      	ldr	r2, [pc, #264]	@ (80033a4 <TIM_Base_SetConfig+0x134>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d007      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a41      	ldr	r2, [pc, #260]	@ (80033a8 <TIM_Base_SetConfig+0x138>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d003      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a40      	ldr	r2, [pc, #256]	@ (80033ac <TIM_Base_SetConfig+0x13c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d108      	bne.n	80032c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a35      	ldr	r2, [pc, #212]	@ (800339c <TIM_Base_SetConfig+0x12c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d01f      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d0:	d01b      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a32      	ldr	r2, [pc, #200]	@ (80033a0 <TIM_Base_SetConfig+0x130>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d017      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a31      	ldr	r2, [pc, #196]	@ (80033a4 <TIM_Base_SetConfig+0x134>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a30      	ldr	r2, [pc, #192]	@ (80033a8 <TIM_Base_SetConfig+0x138>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00f      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a2f      	ldr	r2, [pc, #188]	@ (80033ac <TIM_Base_SetConfig+0x13c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00b      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a2e      	ldr	r2, [pc, #184]	@ (80033b0 <TIM_Base_SetConfig+0x140>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2d      	ldr	r2, [pc, #180]	@ (80033b4 <TIM_Base_SetConfig+0x144>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d003      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a2c      	ldr	r2, [pc, #176]	@ (80033b8 <TIM_Base_SetConfig+0x148>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d108      	bne.n	800331c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a16      	ldr	r2, [pc, #88]	@ (800339c <TIM_Base_SetConfig+0x12c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00f      	beq.n	8003368 <TIM_Base_SetConfig+0xf8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a18      	ldr	r2, [pc, #96]	@ (80033ac <TIM_Base_SetConfig+0x13c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00b      	beq.n	8003368 <TIM_Base_SetConfig+0xf8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a17      	ldr	r2, [pc, #92]	@ (80033b0 <TIM_Base_SetConfig+0x140>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d007      	beq.n	8003368 <TIM_Base_SetConfig+0xf8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a16      	ldr	r2, [pc, #88]	@ (80033b4 <TIM_Base_SetConfig+0x144>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d003      	beq.n	8003368 <TIM_Base_SetConfig+0xf8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a15      	ldr	r2, [pc, #84]	@ (80033b8 <TIM_Base_SetConfig+0x148>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d103      	bne.n	8003370 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b01      	cmp	r3, #1
 8003380:	d105      	bne.n	800338e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f023 0201 	bic.w	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	611a      	str	r2, [r3, #16]
  }
}
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40000800 	.word	0x40000800
 80033a8:	40000c00 	.word	0x40000c00
 80033ac:	40013400 	.word	0x40013400
 80033b0:	40014000 	.word	0x40014000
 80033b4:	40014400 	.word	0x40014400
 80033b8:	40014800 	.word	0x40014800

080033bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f023 0201 	bic.w	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0303 	bic.w	r3, r3, #3
 80033f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f023 0302 	bic.w	r3, r3, #2
 8003408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a2c      	ldr	r2, [pc, #176]	@ (80034c8 <TIM_OC1_SetConfig+0x10c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00f      	beq.n	800343c <TIM_OC1_SetConfig+0x80>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a2b      	ldr	r2, [pc, #172]	@ (80034cc <TIM_OC1_SetConfig+0x110>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00b      	beq.n	800343c <TIM_OC1_SetConfig+0x80>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a2a      	ldr	r2, [pc, #168]	@ (80034d0 <TIM_OC1_SetConfig+0x114>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d007      	beq.n	800343c <TIM_OC1_SetConfig+0x80>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a29      	ldr	r2, [pc, #164]	@ (80034d4 <TIM_OC1_SetConfig+0x118>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d003      	beq.n	800343c <TIM_OC1_SetConfig+0x80>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a28      	ldr	r2, [pc, #160]	@ (80034d8 <TIM_OC1_SetConfig+0x11c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d10c      	bne.n	8003456 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f023 0308 	bic.w	r3, r3, #8
 8003442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f023 0304 	bic.w	r3, r3, #4
 8003454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a1b      	ldr	r2, [pc, #108]	@ (80034c8 <TIM_OC1_SetConfig+0x10c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00f      	beq.n	800347e <TIM_OC1_SetConfig+0xc2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a1a      	ldr	r2, [pc, #104]	@ (80034cc <TIM_OC1_SetConfig+0x110>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00b      	beq.n	800347e <TIM_OC1_SetConfig+0xc2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a19      	ldr	r2, [pc, #100]	@ (80034d0 <TIM_OC1_SetConfig+0x114>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d007      	beq.n	800347e <TIM_OC1_SetConfig+0xc2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a18      	ldr	r2, [pc, #96]	@ (80034d4 <TIM_OC1_SetConfig+0x118>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d003      	beq.n	800347e <TIM_OC1_SetConfig+0xc2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a17      	ldr	r2, [pc, #92]	@ (80034d8 <TIM_OC1_SetConfig+0x11c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d111      	bne.n	80034a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800348c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	621a      	str	r2, [r3, #32]
}
 80034bc:	bf00      	nop
 80034be:	371c      	adds	r7, #28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	40012c00 	.word	0x40012c00
 80034cc:	40013400 	.word	0x40013400
 80034d0:	40014000 	.word	0x40014000
 80034d4:	40014400 	.word	0x40014400
 80034d8:	40014800 	.word	0x40014800

080034dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	f023 0210 	bic.w	r2, r3, #16
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800350a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800350e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f023 0320 	bic.w	r3, r3, #32
 800352a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a28      	ldr	r2, [pc, #160]	@ (80035dc <TIM_OC2_SetConfig+0x100>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d003      	beq.n	8003548 <TIM_OC2_SetConfig+0x6c>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a27      	ldr	r2, [pc, #156]	@ (80035e0 <TIM_OC2_SetConfig+0x104>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d10d      	bne.n	8003564 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800354e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003562:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a1d      	ldr	r2, [pc, #116]	@ (80035dc <TIM_OC2_SetConfig+0x100>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00f      	beq.n	800358c <TIM_OC2_SetConfig+0xb0>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a1c      	ldr	r2, [pc, #112]	@ (80035e0 <TIM_OC2_SetConfig+0x104>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00b      	beq.n	800358c <TIM_OC2_SetConfig+0xb0>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a1b      	ldr	r2, [pc, #108]	@ (80035e4 <TIM_OC2_SetConfig+0x108>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d007      	beq.n	800358c <TIM_OC2_SetConfig+0xb0>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a1a      	ldr	r2, [pc, #104]	@ (80035e8 <TIM_OC2_SetConfig+0x10c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <TIM_OC2_SetConfig+0xb0>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a19      	ldr	r2, [pc, #100]	@ (80035ec <TIM_OC2_SetConfig+0x110>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d113      	bne.n	80035b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800359a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	621a      	str	r2, [r3, #32]
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40012c00 	.word	0x40012c00
 80035e0:	40013400 	.word	0x40013400
 80035e4:	40014000 	.word	0x40014000
 80035e8:	40014400 	.word	0x40014400
 80035ec:	40014800 	.word	0x40014800

080035f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800361e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0303 	bic.w	r3, r3, #3
 800362a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800363c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	021b      	lsls	r3, r3, #8
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	4313      	orrs	r3, r2
 8003648:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a27      	ldr	r2, [pc, #156]	@ (80036ec <TIM_OC3_SetConfig+0xfc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <TIM_OC3_SetConfig+0x6a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a26      	ldr	r2, [pc, #152]	@ (80036f0 <TIM_OC3_SetConfig+0x100>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d10d      	bne.n	8003676 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003660:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	021b      	lsls	r3, r3, #8
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a1c      	ldr	r2, [pc, #112]	@ (80036ec <TIM_OC3_SetConfig+0xfc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00f      	beq.n	800369e <TIM_OC3_SetConfig+0xae>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a1b      	ldr	r2, [pc, #108]	@ (80036f0 <TIM_OC3_SetConfig+0x100>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00b      	beq.n	800369e <TIM_OC3_SetConfig+0xae>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a1a      	ldr	r2, [pc, #104]	@ (80036f4 <TIM_OC3_SetConfig+0x104>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d007      	beq.n	800369e <TIM_OC3_SetConfig+0xae>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a19      	ldr	r2, [pc, #100]	@ (80036f8 <TIM_OC3_SetConfig+0x108>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d003      	beq.n	800369e <TIM_OC3_SetConfig+0xae>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a18      	ldr	r2, [pc, #96]	@ (80036fc <TIM_OC3_SetConfig+0x10c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d113      	bne.n	80036c6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	621a      	str	r2, [r3, #32]
}
 80036e0:	bf00      	nop
 80036e2:	371c      	adds	r7, #28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	40012c00 	.word	0x40012c00
 80036f0:	40013400 	.word	0x40013400
 80036f4:	40014000 	.word	0x40014000
 80036f8:	40014400 	.word	0x40014400
 80036fc:	40014800 	.word	0x40014800

08003700 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800372e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800373a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	021b      	lsls	r3, r3, #8
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800374e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	031b      	lsls	r3, r3, #12
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a18      	ldr	r2, [pc, #96]	@ (80037c0 <TIM_OC4_SetConfig+0xc0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00f      	beq.n	8003784 <TIM_OC4_SetConfig+0x84>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a17      	ldr	r2, [pc, #92]	@ (80037c4 <TIM_OC4_SetConfig+0xc4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00b      	beq.n	8003784 <TIM_OC4_SetConfig+0x84>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a16      	ldr	r2, [pc, #88]	@ (80037c8 <TIM_OC4_SetConfig+0xc8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d007      	beq.n	8003784 <TIM_OC4_SetConfig+0x84>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a15      	ldr	r2, [pc, #84]	@ (80037cc <TIM_OC4_SetConfig+0xcc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d003      	beq.n	8003784 <TIM_OC4_SetConfig+0x84>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a14      	ldr	r2, [pc, #80]	@ (80037d0 <TIM_OC4_SetConfig+0xd0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d109      	bne.n	8003798 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800378a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	019b      	lsls	r3, r3, #6
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	4313      	orrs	r3, r2
 8003796:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	621a      	str	r2, [r3, #32]
}
 80037b2:	bf00      	nop
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40012c00 	.word	0x40012c00
 80037c4:	40013400 	.word	0x40013400
 80037c8:	40014000 	.word	0x40014000
 80037cc:	40014400 	.word	0x40014400
 80037d0:	40014800 	.word	0x40014800

080037d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003818:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	041b      	lsls	r3, r3, #16
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a17      	ldr	r2, [pc, #92]	@ (8003888 <TIM_OC5_SetConfig+0xb4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00f      	beq.n	800384e <TIM_OC5_SetConfig+0x7a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a16      	ldr	r2, [pc, #88]	@ (800388c <TIM_OC5_SetConfig+0xb8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00b      	beq.n	800384e <TIM_OC5_SetConfig+0x7a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a15      	ldr	r2, [pc, #84]	@ (8003890 <TIM_OC5_SetConfig+0xbc>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d007      	beq.n	800384e <TIM_OC5_SetConfig+0x7a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a14      	ldr	r2, [pc, #80]	@ (8003894 <TIM_OC5_SetConfig+0xc0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d003      	beq.n	800384e <TIM_OC5_SetConfig+0x7a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a13      	ldr	r2, [pc, #76]	@ (8003898 <TIM_OC5_SetConfig+0xc4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d109      	bne.n	8003862 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003854:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	021b      	lsls	r3, r3, #8
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	621a      	str	r2, [r3, #32]
}
 800387c:	bf00      	nop
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	40012c00 	.word	0x40012c00
 800388c:	40013400 	.word	0x40013400
 8003890:	40014000 	.word	0x40014000
 8003894:	40014400 	.word	0x40014400
 8003898:	40014800 	.word	0x40014800

0800389c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80038e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	051b      	lsls	r3, r3, #20
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a18      	ldr	r2, [pc, #96]	@ (8003954 <TIM_OC6_SetConfig+0xb8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00f      	beq.n	8003918 <TIM_OC6_SetConfig+0x7c>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a17      	ldr	r2, [pc, #92]	@ (8003958 <TIM_OC6_SetConfig+0xbc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00b      	beq.n	8003918 <TIM_OC6_SetConfig+0x7c>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a16      	ldr	r2, [pc, #88]	@ (800395c <TIM_OC6_SetConfig+0xc0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d007      	beq.n	8003918 <TIM_OC6_SetConfig+0x7c>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a15      	ldr	r2, [pc, #84]	@ (8003960 <TIM_OC6_SetConfig+0xc4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d003      	beq.n	8003918 <TIM_OC6_SetConfig+0x7c>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a14      	ldr	r2, [pc, #80]	@ (8003964 <TIM_OC6_SetConfig+0xc8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d109      	bne.n	800392c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800391e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	029b      	lsls	r3, r3, #10
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40012c00 	.word	0x40012c00
 8003958:	40013400 	.word	0x40013400
 800395c:	40014000 	.word	0x40014000
 8003960:	40014400 	.word	0x40014400
 8003964:	40014800 	.word	0x40014800

08003968 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	2201      	movs	r2, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a1a      	ldr	r2, [r3, #32]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	43db      	mvns	r3, r3
 800398a:	401a      	ands	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1a      	ldr	r2, [r3, #32]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	fa01 f303 	lsl.w	r3, r1, r3
 80039a0:	431a      	orrs	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	621a      	str	r2, [r3, #32]
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e040      	b.n	8003a46 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d106      	bne.n	80039da <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7fd f953 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2224      	movs	r2, #36	@ 0x24
 80039de:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0201 	bic.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 fc33 	bl	8004264 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f978 	bl	8003cf4 <UART_SetConfig>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e01b      	b.n	8003a46 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a2c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0201 	orr.w	r2, r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fcb2 	bl	80043a8 <UART_CheckIdleState>
 8003a44:	4603      	mov	r3, r0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b08a      	sub	sp, #40	@ 0x28
 8003a52:	af02      	add	r7, sp, #8
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	603b      	str	r3, [r7, #0]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d177      	bne.n	8003b56 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_UART_Transmit+0x24>
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e070      	b.n	8003b58 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2221      	movs	r2, #33	@ 0x21
 8003a82:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a84:	f7fd fb2a 	bl	80010dc <HAL_GetTick>
 8003a88:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	88fa      	ldrh	r2, [r7, #6]
 8003a8e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	88fa      	ldrh	r2, [r7, #6]
 8003a96:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa2:	d108      	bne.n	8003ab6 <HAL_UART_Transmit+0x68>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d104      	bne.n	8003ab6 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	e003      	b.n	8003abe <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003abe:	e02f      	b.n	8003b20 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2180      	movs	r1, #128	@ 0x80
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 fd14 	bl	80044f8 <UART_WaitOnFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d004      	beq.n	8003ae0 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e03b      	b.n	8003b58 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10b      	bne.n	8003afe <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	881a      	ldrh	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003af2:	b292      	uxth	r2, r2
 8003af4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	3302      	adds	r3, #2
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e007      	b.n	8003b0e <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	781a      	ldrb	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1c9      	bne.n	8003ac0 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2200      	movs	r2, #0
 8003b34:	2140      	movs	r1, #64	@ 0x40
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 fcde 	bl	80044f8 <UART_WaitOnFlagUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d004      	beq.n	8003b4c <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2220      	movs	r2, #32
 8003b46:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e005      	b.n	8003b58 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e000      	b.n	8003b58 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003b56:	2302      	movs	r3, #2
  }
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3720      	adds	r7, #32
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08a      	sub	sp, #40	@ 0x28
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	f040 80b6 	bne.w	8003ce8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_UART_Receive+0x28>
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0ae      	b.n	8003cea <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2222      	movs	r2, #34	@ 0x22
 8003b98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ba2:	f7fd fa9b 	bl	80010dc <HAL_GetTick>
 8003ba6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	88fa      	ldrh	r2, [r7, #6]
 8003bac:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	88fa      	ldrh	r2, [r7, #6]
 8003bb4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc0:	d10e      	bne.n	8003be0 <HAL_UART_Receive+0x80>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d105      	bne.n	8003bd6 <HAL_UART_Receive+0x76>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003bd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003bd4:	e02d      	b.n	8003c32 <HAL_UART_Receive+0xd2>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	22ff      	movs	r2, #255	@ 0xff
 8003bda:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003bde:	e028      	b.n	8003c32 <HAL_UART_Receive+0xd2>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10d      	bne.n	8003c04 <HAL_UART_Receive+0xa4>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d104      	bne.n	8003bfa <HAL_UART_Receive+0x9a>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	22ff      	movs	r2, #255	@ 0xff
 8003bf4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003bf8:	e01b      	b.n	8003c32 <HAL_UART_Receive+0xd2>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	227f      	movs	r2, #127	@ 0x7f
 8003bfe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003c02:	e016      	b.n	8003c32 <HAL_UART_Receive+0xd2>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c0c:	d10d      	bne.n	8003c2a <HAL_UART_Receive+0xca>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d104      	bne.n	8003c20 <HAL_UART_Receive+0xc0>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	227f      	movs	r2, #127	@ 0x7f
 8003c1a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003c1e:	e008      	b.n	8003c32 <HAL_UART_Receive+0xd2>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	223f      	movs	r2, #63	@ 0x3f
 8003c24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003c28:	e003      	b.n	8003c32 <HAL_UART_Receive+0xd2>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003c38:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c42:	d108      	bne.n	8003c56 <HAL_UART_Receive+0xf6>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d104      	bne.n	8003c56 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	61bb      	str	r3, [r7, #24]
 8003c54:	e003      	b.n	8003c5e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003c5e:	e037      	b.n	8003cd0 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2200      	movs	r2, #0
 8003c68:	2120      	movs	r1, #32
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fc44 	bl	80044f8 <UART_WaitOnFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e033      	b.n	8003cea <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10c      	bne.n	8003ca2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	8a7b      	ldrh	r3, [r7, #18]
 8003c92:	4013      	ands	r3, r2
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	3302      	adds	r3, #2
 8003c9e:	61bb      	str	r3, [r7, #24]
 8003ca0:	e00d      	b.n	8003cbe <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	8a7b      	ldrh	r3, [r7, #18]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1c1      	bne.n	8003c60 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e000      	b.n	8003cea <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
  }
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf8:	b08a      	sub	sp, #40	@ 0x28
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4ba4      	ldr	r3, [pc, #656]	@ (8003fb4 <UART_SetConfig+0x2c0>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	6812      	ldr	r2, [r2, #0]
 8003d2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a99      	ldr	r2, [pc, #612]	@ (8003fb8 <UART_SetConfig+0x2c4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d004      	beq.n	8003d60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d70:	430a      	orrs	r2, r1
 8003d72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a90      	ldr	r2, [pc, #576]	@ (8003fbc <UART_SetConfig+0x2c8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d126      	bne.n	8003dcc <UART_SetConfig+0xd8>
 8003d7e:	4b90      	ldr	r3, [pc, #576]	@ (8003fc0 <UART_SetConfig+0x2cc>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d81b      	bhi.n	8003dc4 <UART_SetConfig+0xd0>
 8003d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d94 <UART_SetConfig+0xa0>)
 8003d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d92:	bf00      	nop
 8003d94:	08003da5 	.word	0x08003da5
 8003d98:	08003db5 	.word	0x08003db5
 8003d9c:	08003dad 	.word	0x08003dad
 8003da0:	08003dbd 	.word	0x08003dbd
 8003da4:	2301      	movs	r3, #1
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003daa:	e116      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003dac:	2302      	movs	r3, #2
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db2:	e112      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003db4:	2304      	movs	r3, #4
 8003db6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dba:	e10e      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003dbc:	2308      	movs	r3, #8
 8003dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dc2:	e10a      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dca:	e106      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a7c      	ldr	r2, [pc, #496]	@ (8003fc4 <UART_SetConfig+0x2d0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d138      	bne.n	8003e48 <UART_SetConfig+0x154>
 8003dd6:	4b7a      	ldr	r3, [pc, #488]	@ (8003fc0 <UART_SetConfig+0x2cc>)
 8003dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	2b0c      	cmp	r3, #12
 8003de2:	d82d      	bhi.n	8003e40 <UART_SetConfig+0x14c>
 8003de4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dec <UART_SetConfig+0xf8>)
 8003de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dea:	bf00      	nop
 8003dec:	08003e21 	.word	0x08003e21
 8003df0:	08003e41 	.word	0x08003e41
 8003df4:	08003e41 	.word	0x08003e41
 8003df8:	08003e41 	.word	0x08003e41
 8003dfc:	08003e31 	.word	0x08003e31
 8003e00:	08003e41 	.word	0x08003e41
 8003e04:	08003e41 	.word	0x08003e41
 8003e08:	08003e41 	.word	0x08003e41
 8003e0c:	08003e29 	.word	0x08003e29
 8003e10:	08003e41 	.word	0x08003e41
 8003e14:	08003e41 	.word	0x08003e41
 8003e18:	08003e41 	.word	0x08003e41
 8003e1c:	08003e39 	.word	0x08003e39
 8003e20:	2300      	movs	r3, #0
 8003e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e26:	e0d8      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e2e:	e0d4      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003e30:	2304      	movs	r3, #4
 8003e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e36:	e0d0      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003e38:	2308      	movs	r3, #8
 8003e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e3e:	e0cc      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003e40:	2310      	movs	r3, #16
 8003e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e46:	e0c8      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a5e      	ldr	r2, [pc, #376]	@ (8003fc8 <UART_SetConfig+0x2d4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d125      	bne.n	8003e9e <UART_SetConfig+0x1aa>
 8003e52:	4b5b      	ldr	r3, [pc, #364]	@ (8003fc0 <UART_SetConfig+0x2cc>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e5c:	2b30      	cmp	r3, #48	@ 0x30
 8003e5e:	d016      	beq.n	8003e8e <UART_SetConfig+0x19a>
 8003e60:	2b30      	cmp	r3, #48	@ 0x30
 8003e62:	d818      	bhi.n	8003e96 <UART_SetConfig+0x1a2>
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d00a      	beq.n	8003e7e <UART_SetConfig+0x18a>
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d814      	bhi.n	8003e96 <UART_SetConfig+0x1a2>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <UART_SetConfig+0x182>
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d008      	beq.n	8003e86 <UART_SetConfig+0x192>
 8003e74:	e00f      	b.n	8003e96 <UART_SetConfig+0x1a2>
 8003e76:	2300      	movs	r3, #0
 8003e78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7c:	e0ad      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e84:	e0a9      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003e86:	2304      	movs	r3, #4
 8003e88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e8c:	e0a5      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003e8e:	2308      	movs	r3, #8
 8003e90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e94:	e0a1      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003e96:	2310      	movs	r3, #16
 8003e98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e9c:	e09d      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a4a      	ldr	r2, [pc, #296]	@ (8003fcc <UART_SetConfig+0x2d8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d125      	bne.n	8003ef4 <UART_SetConfig+0x200>
 8003ea8:	4b45      	ldr	r3, [pc, #276]	@ (8003fc0 <UART_SetConfig+0x2cc>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003eb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003eb4:	d016      	beq.n	8003ee4 <UART_SetConfig+0x1f0>
 8003eb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003eb8:	d818      	bhi.n	8003eec <UART_SetConfig+0x1f8>
 8003eba:	2b80      	cmp	r3, #128	@ 0x80
 8003ebc:	d00a      	beq.n	8003ed4 <UART_SetConfig+0x1e0>
 8003ebe:	2b80      	cmp	r3, #128	@ 0x80
 8003ec0:	d814      	bhi.n	8003eec <UART_SetConfig+0x1f8>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <UART_SetConfig+0x1d8>
 8003ec6:	2b40      	cmp	r3, #64	@ 0x40
 8003ec8:	d008      	beq.n	8003edc <UART_SetConfig+0x1e8>
 8003eca:	e00f      	b.n	8003eec <UART_SetConfig+0x1f8>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ed2:	e082      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eda:	e07e      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003edc:	2304      	movs	r3, #4
 8003ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee2:	e07a      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003ee4:	2308      	movs	r3, #8
 8003ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eea:	e076      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003eec:	2310      	movs	r3, #16
 8003eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ef2:	e072      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a35      	ldr	r2, [pc, #212]	@ (8003fd0 <UART_SetConfig+0x2dc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d12a      	bne.n	8003f54 <UART_SetConfig+0x260>
 8003efe:	4b30      	ldr	r3, [pc, #192]	@ (8003fc0 <UART_SetConfig+0x2cc>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f0c:	d01a      	beq.n	8003f44 <UART_SetConfig+0x250>
 8003f0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f12:	d81b      	bhi.n	8003f4c <UART_SetConfig+0x258>
 8003f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f18:	d00c      	beq.n	8003f34 <UART_SetConfig+0x240>
 8003f1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f1e:	d815      	bhi.n	8003f4c <UART_SetConfig+0x258>
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <UART_SetConfig+0x238>
 8003f24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f28:	d008      	beq.n	8003f3c <UART_SetConfig+0x248>
 8003f2a:	e00f      	b.n	8003f4c <UART_SetConfig+0x258>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f32:	e052      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003f34:	2302      	movs	r3, #2
 8003f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f3a:	e04e      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003f3c:	2304      	movs	r3, #4
 8003f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f42:	e04a      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003f44:	2308      	movs	r3, #8
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f4a:	e046      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003f4c:	2310      	movs	r3, #16
 8003f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f52:	e042      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a17      	ldr	r2, [pc, #92]	@ (8003fb8 <UART_SetConfig+0x2c4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d13a      	bne.n	8003fd4 <UART_SetConfig+0x2e0>
 8003f5e:	4b18      	ldr	r3, [pc, #96]	@ (8003fc0 <UART_SetConfig+0x2cc>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f6c:	d01a      	beq.n	8003fa4 <UART_SetConfig+0x2b0>
 8003f6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f72:	d81b      	bhi.n	8003fac <UART_SetConfig+0x2b8>
 8003f74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f78:	d00c      	beq.n	8003f94 <UART_SetConfig+0x2a0>
 8003f7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f7e:	d815      	bhi.n	8003fac <UART_SetConfig+0x2b8>
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <UART_SetConfig+0x298>
 8003f84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f88:	d008      	beq.n	8003f9c <UART_SetConfig+0x2a8>
 8003f8a:	e00f      	b.n	8003fac <UART_SetConfig+0x2b8>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f92:	e022      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003f94:	2302      	movs	r3, #2
 8003f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f9a:	e01e      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003f9c:	2304      	movs	r3, #4
 8003f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fa2:	e01a      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003fa4:	2308      	movs	r3, #8
 8003fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003faa:	e016      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003fac:	2310      	movs	r3, #16
 8003fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fb2:	e012      	b.n	8003fda <UART_SetConfig+0x2e6>
 8003fb4:	efff69f3 	.word	0xefff69f3
 8003fb8:	40008000 	.word	0x40008000
 8003fbc:	40013800 	.word	0x40013800
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40004400 	.word	0x40004400
 8003fc8:	40004800 	.word	0x40004800
 8003fcc:	40004c00 	.word	0x40004c00
 8003fd0:	40005000 	.word	0x40005000
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a9f      	ldr	r2, [pc, #636]	@ (800425c <UART_SetConfig+0x568>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d17a      	bne.n	80040da <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fe4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d824      	bhi.n	8004036 <UART_SetConfig+0x342>
 8003fec:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff4 <UART_SetConfig+0x300>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	08004019 	.word	0x08004019
 8003ff8:	08004037 	.word	0x08004037
 8003ffc:	08004021 	.word	0x08004021
 8004000:	08004037 	.word	0x08004037
 8004004:	08004027 	.word	0x08004027
 8004008:	08004037 	.word	0x08004037
 800400c:	08004037 	.word	0x08004037
 8004010:	08004037 	.word	0x08004037
 8004014:	0800402f 	.word	0x0800402f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004018:	f7fe f8cc 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 800401c:	61f8      	str	r0, [r7, #28]
        break;
 800401e:	e010      	b.n	8004042 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004020:	4b8f      	ldr	r3, [pc, #572]	@ (8004260 <UART_SetConfig+0x56c>)
 8004022:	61fb      	str	r3, [r7, #28]
        break;
 8004024:	e00d      	b.n	8004042 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004026:	f7fe f82d 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 800402a:	61f8      	str	r0, [r7, #28]
        break;
 800402c:	e009      	b.n	8004042 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800402e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004032:	61fb      	str	r3, [r7, #28]
        break;
 8004034:	e005      	b.n	8004042 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004040:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 80fb 	beq.w	8004240 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	4413      	add	r3, r2
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	429a      	cmp	r2, r3
 8004058:	d305      	bcc.n	8004066 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	429a      	cmp	r2, r3
 8004064:	d903      	bls.n	800406e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800406c:	e0e8      	b.n	8004240 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	2200      	movs	r2, #0
 8004072:	461c      	mov	r4, r3
 8004074:	4615      	mov	r5, r2
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	022b      	lsls	r3, r5, #8
 8004080:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004084:	0222      	lsls	r2, r4, #8
 8004086:	68f9      	ldr	r1, [r7, #12]
 8004088:	6849      	ldr	r1, [r1, #4]
 800408a:	0849      	lsrs	r1, r1, #1
 800408c:	2000      	movs	r0, #0
 800408e:	4688      	mov	r8, r1
 8004090:	4681      	mov	r9, r0
 8004092:	eb12 0a08 	adds.w	sl, r2, r8
 8004096:	eb43 0b09 	adc.w	fp, r3, r9
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	603b      	str	r3, [r7, #0]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040a8:	4650      	mov	r0, sl
 80040aa:	4659      	mov	r1, fp
 80040ac:	f7fc f908 	bl	80002c0 <__aeabi_uldivmod>
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4613      	mov	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040be:	d308      	bcc.n	80040d2 <UART_SetConfig+0x3de>
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040c6:	d204      	bcs.n	80040d2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	60da      	str	r2, [r3, #12]
 80040d0:	e0b6      	b.n	8004240 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040d8:	e0b2      	b.n	8004240 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040e2:	d15e      	bne.n	80041a2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80040e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d828      	bhi.n	800413e <UART_SetConfig+0x44a>
 80040ec:	a201      	add	r2, pc, #4	@ (adr r2, 80040f4 <UART_SetConfig+0x400>)
 80040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f2:	bf00      	nop
 80040f4:	08004119 	.word	0x08004119
 80040f8:	08004121 	.word	0x08004121
 80040fc:	08004129 	.word	0x08004129
 8004100:	0800413f 	.word	0x0800413f
 8004104:	0800412f 	.word	0x0800412f
 8004108:	0800413f 	.word	0x0800413f
 800410c:	0800413f 	.word	0x0800413f
 8004110:	0800413f 	.word	0x0800413f
 8004114:	08004137 	.word	0x08004137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004118:	f7fe f84c 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 800411c:	61f8      	str	r0, [r7, #28]
        break;
 800411e:	e014      	b.n	800414a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004120:	f7fe f85e 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 8004124:	61f8      	str	r0, [r7, #28]
        break;
 8004126:	e010      	b.n	800414a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004128:	4b4d      	ldr	r3, [pc, #308]	@ (8004260 <UART_SetConfig+0x56c>)
 800412a:	61fb      	str	r3, [r7, #28]
        break;
 800412c:	e00d      	b.n	800414a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800412e:	f7fd ffa9 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8004132:	61f8      	str	r0, [r7, #28]
        break;
 8004134:	e009      	b.n	800414a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800413a:	61fb      	str	r3, [r7, #28]
        break;
 800413c:	e005      	b.n	800414a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004148:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d077      	beq.n	8004240 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	005a      	lsls	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	085b      	lsrs	r3, r3, #1
 800415a:	441a      	add	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	fbb2 f3f3 	udiv	r3, r2, r3
 8004164:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	2b0f      	cmp	r3, #15
 800416a:	d916      	bls.n	800419a <UART_SetConfig+0x4a6>
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004172:	d212      	bcs.n	800419a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	b29b      	uxth	r3, r3
 8004178:	f023 030f 	bic.w	r3, r3, #15
 800417c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	085b      	lsrs	r3, r3, #1
 8004182:	b29b      	uxth	r3, r3
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	b29a      	uxth	r2, r3
 800418a:	8afb      	ldrh	r3, [r7, #22]
 800418c:	4313      	orrs	r3, r2
 800418e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	8afa      	ldrh	r2, [r7, #22]
 8004196:	60da      	str	r2, [r3, #12]
 8004198:	e052      	b.n	8004240 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80041a0:	e04e      	b.n	8004240 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d827      	bhi.n	80041fa <UART_SetConfig+0x506>
 80041aa:	a201      	add	r2, pc, #4	@ (adr r2, 80041b0 <UART_SetConfig+0x4bc>)
 80041ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b0:	080041d5 	.word	0x080041d5
 80041b4:	080041dd 	.word	0x080041dd
 80041b8:	080041e5 	.word	0x080041e5
 80041bc:	080041fb 	.word	0x080041fb
 80041c0:	080041eb 	.word	0x080041eb
 80041c4:	080041fb 	.word	0x080041fb
 80041c8:	080041fb 	.word	0x080041fb
 80041cc:	080041fb 	.word	0x080041fb
 80041d0:	080041f3 	.word	0x080041f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041d4:	f7fd ffee 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 80041d8:	61f8      	str	r0, [r7, #28]
        break;
 80041da:	e014      	b.n	8004206 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041dc:	f7fe f800 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 80041e0:	61f8      	str	r0, [r7, #28]
        break;
 80041e2:	e010      	b.n	8004206 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004260 <UART_SetConfig+0x56c>)
 80041e6:	61fb      	str	r3, [r7, #28]
        break;
 80041e8:	e00d      	b.n	8004206 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ea:	f7fd ff4b 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 80041ee:	61f8      	str	r0, [r7, #28]
        break;
 80041f0:	e009      	b.n	8004206 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041f6:	61fb      	str	r3, [r7, #28]
        break;
 80041f8:	e005      	b.n	8004206 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004204:	bf00      	nop
    }

    if (pclk != 0U)
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d019      	beq.n	8004240 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	085a      	lsrs	r2, r3, #1
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	441a      	add	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	fbb2 f3f3 	udiv	r3, r2, r3
 800421e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	2b0f      	cmp	r3, #15
 8004224:	d909      	bls.n	800423a <UART_SetConfig+0x546>
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800422c:	d205      	bcs.n	800423a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60da      	str	r2, [r3, #12]
 8004238:	e002      	b.n	8004240 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800424c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004250:	4618      	mov	r0, r3
 8004252:	3728      	adds	r7, #40	@ 0x28
 8004254:	46bd      	mov	sp, r7
 8004256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800425a:	bf00      	nop
 800425c:	40008000 	.word	0x40008000
 8004260:	00f42400 	.word	0x00f42400

08004264 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00a      	beq.n	80042d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01a      	beq.n	800437a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004362:	d10a      	bne.n	800437a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	605a      	str	r2, [r3, #4]
  }
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b098      	sub	sp, #96	@ 0x60
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043b8:	f7fc fe90 	bl	80010dc <HAL_GetTick>
 80043bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d12e      	bne.n	800442a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d4:	2200      	movs	r2, #0
 80043d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f88c 	bl	80044f8 <UART_WaitOnFlagUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d021      	beq.n	800442a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ee:	e853 3f00 	ldrex	r3, [r3]
 80043f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004404:	647b      	str	r3, [r7, #68]	@ 0x44
 8004406:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800440a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e6      	bne.n	80043e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e062      	b.n	80044f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b04      	cmp	r3, #4
 8004436:	d149      	bne.n	80044cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004438:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004440:	2200      	movs	r2, #0
 8004442:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f856 	bl	80044f8 <UART_WaitOnFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d03c      	beq.n	80044cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	623b      	str	r3, [r7, #32]
   return(result);
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004466:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004470:	633b      	str	r3, [r7, #48]	@ 0x30
 8004472:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800447e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e6      	bne.n	8004452 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3308      	adds	r3, #8
 800448a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	60fb      	str	r3, [r7, #12]
   return(result);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0301 	bic.w	r3, r3, #1
 800449a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3308      	adds	r3, #8
 80044a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044a4:	61fa      	str	r2, [r7, #28]
 80044a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	69b9      	ldr	r1, [r7, #24]
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	617b      	str	r3, [r7, #20]
   return(result);
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e5      	bne.n	8004484 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e011      	b.n	80044f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2220      	movs	r2, #32
 80044d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3758      	adds	r7, #88	@ 0x58
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	4613      	mov	r3, r2
 8004506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004508:	e04f      	b.n	80045aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004510:	d04b      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004512:	f7fc fde3 	bl	80010dc <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	429a      	cmp	r2, r3
 8004520:	d302      	bcc.n	8004528 <UART_WaitOnFlagUntilTimeout+0x30>
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e04e      	b.n	80045ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b00      	cmp	r3, #0
 8004538:	d037      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b80      	cmp	r3, #128	@ 0x80
 800453e:	d034      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2b40      	cmp	r3, #64	@ 0x40
 8004544:	d031      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b08      	cmp	r3, #8
 8004552:	d110      	bne.n	8004576 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2208      	movs	r2, #8
 800455a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f838 	bl	80045d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2208      	movs	r2, #8
 8004566:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e029      	b.n	80045ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004584:	d111      	bne.n	80045aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800458e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 f81e 	bl	80045d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2220      	movs	r2, #32
 800459a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e00f      	b.n	80045ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4013      	ands	r3, r2
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	bf0c      	ite	eq
 80045ba:	2301      	moveq	r3, #1
 80045bc:	2300      	movne	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d0a0      	beq.n	800450a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b095      	sub	sp, #84	@ 0x54
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e2:	e853 3f00 	ldrex	r3, [r3]
 80045e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80045fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004600:	e841 2300 	strex	r3, r2, [r1]
 8004604:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1e6      	bne.n	80045da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3308      	adds	r3, #8
 8004612:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	61fb      	str	r3, [r7, #28]
   return(result);
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f023 0301 	bic.w	r3, r3, #1
 8004622:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3308      	adds	r3, #8
 800462a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800462c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800462e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004630:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e5      	bne.n	800460c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004644:	2b01      	cmp	r3, #1
 8004646:	d118      	bne.n	800467a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	60bb      	str	r3, [r7, #8]
   return(result);
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f023 0310 	bic.w	r3, r3, #16
 800465c:	647b      	str	r3, [r7, #68]	@ 0x44
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004666:	61bb      	str	r3, [r7, #24]
 8004668:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	6979      	ldr	r1, [r7, #20]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	613b      	str	r3, [r7, #16]
   return(result);
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e6      	bne.n	8004648 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2220      	movs	r2, #32
 800467e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800468e:	bf00      	nop
 8004690:	3754      	adds	r7, #84	@ 0x54
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <std>:
 800469c:	2300      	movs	r3, #0
 800469e:	b510      	push	{r4, lr}
 80046a0:	4604      	mov	r4, r0
 80046a2:	e9c0 3300 	strd	r3, r3, [r0]
 80046a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046aa:	6083      	str	r3, [r0, #8]
 80046ac:	8181      	strh	r1, [r0, #12]
 80046ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80046b0:	81c2      	strh	r2, [r0, #14]
 80046b2:	6183      	str	r3, [r0, #24]
 80046b4:	4619      	mov	r1, r3
 80046b6:	2208      	movs	r2, #8
 80046b8:	305c      	adds	r0, #92	@ 0x5c
 80046ba:	f000 fa45 	bl	8004b48 <memset>
 80046be:	4b0d      	ldr	r3, [pc, #52]	@ (80046f4 <std+0x58>)
 80046c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80046c2:	4b0d      	ldr	r3, [pc, #52]	@ (80046f8 <std+0x5c>)
 80046c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80046c6:	4b0d      	ldr	r3, [pc, #52]	@ (80046fc <std+0x60>)
 80046c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80046ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004700 <std+0x64>)
 80046cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80046ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004704 <std+0x68>)
 80046d0:	6224      	str	r4, [r4, #32]
 80046d2:	429c      	cmp	r4, r3
 80046d4:	d006      	beq.n	80046e4 <std+0x48>
 80046d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80046da:	4294      	cmp	r4, r2
 80046dc:	d002      	beq.n	80046e4 <std+0x48>
 80046de:	33d0      	adds	r3, #208	@ 0xd0
 80046e0:	429c      	cmp	r4, r3
 80046e2:	d105      	bne.n	80046f0 <std+0x54>
 80046e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80046e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046ec:	f000 baa4 	b.w	8004c38 <__retarget_lock_init_recursive>
 80046f0:	bd10      	pop	{r4, pc}
 80046f2:	bf00      	nop
 80046f4:	08004995 	.word	0x08004995
 80046f8:	080049bb 	.word	0x080049bb
 80046fc:	080049f3 	.word	0x080049f3
 8004700:	08004a17 	.word	0x08004a17
 8004704:	2000020c 	.word	0x2000020c

08004708 <stdio_exit_handler>:
 8004708:	4a02      	ldr	r2, [pc, #8]	@ (8004714 <stdio_exit_handler+0xc>)
 800470a:	4903      	ldr	r1, [pc, #12]	@ (8004718 <stdio_exit_handler+0x10>)
 800470c:	4803      	ldr	r0, [pc, #12]	@ (800471c <stdio_exit_handler+0x14>)
 800470e:	f000 b869 	b.w	80047e4 <_fwalk_sglue>
 8004712:	bf00      	nop
 8004714:	20000014 	.word	0x20000014
 8004718:	08005dbd 	.word	0x08005dbd
 800471c:	20000024 	.word	0x20000024

08004720 <cleanup_stdio>:
 8004720:	6841      	ldr	r1, [r0, #4]
 8004722:	4b0c      	ldr	r3, [pc, #48]	@ (8004754 <cleanup_stdio+0x34>)
 8004724:	4299      	cmp	r1, r3
 8004726:	b510      	push	{r4, lr}
 8004728:	4604      	mov	r4, r0
 800472a:	d001      	beq.n	8004730 <cleanup_stdio+0x10>
 800472c:	f001 fb46 	bl	8005dbc <_fflush_r>
 8004730:	68a1      	ldr	r1, [r4, #8]
 8004732:	4b09      	ldr	r3, [pc, #36]	@ (8004758 <cleanup_stdio+0x38>)
 8004734:	4299      	cmp	r1, r3
 8004736:	d002      	beq.n	800473e <cleanup_stdio+0x1e>
 8004738:	4620      	mov	r0, r4
 800473a:	f001 fb3f 	bl	8005dbc <_fflush_r>
 800473e:	68e1      	ldr	r1, [r4, #12]
 8004740:	4b06      	ldr	r3, [pc, #24]	@ (800475c <cleanup_stdio+0x3c>)
 8004742:	4299      	cmp	r1, r3
 8004744:	d004      	beq.n	8004750 <cleanup_stdio+0x30>
 8004746:	4620      	mov	r0, r4
 8004748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800474c:	f001 bb36 	b.w	8005dbc <_fflush_r>
 8004750:	bd10      	pop	{r4, pc}
 8004752:	bf00      	nop
 8004754:	2000020c 	.word	0x2000020c
 8004758:	20000274 	.word	0x20000274
 800475c:	200002dc 	.word	0x200002dc

08004760 <global_stdio_init.part.0>:
 8004760:	b510      	push	{r4, lr}
 8004762:	4b0b      	ldr	r3, [pc, #44]	@ (8004790 <global_stdio_init.part.0+0x30>)
 8004764:	4c0b      	ldr	r4, [pc, #44]	@ (8004794 <global_stdio_init.part.0+0x34>)
 8004766:	4a0c      	ldr	r2, [pc, #48]	@ (8004798 <global_stdio_init.part.0+0x38>)
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	4620      	mov	r0, r4
 800476c:	2200      	movs	r2, #0
 800476e:	2104      	movs	r1, #4
 8004770:	f7ff ff94 	bl	800469c <std>
 8004774:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004778:	2201      	movs	r2, #1
 800477a:	2109      	movs	r1, #9
 800477c:	f7ff ff8e 	bl	800469c <std>
 8004780:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004784:	2202      	movs	r2, #2
 8004786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800478a:	2112      	movs	r1, #18
 800478c:	f7ff bf86 	b.w	800469c <std>
 8004790:	20000344 	.word	0x20000344
 8004794:	2000020c 	.word	0x2000020c
 8004798:	08004709 	.word	0x08004709

0800479c <__sfp_lock_acquire>:
 800479c:	4801      	ldr	r0, [pc, #4]	@ (80047a4 <__sfp_lock_acquire+0x8>)
 800479e:	f000 ba4c 	b.w	8004c3a <__retarget_lock_acquire_recursive>
 80047a2:	bf00      	nop
 80047a4:	2000034d 	.word	0x2000034d

080047a8 <__sfp_lock_release>:
 80047a8:	4801      	ldr	r0, [pc, #4]	@ (80047b0 <__sfp_lock_release+0x8>)
 80047aa:	f000 ba47 	b.w	8004c3c <__retarget_lock_release_recursive>
 80047ae:	bf00      	nop
 80047b0:	2000034d 	.word	0x2000034d

080047b4 <__sinit>:
 80047b4:	b510      	push	{r4, lr}
 80047b6:	4604      	mov	r4, r0
 80047b8:	f7ff fff0 	bl	800479c <__sfp_lock_acquire>
 80047bc:	6a23      	ldr	r3, [r4, #32]
 80047be:	b11b      	cbz	r3, 80047c8 <__sinit+0x14>
 80047c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047c4:	f7ff bff0 	b.w	80047a8 <__sfp_lock_release>
 80047c8:	4b04      	ldr	r3, [pc, #16]	@ (80047dc <__sinit+0x28>)
 80047ca:	6223      	str	r3, [r4, #32]
 80047cc:	4b04      	ldr	r3, [pc, #16]	@ (80047e0 <__sinit+0x2c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f5      	bne.n	80047c0 <__sinit+0xc>
 80047d4:	f7ff ffc4 	bl	8004760 <global_stdio_init.part.0>
 80047d8:	e7f2      	b.n	80047c0 <__sinit+0xc>
 80047da:	bf00      	nop
 80047dc:	08004721 	.word	0x08004721
 80047e0:	20000344 	.word	0x20000344

080047e4 <_fwalk_sglue>:
 80047e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047e8:	4607      	mov	r7, r0
 80047ea:	4688      	mov	r8, r1
 80047ec:	4614      	mov	r4, r2
 80047ee:	2600      	movs	r6, #0
 80047f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047f4:	f1b9 0901 	subs.w	r9, r9, #1
 80047f8:	d505      	bpl.n	8004806 <_fwalk_sglue+0x22>
 80047fa:	6824      	ldr	r4, [r4, #0]
 80047fc:	2c00      	cmp	r4, #0
 80047fe:	d1f7      	bne.n	80047f0 <_fwalk_sglue+0xc>
 8004800:	4630      	mov	r0, r6
 8004802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004806:	89ab      	ldrh	r3, [r5, #12]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d907      	bls.n	800481c <_fwalk_sglue+0x38>
 800480c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004810:	3301      	adds	r3, #1
 8004812:	d003      	beq.n	800481c <_fwalk_sglue+0x38>
 8004814:	4629      	mov	r1, r5
 8004816:	4638      	mov	r0, r7
 8004818:	47c0      	blx	r8
 800481a:	4306      	orrs	r6, r0
 800481c:	3568      	adds	r5, #104	@ 0x68
 800481e:	e7e9      	b.n	80047f4 <_fwalk_sglue+0x10>

08004820 <iprintf>:
 8004820:	b40f      	push	{r0, r1, r2, r3}
 8004822:	b507      	push	{r0, r1, r2, lr}
 8004824:	4906      	ldr	r1, [pc, #24]	@ (8004840 <iprintf+0x20>)
 8004826:	ab04      	add	r3, sp, #16
 8004828:	6808      	ldr	r0, [r1, #0]
 800482a:	f853 2b04 	ldr.w	r2, [r3], #4
 800482e:	6881      	ldr	r1, [r0, #8]
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	f000 fe4b 	bl	80054cc <_vfiprintf_r>
 8004836:	b003      	add	sp, #12
 8004838:	f85d eb04 	ldr.w	lr, [sp], #4
 800483c:	b004      	add	sp, #16
 800483e:	4770      	bx	lr
 8004840:	20000020 	.word	0x20000020

08004844 <_puts_r>:
 8004844:	6a03      	ldr	r3, [r0, #32]
 8004846:	b570      	push	{r4, r5, r6, lr}
 8004848:	6884      	ldr	r4, [r0, #8]
 800484a:	4605      	mov	r5, r0
 800484c:	460e      	mov	r6, r1
 800484e:	b90b      	cbnz	r3, 8004854 <_puts_r+0x10>
 8004850:	f7ff ffb0 	bl	80047b4 <__sinit>
 8004854:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004856:	07db      	lsls	r3, r3, #31
 8004858:	d405      	bmi.n	8004866 <_puts_r+0x22>
 800485a:	89a3      	ldrh	r3, [r4, #12]
 800485c:	0598      	lsls	r0, r3, #22
 800485e:	d402      	bmi.n	8004866 <_puts_r+0x22>
 8004860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004862:	f000 f9ea 	bl	8004c3a <__retarget_lock_acquire_recursive>
 8004866:	89a3      	ldrh	r3, [r4, #12]
 8004868:	0719      	lsls	r1, r3, #28
 800486a:	d502      	bpl.n	8004872 <_puts_r+0x2e>
 800486c:	6923      	ldr	r3, [r4, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d135      	bne.n	80048de <_puts_r+0x9a>
 8004872:	4621      	mov	r1, r4
 8004874:	4628      	mov	r0, r5
 8004876:	f000 f911 	bl	8004a9c <__swsetup_r>
 800487a:	b380      	cbz	r0, 80048de <_puts_r+0x9a>
 800487c:	f04f 35ff 	mov.w	r5, #4294967295
 8004880:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004882:	07da      	lsls	r2, r3, #31
 8004884:	d405      	bmi.n	8004892 <_puts_r+0x4e>
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	059b      	lsls	r3, r3, #22
 800488a:	d402      	bmi.n	8004892 <_puts_r+0x4e>
 800488c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800488e:	f000 f9d5 	bl	8004c3c <__retarget_lock_release_recursive>
 8004892:	4628      	mov	r0, r5
 8004894:	bd70      	pop	{r4, r5, r6, pc}
 8004896:	2b00      	cmp	r3, #0
 8004898:	da04      	bge.n	80048a4 <_puts_r+0x60>
 800489a:	69a2      	ldr	r2, [r4, #24]
 800489c:	429a      	cmp	r2, r3
 800489e:	dc17      	bgt.n	80048d0 <_puts_r+0x8c>
 80048a0:	290a      	cmp	r1, #10
 80048a2:	d015      	beq.n	80048d0 <_puts_r+0x8c>
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	6022      	str	r2, [r4, #0]
 80048aa:	7019      	strb	r1, [r3, #0]
 80048ac:	68a3      	ldr	r3, [r4, #8]
 80048ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048b2:	3b01      	subs	r3, #1
 80048b4:	60a3      	str	r3, [r4, #8]
 80048b6:	2900      	cmp	r1, #0
 80048b8:	d1ed      	bne.n	8004896 <_puts_r+0x52>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	da11      	bge.n	80048e2 <_puts_r+0x9e>
 80048be:	4622      	mov	r2, r4
 80048c0:	210a      	movs	r1, #10
 80048c2:	4628      	mov	r0, r5
 80048c4:	f000 f8ab 	bl	8004a1e <__swbuf_r>
 80048c8:	3001      	adds	r0, #1
 80048ca:	d0d7      	beq.n	800487c <_puts_r+0x38>
 80048cc:	250a      	movs	r5, #10
 80048ce:	e7d7      	b.n	8004880 <_puts_r+0x3c>
 80048d0:	4622      	mov	r2, r4
 80048d2:	4628      	mov	r0, r5
 80048d4:	f000 f8a3 	bl	8004a1e <__swbuf_r>
 80048d8:	3001      	adds	r0, #1
 80048da:	d1e7      	bne.n	80048ac <_puts_r+0x68>
 80048dc:	e7ce      	b.n	800487c <_puts_r+0x38>
 80048de:	3e01      	subs	r6, #1
 80048e0:	e7e4      	b.n	80048ac <_puts_r+0x68>
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	6022      	str	r2, [r4, #0]
 80048e8:	220a      	movs	r2, #10
 80048ea:	701a      	strb	r2, [r3, #0]
 80048ec:	e7ee      	b.n	80048cc <_puts_r+0x88>
	...

080048f0 <puts>:
 80048f0:	4b02      	ldr	r3, [pc, #8]	@ (80048fc <puts+0xc>)
 80048f2:	4601      	mov	r1, r0
 80048f4:	6818      	ldr	r0, [r3, #0]
 80048f6:	f7ff bfa5 	b.w	8004844 <_puts_r>
 80048fa:	bf00      	nop
 80048fc:	20000020 	.word	0x20000020

08004900 <siprintf>:
 8004900:	b40e      	push	{r1, r2, r3}
 8004902:	b500      	push	{lr}
 8004904:	b09c      	sub	sp, #112	@ 0x70
 8004906:	ab1d      	add	r3, sp, #116	@ 0x74
 8004908:	9002      	str	r0, [sp, #8]
 800490a:	9006      	str	r0, [sp, #24]
 800490c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004910:	4809      	ldr	r0, [pc, #36]	@ (8004938 <siprintf+0x38>)
 8004912:	9107      	str	r1, [sp, #28]
 8004914:	9104      	str	r1, [sp, #16]
 8004916:	4909      	ldr	r1, [pc, #36]	@ (800493c <siprintf+0x3c>)
 8004918:	f853 2b04 	ldr.w	r2, [r3], #4
 800491c:	9105      	str	r1, [sp, #20]
 800491e:	6800      	ldr	r0, [r0, #0]
 8004920:	9301      	str	r3, [sp, #4]
 8004922:	a902      	add	r1, sp, #8
 8004924:	f000 fae0 	bl	8004ee8 <_svfiprintf_r>
 8004928:	9b02      	ldr	r3, [sp, #8]
 800492a:	2200      	movs	r2, #0
 800492c:	701a      	strb	r2, [r3, #0]
 800492e:	b01c      	add	sp, #112	@ 0x70
 8004930:	f85d eb04 	ldr.w	lr, [sp], #4
 8004934:	b003      	add	sp, #12
 8004936:	4770      	bx	lr
 8004938:	20000020 	.word	0x20000020
 800493c:	ffff0208 	.word	0xffff0208

08004940 <siscanf>:
 8004940:	b40e      	push	{r1, r2, r3}
 8004942:	b530      	push	{r4, r5, lr}
 8004944:	b09c      	sub	sp, #112	@ 0x70
 8004946:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004948:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800494c:	f854 5b04 	ldr.w	r5, [r4], #4
 8004950:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004954:	9002      	str	r0, [sp, #8]
 8004956:	9006      	str	r0, [sp, #24]
 8004958:	f7fb fc54 	bl	8000204 <strlen>
 800495c:	4b0b      	ldr	r3, [pc, #44]	@ (800498c <siscanf+0x4c>)
 800495e:	9003      	str	r0, [sp, #12]
 8004960:	9007      	str	r0, [sp, #28]
 8004962:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004964:	480a      	ldr	r0, [pc, #40]	@ (8004990 <siscanf+0x50>)
 8004966:	9401      	str	r4, [sp, #4]
 8004968:	2300      	movs	r3, #0
 800496a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800496c:	9314      	str	r3, [sp, #80]	@ 0x50
 800496e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004972:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004976:	462a      	mov	r2, r5
 8004978:	4623      	mov	r3, r4
 800497a:	a902      	add	r1, sp, #8
 800497c:	6800      	ldr	r0, [r0, #0]
 800497e:	f000 fc07 	bl	8005190 <__ssvfiscanf_r>
 8004982:	b01c      	add	sp, #112	@ 0x70
 8004984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004988:	b003      	add	sp, #12
 800498a:	4770      	bx	lr
 800498c:	080049b7 	.word	0x080049b7
 8004990:	20000020 	.word	0x20000020

08004994 <__sread>:
 8004994:	b510      	push	{r4, lr}
 8004996:	460c      	mov	r4, r1
 8004998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800499c:	f000 f8fe 	bl	8004b9c <_read_r>
 80049a0:	2800      	cmp	r0, #0
 80049a2:	bfab      	itete	ge
 80049a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80049a6:	89a3      	ldrhlt	r3, [r4, #12]
 80049a8:	181b      	addge	r3, r3, r0
 80049aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80049ae:	bfac      	ite	ge
 80049b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80049b2:	81a3      	strhlt	r3, [r4, #12]
 80049b4:	bd10      	pop	{r4, pc}

080049b6 <__seofread>:
 80049b6:	2000      	movs	r0, #0
 80049b8:	4770      	bx	lr

080049ba <__swrite>:
 80049ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049be:	461f      	mov	r7, r3
 80049c0:	898b      	ldrh	r3, [r1, #12]
 80049c2:	05db      	lsls	r3, r3, #23
 80049c4:	4605      	mov	r5, r0
 80049c6:	460c      	mov	r4, r1
 80049c8:	4616      	mov	r6, r2
 80049ca:	d505      	bpl.n	80049d8 <__swrite+0x1e>
 80049cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d0:	2302      	movs	r3, #2
 80049d2:	2200      	movs	r2, #0
 80049d4:	f000 f8d0 	bl	8004b78 <_lseek_r>
 80049d8:	89a3      	ldrh	r3, [r4, #12]
 80049da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049e2:	81a3      	strh	r3, [r4, #12]
 80049e4:	4632      	mov	r2, r6
 80049e6:	463b      	mov	r3, r7
 80049e8:	4628      	mov	r0, r5
 80049ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049ee:	f000 b8e7 	b.w	8004bc0 <_write_r>

080049f2 <__sseek>:
 80049f2:	b510      	push	{r4, lr}
 80049f4:	460c      	mov	r4, r1
 80049f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049fa:	f000 f8bd 	bl	8004b78 <_lseek_r>
 80049fe:	1c43      	adds	r3, r0, #1
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	bf15      	itete	ne
 8004a04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a0e:	81a3      	strheq	r3, [r4, #12]
 8004a10:	bf18      	it	ne
 8004a12:	81a3      	strhne	r3, [r4, #12]
 8004a14:	bd10      	pop	{r4, pc}

08004a16 <__sclose>:
 8004a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a1a:	f000 b89d 	b.w	8004b58 <_close_r>

08004a1e <__swbuf_r>:
 8004a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a20:	460e      	mov	r6, r1
 8004a22:	4614      	mov	r4, r2
 8004a24:	4605      	mov	r5, r0
 8004a26:	b118      	cbz	r0, 8004a30 <__swbuf_r+0x12>
 8004a28:	6a03      	ldr	r3, [r0, #32]
 8004a2a:	b90b      	cbnz	r3, 8004a30 <__swbuf_r+0x12>
 8004a2c:	f7ff fec2 	bl	80047b4 <__sinit>
 8004a30:	69a3      	ldr	r3, [r4, #24]
 8004a32:	60a3      	str	r3, [r4, #8]
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	071a      	lsls	r2, r3, #28
 8004a38:	d501      	bpl.n	8004a3e <__swbuf_r+0x20>
 8004a3a:	6923      	ldr	r3, [r4, #16]
 8004a3c:	b943      	cbnz	r3, 8004a50 <__swbuf_r+0x32>
 8004a3e:	4621      	mov	r1, r4
 8004a40:	4628      	mov	r0, r5
 8004a42:	f000 f82b 	bl	8004a9c <__swsetup_r>
 8004a46:	b118      	cbz	r0, 8004a50 <__swbuf_r+0x32>
 8004a48:	f04f 37ff 	mov.w	r7, #4294967295
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	6922      	ldr	r2, [r4, #16]
 8004a54:	1a98      	subs	r0, r3, r2
 8004a56:	6963      	ldr	r3, [r4, #20]
 8004a58:	b2f6      	uxtb	r6, r6
 8004a5a:	4283      	cmp	r3, r0
 8004a5c:	4637      	mov	r7, r6
 8004a5e:	dc05      	bgt.n	8004a6c <__swbuf_r+0x4e>
 8004a60:	4621      	mov	r1, r4
 8004a62:	4628      	mov	r0, r5
 8004a64:	f001 f9aa 	bl	8005dbc <_fflush_r>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d1ed      	bne.n	8004a48 <__swbuf_r+0x2a>
 8004a6c:	68a3      	ldr	r3, [r4, #8]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	60a3      	str	r3, [r4, #8]
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	6022      	str	r2, [r4, #0]
 8004a78:	701e      	strb	r6, [r3, #0]
 8004a7a:	6962      	ldr	r2, [r4, #20]
 8004a7c:	1c43      	adds	r3, r0, #1
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d004      	beq.n	8004a8c <__swbuf_r+0x6e>
 8004a82:	89a3      	ldrh	r3, [r4, #12]
 8004a84:	07db      	lsls	r3, r3, #31
 8004a86:	d5e1      	bpl.n	8004a4c <__swbuf_r+0x2e>
 8004a88:	2e0a      	cmp	r6, #10
 8004a8a:	d1df      	bne.n	8004a4c <__swbuf_r+0x2e>
 8004a8c:	4621      	mov	r1, r4
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f001 f994 	bl	8005dbc <_fflush_r>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	d0d9      	beq.n	8004a4c <__swbuf_r+0x2e>
 8004a98:	e7d6      	b.n	8004a48 <__swbuf_r+0x2a>
	...

08004a9c <__swsetup_r>:
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	4b29      	ldr	r3, [pc, #164]	@ (8004b44 <__swsetup_r+0xa8>)
 8004aa0:	4605      	mov	r5, r0
 8004aa2:	6818      	ldr	r0, [r3, #0]
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	b118      	cbz	r0, 8004ab0 <__swsetup_r+0x14>
 8004aa8:	6a03      	ldr	r3, [r0, #32]
 8004aaa:	b90b      	cbnz	r3, 8004ab0 <__swsetup_r+0x14>
 8004aac:	f7ff fe82 	bl	80047b4 <__sinit>
 8004ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ab4:	0719      	lsls	r1, r3, #28
 8004ab6:	d422      	bmi.n	8004afe <__swsetup_r+0x62>
 8004ab8:	06da      	lsls	r2, r3, #27
 8004aba:	d407      	bmi.n	8004acc <__swsetup_r+0x30>
 8004abc:	2209      	movs	r2, #9
 8004abe:	602a      	str	r2, [r5, #0]
 8004ac0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ac4:	81a3      	strh	r3, [r4, #12]
 8004ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aca:	e033      	b.n	8004b34 <__swsetup_r+0x98>
 8004acc:	0758      	lsls	r0, r3, #29
 8004ace:	d512      	bpl.n	8004af6 <__swsetup_r+0x5a>
 8004ad0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ad2:	b141      	cbz	r1, 8004ae6 <__swsetup_r+0x4a>
 8004ad4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ad8:	4299      	cmp	r1, r3
 8004ada:	d002      	beq.n	8004ae2 <__swsetup_r+0x46>
 8004adc:	4628      	mov	r0, r5
 8004ade:	f000 f8af 	bl	8004c40 <_free_r>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004aec:	81a3      	strh	r3, [r4, #12]
 8004aee:	2300      	movs	r3, #0
 8004af0:	6063      	str	r3, [r4, #4]
 8004af2:	6923      	ldr	r3, [r4, #16]
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	89a3      	ldrh	r3, [r4, #12]
 8004af8:	f043 0308 	orr.w	r3, r3, #8
 8004afc:	81a3      	strh	r3, [r4, #12]
 8004afe:	6923      	ldr	r3, [r4, #16]
 8004b00:	b94b      	cbnz	r3, 8004b16 <__swsetup_r+0x7a>
 8004b02:	89a3      	ldrh	r3, [r4, #12]
 8004b04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b0c:	d003      	beq.n	8004b16 <__swsetup_r+0x7a>
 8004b0e:	4621      	mov	r1, r4
 8004b10:	4628      	mov	r0, r5
 8004b12:	f001 f9a1 	bl	8005e58 <__smakebuf_r>
 8004b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b1a:	f013 0201 	ands.w	r2, r3, #1
 8004b1e:	d00a      	beq.n	8004b36 <__swsetup_r+0x9a>
 8004b20:	2200      	movs	r2, #0
 8004b22:	60a2      	str	r2, [r4, #8]
 8004b24:	6962      	ldr	r2, [r4, #20]
 8004b26:	4252      	negs	r2, r2
 8004b28:	61a2      	str	r2, [r4, #24]
 8004b2a:	6922      	ldr	r2, [r4, #16]
 8004b2c:	b942      	cbnz	r2, 8004b40 <__swsetup_r+0xa4>
 8004b2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b32:	d1c5      	bne.n	8004ac0 <__swsetup_r+0x24>
 8004b34:	bd38      	pop	{r3, r4, r5, pc}
 8004b36:	0799      	lsls	r1, r3, #30
 8004b38:	bf58      	it	pl
 8004b3a:	6962      	ldrpl	r2, [r4, #20]
 8004b3c:	60a2      	str	r2, [r4, #8]
 8004b3e:	e7f4      	b.n	8004b2a <__swsetup_r+0x8e>
 8004b40:	2000      	movs	r0, #0
 8004b42:	e7f7      	b.n	8004b34 <__swsetup_r+0x98>
 8004b44:	20000020 	.word	0x20000020

08004b48 <memset>:
 8004b48:	4402      	add	r2, r0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d100      	bne.n	8004b52 <memset+0xa>
 8004b50:	4770      	bx	lr
 8004b52:	f803 1b01 	strb.w	r1, [r3], #1
 8004b56:	e7f9      	b.n	8004b4c <memset+0x4>

08004b58 <_close_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4d06      	ldr	r5, [pc, #24]	@ (8004b74 <_close_r+0x1c>)
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	4604      	mov	r4, r0
 8004b60:	4608      	mov	r0, r1
 8004b62:	602b      	str	r3, [r5, #0]
 8004b64:	f7fc f9ac 	bl	8000ec0 <_close>
 8004b68:	1c43      	adds	r3, r0, #1
 8004b6a:	d102      	bne.n	8004b72 <_close_r+0x1a>
 8004b6c:	682b      	ldr	r3, [r5, #0]
 8004b6e:	b103      	cbz	r3, 8004b72 <_close_r+0x1a>
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	bd38      	pop	{r3, r4, r5, pc}
 8004b74:	20000348 	.word	0x20000348

08004b78 <_lseek_r>:
 8004b78:	b538      	push	{r3, r4, r5, lr}
 8004b7a:	4d07      	ldr	r5, [pc, #28]	@ (8004b98 <_lseek_r+0x20>)
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	4608      	mov	r0, r1
 8004b80:	4611      	mov	r1, r2
 8004b82:	2200      	movs	r2, #0
 8004b84:	602a      	str	r2, [r5, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	f7fc f9c1 	bl	8000f0e <_lseek>
 8004b8c:	1c43      	adds	r3, r0, #1
 8004b8e:	d102      	bne.n	8004b96 <_lseek_r+0x1e>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	b103      	cbz	r3, 8004b96 <_lseek_r+0x1e>
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	bd38      	pop	{r3, r4, r5, pc}
 8004b98:	20000348 	.word	0x20000348

08004b9c <_read_r>:
 8004b9c:	b538      	push	{r3, r4, r5, lr}
 8004b9e:	4d07      	ldr	r5, [pc, #28]	@ (8004bbc <_read_r+0x20>)
 8004ba0:	4604      	mov	r4, r0
 8004ba2:	4608      	mov	r0, r1
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	602a      	str	r2, [r5, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	f7fc f94f 	bl	8000e4e <_read>
 8004bb0:	1c43      	adds	r3, r0, #1
 8004bb2:	d102      	bne.n	8004bba <_read_r+0x1e>
 8004bb4:	682b      	ldr	r3, [r5, #0]
 8004bb6:	b103      	cbz	r3, 8004bba <_read_r+0x1e>
 8004bb8:	6023      	str	r3, [r4, #0]
 8004bba:	bd38      	pop	{r3, r4, r5, pc}
 8004bbc:	20000348 	.word	0x20000348

08004bc0 <_write_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	4d07      	ldr	r5, [pc, #28]	@ (8004be0 <_write_r+0x20>)
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	4608      	mov	r0, r1
 8004bc8:	4611      	mov	r1, r2
 8004bca:	2200      	movs	r2, #0
 8004bcc:	602a      	str	r2, [r5, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f7fc f95a 	bl	8000e88 <_write>
 8004bd4:	1c43      	adds	r3, r0, #1
 8004bd6:	d102      	bne.n	8004bde <_write_r+0x1e>
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	b103      	cbz	r3, 8004bde <_write_r+0x1e>
 8004bdc:	6023      	str	r3, [r4, #0]
 8004bde:	bd38      	pop	{r3, r4, r5, pc}
 8004be0:	20000348 	.word	0x20000348

08004be4 <__errno>:
 8004be4:	4b01      	ldr	r3, [pc, #4]	@ (8004bec <__errno+0x8>)
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	20000020 	.word	0x20000020

08004bf0 <__libc_init_array>:
 8004bf0:	b570      	push	{r4, r5, r6, lr}
 8004bf2:	4d0d      	ldr	r5, [pc, #52]	@ (8004c28 <__libc_init_array+0x38>)
 8004bf4:	4c0d      	ldr	r4, [pc, #52]	@ (8004c2c <__libc_init_array+0x3c>)
 8004bf6:	1b64      	subs	r4, r4, r5
 8004bf8:	10a4      	asrs	r4, r4, #2
 8004bfa:	2600      	movs	r6, #0
 8004bfc:	42a6      	cmp	r6, r4
 8004bfe:	d109      	bne.n	8004c14 <__libc_init_array+0x24>
 8004c00:	4d0b      	ldr	r5, [pc, #44]	@ (8004c30 <__libc_init_array+0x40>)
 8004c02:	4c0c      	ldr	r4, [pc, #48]	@ (8004c34 <__libc_init_array+0x44>)
 8004c04:	f001 fb54 	bl	80062b0 <_init>
 8004c08:	1b64      	subs	r4, r4, r5
 8004c0a:	10a4      	asrs	r4, r4, #2
 8004c0c:	2600      	movs	r6, #0
 8004c0e:	42a6      	cmp	r6, r4
 8004c10:	d105      	bne.n	8004c1e <__libc_init_array+0x2e>
 8004c12:	bd70      	pop	{r4, r5, r6, pc}
 8004c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c18:	4798      	blx	r3
 8004c1a:	3601      	adds	r6, #1
 8004c1c:	e7ee      	b.n	8004bfc <__libc_init_array+0xc>
 8004c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c22:	4798      	blx	r3
 8004c24:	3601      	adds	r6, #1
 8004c26:	e7f2      	b.n	8004c0e <__libc_init_array+0x1e>
 8004c28:	080066e0 	.word	0x080066e0
 8004c2c:	080066e0 	.word	0x080066e0
 8004c30:	080066e0 	.word	0x080066e0
 8004c34:	080066e4 	.word	0x080066e4

08004c38 <__retarget_lock_init_recursive>:
 8004c38:	4770      	bx	lr

08004c3a <__retarget_lock_acquire_recursive>:
 8004c3a:	4770      	bx	lr

08004c3c <__retarget_lock_release_recursive>:
 8004c3c:	4770      	bx	lr
	...

08004c40 <_free_r>:
 8004c40:	b538      	push	{r3, r4, r5, lr}
 8004c42:	4605      	mov	r5, r0
 8004c44:	2900      	cmp	r1, #0
 8004c46:	d041      	beq.n	8004ccc <_free_r+0x8c>
 8004c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c4c:	1f0c      	subs	r4, r1, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	bfb8      	it	lt
 8004c52:	18e4      	addlt	r4, r4, r3
 8004c54:	f000 f8e0 	bl	8004e18 <__malloc_lock>
 8004c58:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd0 <_free_r+0x90>)
 8004c5a:	6813      	ldr	r3, [r2, #0]
 8004c5c:	b933      	cbnz	r3, 8004c6c <_free_r+0x2c>
 8004c5e:	6063      	str	r3, [r4, #4]
 8004c60:	6014      	str	r4, [r2, #0]
 8004c62:	4628      	mov	r0, r5
 8004c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c68:	f000 b8dc 	b.w	8004e24 <__malloc_unlock>
 8004c6c:	42a3      	cmp	r3, r4
 8004c6e:	d908      	bls.n	8004c82 <_free_r+0x42>
 8004c70:	6820      	ldr	r0, [r4, #0]
 8004c72:	1821      	adds	r1, r4, r0
 8004c74:	428b      	cmp	r3, r1
 8004c76:	bf01      	itttt	eq
 8004c78:	6819      	ldreq	r1, [r3, #0]
 8004c7a:	685b      	ldreq	r3, [r3, #4]
 8004c7c:	1809      	addeq	r1, r1, r0
 8004c7e:	6021      	streq	r1, [r4, #0]
 8004c80:	e7ed      	b.n	8004c5e <_free_r+0x1e>
 8004c82:	461a      	mov	r2, r3
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	b10b      	cbz	r3, 8004c8c <_free_r+0x4c>
 8004c88:	42a3      	cmp	r3, r4
 8004c8a:	d9fa      	bls.n	8004c82 <_free_r+0x42>
 8004c8c:	6811      	ldr	r1, [r2, #0]
 8004c8e:	1850      	adds	r0, r2, r1
 8004c90:	42a0      	cmp	r0, r4
 8004c92:	d10b      	bne.n	8004cac <_free_r+0x6c>
 8004c94:	6820      	ldr	r0, [r4, #0]
 8004c96:	4401      	add	r1, r0
 8004c98:	1850      	adds	r0, r2, r1
 8004c9a:	4283      	cmp	r3, r0
 8004c9c:	6011      	str	r1, [r2, #0]
 8004c9e:	d1e0      	bne.n	8004c62 <_free_r+0x22>
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	6053      	str	r3, [r2, #4]
 8004ca6:	4408      	add	r0, r1
 8004ca8:	6010      	str	r0, [r2, #0]
 8004caa:	e7da      	b.n	8004c62 <_free_r+0x22>
 8004cac:	d902      	bls.n	8004cb4 <_free_r+0x74>
 8004cae:	230c      	movs	r3, #12
 8004cb0:	602b      	str	r3, [r5, #0]
 8004cb2:	e7d6      	b.n	8004c62 <_free_r+0x22>
 8004cb4:	6820      	ldr	r0, [r4, #0]
 8004cb6:	1821      	adds	r1, r4, r0
 8004cb8:	428b      	cmp	r3, r1
 8004cba:	bf04      	itt	eq
 8004cbc:	6819      	ldreq	r1, [r3, #0]
 8004cbe:	685b      	ldreq	r3, [r3, #4]
 8004cc0:	6063      	str	r3, [r4, #4]
 8004cc2:	bf04      	itt	eq
 8004cc4:	1809      	addeq	r1, r1, r0
 8004cc6:	6021      	streq	r1, [r4, #0]
 8004cc8:	6054      	str	r4, [r2, #4]
 8004cca:	e7ca      	b.n	8004c62 <_free_r+0x22>
 8004ccc:	bd38      	pop	{r3, r4, r5, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000354 	.word	0x20000354

08004cd4 <sbrk_aligned>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	4e0f      	ldr	r6, [pc, #60]	@ (8004d14 <sbrk_aligned+0x40>)
 8004cd8:	460c      	mov	r4, r1
 8004cda:	6831      	ldr	r1, [r6, #0]
 8004cdc:	4605      	mov	r5, r0
 8004cde:	b911      	cbnz	r1, 8004ce6 <sbrk_aligned+0x12>
 8004ce0:	f001 f9a6 	bl	8006030 <_sbrk_r>
 8004ce4:	6030      	str	r0, [r6, #0]
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	4628      	mov	r0, r5
 8004cea:	f001 f9a1 	bl	8006030 <_sbrk_r>
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	d103      	bne.n	8004cfa <sbrk_aligned+0x26>
 8004cf2:	f04f 34ff 	mov.w	r4, #4294967295
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	bd70      	pop	{r4, r5, r6, pc}
 8004cfa:	1cc4      	adds	r4, r0, #3
 8004cfc:	f024 0403 	bic.w	r4, r4, #3
 8004d00:	42a0      	cmp	r0, r4
 8004d02:	d0f8      	beq.n	8004cf6 <sbrk_aligned+0x22>
 8004d04:	1a21      	subs	r1, r4, r0
 8004d06:	4628      	mov	r0, r5
 8004d08:	f001 f992 	bl	8006030 <_sbrk_r>
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d1f2      	bne.n	8004cf6 <sbrk_aligned+0x22>
 8004d10:	e7ef      	b.n	8004cf2 <sbrk_aligned+0x1e>
 8004d12:	bf00      	nop
 8004d14:	20000350 	.word	0x20000350

08004d18 <_malloc_r>:
 8004d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d1c:	1ccd      	adds	r5, r1, #3
 8004d1e:	f025 0503 	bic.w	r5, r5, #3
 8004d22:	3508      	adds	r5, #8
 8004d24:	2d0c      	cmp	r5, #12
 8004d26:	bf38      	it	cc
 8004d28:	250c      	movcc	r5, #12
 8004d2a:	2d00      	cmp	r5, #0
 8004d2c:	4606      	mov	r6, r0
 8004d2e:	db01      	blt.n	8004d34 <_malloc_r+0x1c>
 8004d30:	42a9      	cmp	r1, r5
 8004d32:	d904      	bls.n	8004d3e <_malloc_r+0x26>
 8004d34:	230c      	movs	r3, #12
 8004d36:	6033      	str	r3, [r6, #0]
 8004d38:	2000      	movs	r0, #0
 8004d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e14 <_malloc_r+0xfc>
 8004d42:	f000 f869 	bl	8004e18 <__malloc_lock>
 8004d46:	f8d8 3000 	ldr.w	r3, [r8]
 8004d4a:	461c      	mov	r4, r3
 8004d4c:	bb44      	cbnz	r4, 8004da0 <_malloc_r+0x88>
 8004d4e:	4629      	mov	r1, r5
 8004d50:	4630      	mov	r0, r6
 8004d52:	f7ff ffbf 	bl	8004cd4 <sbrk_aligned>
 8004d56:	1c43      	adds	r3, r0, #1
 8004d58:	4604      	mov	r4, r0
 8004d5a:	d158      	bne.n	8004e0e <_malloc_r+0xf6>
 8004d5c:	f8d8 4000 	ldr.w	r4, [r8]
 8004d60:	4627      	mov	r7, r4
 8004d62:	2f00      	cmp	r7, #0
 8004d64:	d143      	bne.n	8004dee <_malloc_r+0xd6>
 8004d66:	2c00      	cmp	r4, #0
 8004d68:	d04b      	beq.n	8004e02 <_malloc_r+0xea>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	4639      	mov	r1, r7
 8004d6e:	4630      	mov	r0, r6
 8004d70:	eb04 0903 	add.w	r9, r4, r3
 8004d74:	f001 f95c 	bl	8006030 <_sbrk_r>
 8004d78:	4581      	cmp	r9, r0
 8004d7a:	d142      	bne.n	8004e02 <_malloc_r+0xea>
 8004d7c:	6821      	ldr	r1, [r4, #0]
 8004d7e:	1a6d      	subs	r5, r5, r1
 8004d80:	4629      	mov	r1, r5
 8004d82:	4630      	mov	r0, r6
 8004d84:	f7ff ffa6 	bl	8004cd4 <sbrk_aligned>
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d03a      	beq.n	8004e02 <_malloc_r+0xea>
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	442b      	add	r3, r5
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	f8d8 3000 	ldr.w	r3, [r8]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	bb62      	cbnz	r2, 8004df4 <_malloc_r+0xdc>
 8004d9a:	f8c8 7000 	str.w	r7, [r8]
 8004d9e:	e00f      	b.n	8004dc0 <_malloc_r+0xa8>
 8004da0:	6822      	ldr	r2, [r4, #0]
 8004da2:	1b52      	subs	r2, r2, r5
 8004da4:	d420      	bmi.n	8004de8 <_malloc_r+0xd0>
 8004da6:	2a0b      	cmp	r2, #11
 8004da8:	d917      	bls.n	8004dda <_malloc_r+0xc2>
 8004daa:	1961      	adds	r1, r4, r5
 8004dac:	42a3      	cmp	r3, r4
 8004dae:	6025      	str	r5, [r4, #0]
 8004db0:	bf18      	it	ne
 8004db2:	6059      	strne	r1, [r3, #4]
 8004db4:	6863      	ldr	r3, [r4, #4]
 8004db6:	bf08      	it	eq
 8004db8:	f8c8 1000 	streq.w	r1, [r8]
 8004dbc:	5162      	str	r2, [r4, r5]
 8004dbe:	604b      	str	r3, [r1, #4]
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f000 f82f 	bl	8004e24 <__malloc_unlock>
 8004dc6:	f104 000b 	add.w	r0, r4, #11
 8004dca:	1d23      	adds	r3, r4, #4
 8004dcc:	f020 0007 	bic.w	r0, r0, #7
 8004dd0:	1ac2      	subs	r2, r0, r3
 8004dd2:	bf1c      	itt	ne
 8004dd4:	1a1b      	subne	r3, r3, r0
 8004dd6:	50a3      	strne	r3, [r4, r2]
 8004dd8:	e7af      	b.n	8004d3a <_malloc_r+0x22>
 8004dda:	6862      	ldr	r2, [r4, #4]
 8004ddc:	42a3      	cmp	r3, r4
 8004dde:	bf0c      	ite	eq
 8004de0:	f8c8 2000 	streq.w	r2, [r8]
 8004de4:	605a      	strne	r2, [r3, #4]
 8004de6:	e7eb      	b.n	8004dc0 <_malloc_r+0xa8>
 8004de8:	4623      	mov	r3, r4
 8004dea:	6864      	ldr	r4, [r4, #4]
 8004dec:	e7ae      	b.n	8004d4c <_malloc_r+0x34>
 8004dee:	463c      	mov	r4, r7
 8004df0:	687f      	ldr	r7, [r7, #4]
 8004df2:	e7b6      	b.n	8004d62 <_malloc_r+0x4a>
 8004df4:	461a      	mov	r2, r3
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	42a3      	cmp	r3, r4
 8004dfa:	d1fb      	bne.n	8004df4 <_malloc_r+0xdc>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	6053      	str	r3, [r2, #4]
 8004e00:	e7de      	b.n	8004dc0 <_malloc_r+0xa8>
 8004e02:	230c      	movs	r3, #12
 8004e04:	6033      	str	r3, [r6, #0]
 8004e06:	4630      	mov	r0, r6
 8004e08:	f000 f80c 	bl	8004e24 <__malloc_unlock>
 8004e0c:	e794      	b.n	8004d38 <_malloc_r+0x20>
 8004e0e:	6005      	str	r5, [r0, #0]
 8004e10:	e7d6      	b.n	8004dc0 <_malloc_r+0xa8>
 8004e12:	bf00      	nop
 8004e14:	20000354 	.word	0x20000354

08004e18 <__malloc_lock>:
 8004e18:	4801      	ldr	r0, [pc, #4]	@ (8004e20 <__malloc_lock+0x8>)
 8004e1a:	f7ff bf0e 	b.w	8004c3a <__retarget_lock_acquire_recursive>
 8004e1e:	bf00      	nop
 8004e20:	2000034c 	.word	0x2000034c

08004e24 <__malloc_unlock>:
 8004e24:	4801      	ldr	r0, [pc, #4]	@ (8004e2c <__malloc_unlock+0x8>)
 8004e26:	f7ff bf09 	b.w	8004c3c <__retarget_lock_release_recursive>
 8004e2a:	bf00      	nop
 8004e2c:	2000034c 	.word	0x2000034c

08004e30 <__ssputs_r>:
 8004e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e34:	688e      	ldr	r6, [r1, #8]
 8004e36:	461f      	mov	r7, r3
 8004e38:	42be      	cmp	r6, r7
 8004e3a:	680b      	ldr	r3, [r1, #0]
 8004e3c:	4682      	mov	sl, r0
 8004e3e:	460c      	mov	r4, r1
 8004e40:	4690      	mov	r8, r2
 8004e42:	d82d      	bhi.n	8004ea0 <__ssputs_r+0x70>
 8004e44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e4c:	d026      	beq.n	8004e9c <__ssputs_r+0x6c>
 8004e4e:	6965      	ldr	r5, [r4, #20]
 8004e50:	6909      	ldr	r1, [r1, #16]
 8004e52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e56:	eba3 0901 	sub.w	r9, r3, r1
 8004e5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e5e:	1c7b      	adds	r3, r7, #1
 8004e60:	444b      	add	r3, r9
 8004e62:	106d      	asrs	r5, r5, #1
 8004e64:	429d      	cmp	r5, r3
 8004e66:	bf38      	it	cc
 8004e68:	461d      	movcc	r5, r3
 8004e6a:	0553      	lsls	r3, r2, #21
 8004e6c:	d527      	bpl.n	8004ebe <__ssputs_r+0x8e>
 8004e6e:	4629      	mov	r1, r5
 8004e70:	f7ff ff52 	bl	8004d18 <_malloc_r>
 8004e74:	4606      	mov	r6, r0
 8004e76:	b360      	cbz	r0, 8004ed2 <__ssputs_r+0xa2>
 8004e78:	6921      	ldr	r1, [r4, #16]
 8004e7a:	464a      	mov	r2, r9
 8004e7c:	f001 f8e8 	bl	8006050 <memcpy>
 8004e80:	89a3      	ldrh	r3, [r4, #12]
 8004e82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e8a:	81a3      	strh	r3, [r4, #12]
 8004e8c:	6126      	str	r6, [r4, #16]
 8004e8e:	6165      	str	r5, [r4, #20]
 8004e90:	444e      	add	r6, r9
 8004e92:	eba5 0509 	sub.w	r5, r5, r9
 8004e96:	6026      	str	r6, [r4, #0]
 8004e98:	60a5      	str	r5, [r4, #8]
 8004e9a:	463e      	mov	r6, r7
 8004e9c:	42be      	cmp	r6, r7
 8004e9e:	d900      	bls.n	8004ea2 <__ssputs_r+0x72>
 8004ea0:	463e      	mov	r6, r7
 8004ea2:	6820      	ldr	r0, [r4, #0]
 8004ea4:	4632      	mov	r2, r6
 8004ea6:	4641      	mov	r1, r8
 8004ea8:	f001 f885 	bl	8005fb6 <memmove>
 8004eac:	68a3      	ldr	r3, [r4, #8]
 8004eae:	1b9b      	subs	r3, r3, r6
 8004eb0:	60a3      	str	r3, [r4, #8]
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	4433      	add	r3, r6
 8004eb6:	6023      	str	r3, [r4, #0]
 8004eb8:	2000      	movs	r0, #0
 8004eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ebe:	462a      	mov	r2, r5
 8004ec0:	f001 f8d4 	bl	800606c <_realloc_r>
 8004ec4:	4606      	mov	r6, r0
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	d1e0      	bne.n	8004e8c <__ssputs_r+0x5c>
 8004eca:	6921      	ldr	r1, [r4, #16]
 8004ecc:	4650      	mov	r0, sl
 8004ece:	f7ff feb7 	bl	8004c40 <_free_r>
 8004ed2:	230c      	movs	r3, #12
 8004ed4:	f8ca 3000 	str.w	r3, [sl]
 8004ed8:	89a3      	ldrh	r3, [r4, #12]
 8004eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ede:	81a3      	strh	r3, [r4, #12]
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee4:	e7e9      	b.n	8004eba <__ssputs_r+0x8a>
	...

08004ee8 <_svfiprintf_r>:
 8004ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eec:	4698      	mov	r8, r3
 8004eee:	898b      	ldrh	r3, [r1, #12]
 8004ef0:	061b      	lsls	r3, r3, #24
 8004ef2:	b09d      	sub	sp, #116	@ 0x74
 8004ef4:	4607      	mov	r7, r0
 8004ef6:	460d      	mov	r5, r1
 8004ef8:	4614      	mov	r4, r2
 8004efa:	d510      	bpl.n	8004f1e <_svfiprintf_r+0x36>
 8004efc:	690b      	ldr	r3, [r1, #16]
 8004efe:	b973      	cbnz	r3, 8004f1e <_svfiprintf_r+0x36>
 8004f00:	2140      	movs	r1, #64	@ 0x40
 8004f02:	f7ff ff09 	bl	8004d18 <_malloc_r>
 8004f06:	6028      	str	r0, [r5, #0]
 8004f08:	6128      	str	r0, [r5, #16]
 8004f0a:	b930      	cbnz	r0, 8004f1a <_svfiprintf_r+0x32>
 8004f0c:	230c      	movs	r3, #12
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295
 8004f14:	b01d      	add	sp, #116	@ 0x74
 8004f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1a:	2340      	movs	r3, #64	@ 0x40
 8004f1c:	616b      	str	r3, [r5, #20]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f22:	2320      	movs	r3, #32
 8004f24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f28:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f2c:	2330      	movs	r3, #48	@ 0x30
 8004f2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80050cc <_svfiprintf_r+0x1e4>
 8004f32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f36:	f04f 0901 	mov.w	r9, #1
 8004f3a:	4623      	mov	r3, r4
 8004f3c:	469a      	mov	sl, r3
 8004f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f42:	b10a      	cbz	r2, 8004f48 <_svfiprintf_r+0x60>
 8004f44:	2a25      	cmp	r2, #37	@ 0x25
 8004f46:	d1f9      	bne.n	8004f3c <_svfiprintf_r+0x54>
 8004f48:	ebba 0b04 	subs.w	fp, sl, r4
 8004f4c:	d00b      	beq.n	8004f66 <_svfiprintf_r+0x7e>
 8004f4e:	465b      	mov	r3, fp
 8004f50:	4622      	mov	r2, r4
 8004f52:	4629      	mov	r1, r5
 8004f54:	4638      	mov	r0, r7
 8004f56:	f7ff ff6b 	bl	8004e30 <__ssputs_r>
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	f000 80a7 	beq.w	80050ae <_svfiprintf_r+0x1c6>
 8004f60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f62:	445a      	add	r2, fp
 8004f64:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f66:	f89a 3000 	ldrb.w	r3, [sl]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 809f 	beq.w	80050ae <_svfiprintf_r+0x1c6>
 8004f70:	2300      	movs	r3, #0
 8004f72:	f04f 32ff 	mov.w	r2, #4294967295
 8004f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f7a:	f10a 0a01 	add.w	sl, sl, #1
 8004f7e:	9304      	str	r3, [sp, #16]
 8004f80:	9307      	str	r3, [sp, #28]
 8004f82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f86:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f88:	4654      	mov	r4, sl
 8004f8a:	2205      	movs	r2, #5
 8004f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f90:	484e      	ldr	r0, [pc, #312]	@ (80050cc <_svfiprintf_r+0x1e4>)
 8004f92:	f7fb f945 	bl	8000220 <memchr>
 8004f96:	9a04      	ldr	r2, [sp, #16]
 8004f98:	b9d8      	cbnz	r0, 8004fd2 <_svfiprintf_r+0xea>
 8004f9a:	06d0      	lsls	r0, r2, #27
 8004f9c:	bf44      	itt	mi
 8004f9e:	2320      	movmi	r3, #32
 8004fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fa4:	0711      	lsls	r1, r2, #28
 8004fa6:	bf44      	itt	mi
 8004fa8:	232b      	movmi	r3, #43	@ 0x2b
 8004faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fae:	f89a 3000 	ldrb.w	r3, [sl]
 8004fb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fb4:	d015      	beq.n	8004fe2 <_svfiprintf_r+0xfa>
 8004fb6:	9a07      	ldr	r2, [sp, #28]
 8004fb8:	4654      	mov	r4, sl
 8004fba:	2000      	movs	r0, #0
 8004fbc:	f04f 0c0a 	mov.w	ip, #10
 8004fc0:	4621      	mov	r1, r4
 8004fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fc6:	3b30      	subs	r3, #48	@ 0x30
 8004fc8:	2b09      	cmp	r3, #9
 8004fca:	d94b      	bls.n	8005064 <_svfiprintf_r+0x17c>
 8004fcc:	b1b0      	cbz	r0, 8004ffc <_svfiprintf_r+0x114>
 8004fce:	9207      	str	r2, [sp, #28]
 8004fd0:	e014      	b.n	8004ffc <_svfiprintf_r+0x114>
 8004fd2:	eba0 0308 	sub.w	r3, r0, r8
 8004fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	9304      	str	r3, [sp, #16]
 8004fde:	46a2      	mov	sl, r4
 8004fe0:	e7d2      	b.n	8004f88 <_svfiprintf_r+0xa0>
 8004fe2:	9b03      	ldr	r3, [sp, #12]
 8004fe4:	1d19      	adds	r1, r3, #4
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	9103      	str	r1, [sp, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	bfbb      	ittet	lt
 8004fee:	425b      	neglt	r3, r3
 8004ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8004ff4:	9307      	strge	r3, [sp, #28]
 8004ff6:	9307      	strlt	r3, [sp, #28]
 8004ff8:	bfb8      	it	lt
 8004ffa:	9204      	strlt	r2, [sp, #16]
 8004ffc:	7823      	ldrb	r3, [r4, #0]
 8004ffe:	2b2e      	cmp	r3, #46	@ 0x2e
 8005000:	d10a      	bne.n	8005018 <_svfiprintf_r+0x130>
 8005002:	7863      	ldrb	r3, [r4, #1]
 8005004:	2b2a      	cmp	r3, #42	@ 0x2a
 8005006:	d132      	bne.n	800506e <_svfiprintf_r+0x186>
 8005008:	9b03      	ldr	r3, [sp, #12]
 800500a:	1d1a      	adds	r2, r3, #4
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	9203      	str	r2, [sp, #12]
 8005010:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005014:	3402      	adds	r4, #2
 8005016:	9305      	str	r3, [sp, #20]
 8005018:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80050dc <_svfiprintf_r+0x1f4>
 800501c:	7821      	ldrb	r1, [r4, #0]
 800501e:	2203      	movs	r2, #3
 8005020:	4650      	mov	r0, sl
 8005022:	f7fb f8fd 	bl	8000220 <memchr>
 8005026:	b138      	cbz	r0, 8005038 <_svfiprintf_r+0x150>
 8005028:	9b04      	ldr	r3, [sp, #16]
 800502a:	eba0 000a 	sub.w	r0, r0, sl
 800502e:	2240      	movs	r2, #64	@ 0x40
 8005030:	4082      	lsls	r2, r0
 8005032:	4313      	orrs	r3, r2
 8005034:	3401      	adds	r4, #1
 8005036:	9304      	str	r3, [sp, #16]
 8005038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800503c:	4824      	ldr	r0, [pc, #144]	@ (80050d0 <_svfiprintf_r+0x1e8>)
 800503e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005042:	2206      	movs	r2, #6
 8005044:	f7fb f8ec 	bl	8000220 <memchr>
 8005048:	2800      	cmp	r0, #0
 800504a:	d036      	beq.n	80050ba <_svfiprintf_r+0x1d2>
 800504c:	4b21      	ldr	r3, [pc, #132]	@ (80050d4 <_svfiprintf_r+0x1ec>)
 800504e:	bb1b      	cbnz	r3, 8005098 <_svfiprintf_r+0x1b0>
 8005050:	9b03      	ldr	r3, [sp, #12]
 8005052:	3307      	adds	r3, #7
 8005054:	f023 0307 	bic.w	r3, r3, #7
 8005058:	3308      	adds	r3, #8
 800505a:	9303      	str	r3, [sp, #12]
 800505c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800505e:	4433      	add	r3, r6
 8005060:	9309      	str	r3, [sp, #36]	@ 0x24
 8005062:	e76a      	b.n	8004f3a <_svfiprintf_r+0x52>
 8005064:	fb0c 3202 	mla	r2, ip, r2, r3
 8005068:	460c      	mov	r4, r1
 800506a:	2001      	movs	r0, #1
 800506c:	e7a8      	b.n	8004fc0 <_svfiprintf_r+0xd8>
 800506e:	2300      	movs	r3, #0
 8005070:	3401      	adds	r4, #1
 8005072:	9305      	str	r3, [sp, #20]
 8005074:	4619      	mov	r1, r3
 8005076:	f04f 0c0a 	mov.w	ip, #10
 800507a:	4620      	mov	r0, r4
 800507c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005080:	3a30      	subs	r2, #48	@ 0x30
 8005082:	2a09      	cmp	r2, #9
 8005084:	d903      	bls.n	800508e <_svfiprintf_r+0x1a6>
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0c6      	beq.n	8005018 <_svfiprintf_r+0x130>
 800508a:	9105      	str	r1, [sp, #20]
 800508c:	e7c4      	b.n	8005018 <_svfiprintf_r+0x130>
 800508e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005092:	4604      	mov	r4, r0
 8005094:	2301      	movs	r3, #1
 8005096:	e7f0      	b.n	800507a <_svfiprintf_r+0x192>
 8005098:	ab03      	add	r3, sp, #12
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	462a      	mov	r2, r5
 800509e:	4b0e      	ldr	r3, [pc, #56]	@ (80050d8 <_svfiprintf_r+0x1f0>)
 80050a0:	a904      	add	r1, sp, #16
 80050a2:	4638      	mov	r0, r7
 80050a4:	f3af 8000 	nop.w
 80050a8:	1c42      	adds	r2, r0, #1
 80050aa:	4606      	mov	r6, r0
 80050ac:	d1d6      	bne.n	800505c <_svfiprintf_r+0x174>
 80050ae:	89ab      	ldrh	r3, [r5, #12]
 80050b0:	065b      	lsls	r3, r3, #25
 80050b2:	f53f af2d 	bmi.w	8004f10 <_svfiprintf_r+0x28>
 80050b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050b8:	e72c      	b.n	8004f14 <_svfiprintf_r+0x2c>
 80050ba:	ab03      	add	r3, sp, #12
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	462a      	mov	r2, r5
 80050c0:	4b05      	ldr	r3, [pc, #20]	@ (80050d8 <_svfiprintf_r+0x1f0>)
 80050c2:	a904      	add	r1, sp, #16
 80050c4:	4638      	mov	r0, r7
 80050c6:	f000 fb87 	bl	80057d8 <_printf_i>
 80050ca:	e7ed      	b.n	80050a8 <_svfiprintf_r+0x1c0>
 80050cc:	08006588 	.word	0x08006588
 80050d0:	08006592 	.word	0x08006592
 80050d4:	00000000 	.word	0x00000000
 80050d8:	08004e31 	.word	0x08004e31
 80050dc:	0800658e 	.word	0x0800658e

080050e0 <_sungetc_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	1c4b      	adds	r3, r1, #1
 80050e4:	4614      	mov	r4, r2
 80050e6:	d103      	bne.n	80050f0 <_sungetc_r+0x10>
 80050e8:	f04f 35ff 	mov.w	r5, #4294967295
 80050ec:	4628      	mov	r0, r5
 80050ee:	bd38      	pop	{r3, r4, r5, pc}
 80050f0:	8993      	ldrh	r3, [r2, #12]
 80050f2:	f023 0320 	bic.w	r3, r3, #32
 80050f6:	8193      	strh	r3, [r2, #12]
 80050f8:	6853      	ldr	r3, [r2, #4]
 80050fa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80050fc:	b2cd      	uxtb	r5, r1
 80050fe:	b18a      	cbz	r2, 8005124 <_sungetc_r+0x44>
 8005100:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005102:	429a      	cmp	r2, r3
 8005104:	dd08      	ble.n	8005118 <_sungetc_r+0x38>
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	1e5a      	subs	r2, r3, #1
 800510a:	6022      	str	r2, [r4, #0]
 800510c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005110:	6863      	ldr	r3, [r4, #4]
 8005112:	3301      	adds	r3, #1
 8005114:	6063      	str	r3, [r4, #4]
 8005116:	e7e9      	b.n	80050ec <_sungetc_r+0xc>
 8005118:	4621      	mov	r1, r4
 800511a:	f000 ff12 	bl	8005f42 <__submore>
 800511e:	2800      	cmp	r0, #0
 8005120:	d0f1      	beq.n	8005106 <_sungetc_r+0x26>
 8005122:	e7e1      	b.n	80050e8 <_sungetc_r+0x8>
 8005124:	6921      	ldr	r1, [r4, #16]
 8005126:	6822      	ldr	r2, [r4, #0]
 8005128:	b141      	cbz	r1, 800513c <_sungetc_r+0x5c>
 800512a:	4291      	cmp	r1, r2
 800512c:	d206      	bcs.n	800513c <_sungetc_r+0x5c>
 800512e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8005132:	42a9      	cmp	r1, r5
 8005134:	d102      	bne.n	800513c <_sungetc_r+0x5c>
 8005136:	3a01      	subs	r2, #1
 8005138:	6022      	str	r2, [r4, #0]
 800513a:	e7ea      	b.n	8005112 <_sungetc_r+0x32>
 800513c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8005140:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005144:	6363      	str	r3, [r4, #52]	@ 0x34
 8005146:	2303      	movs	r3, #3
 8005148:	63a3      	str	r3, [r4, #56]	@ 0x38
 800514a:	4623      	mov	r3, r4
 800514c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005150:	6023      	str	r3, [r4, #0]
 8005152:	2301      	movs	r3, #1
 8005154:	e7de      	b.n	8005114 <_sungetc_r+0x34>

08005156 <__ssrefill_r>:
 8005156:	b510      	push	{r4, lr}
 8005158:	460c      	mov	r4, r1
 800515a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800515c:	b169      	cbz	r1, 800517a <__ssrefill_r+0x24>
 800515e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005162:	4299      	cmp	r1, r3
 8005164:	d001      	beq.n	800516a <__ssrefill_r+0x14>
 8005166:	f7ff fd6b 	bl	8004c40 <_free_r>
 800516a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800516c:	6063      	str	r3, [r4, #4]
 800516e:	2000      	movs	r0, #0
 8005170:	6360      	str	r0, [r4, #52]	@ 0x34
 8005172:	b113      	cbz	r3, 800517a <__ssrefill_r+0x24>
 8005174:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005176:	6023      	str	r3, [r4, #0]
 8005178:	bd10      	pop	{r4, pc}
 800517a:	6923      	ldr	r3, [r4, #16]
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	2300      	movs	r3, #0
 8005180:	6063      	str	r3, [r4, #4]
 8005182:	89a3      	ldrh	r3, [r4, #12]
 8005184:	f043 0320 	orr.w	r3, r3, #32
 8005188:	81a3      	strh	r3, [r4, #12]
 800518a:	f04f 30ff 	mov.w	r0, #4294967295
 800518e:	e7f3      	b.n	8005178 <__ssrefill_r+0x22>

08005190 <__ssvfiscanf_r>:
 8005190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005194:	460c      	mov	r4, r1
 8005196:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800519a:	2100      	movs	r1, #0
 800519c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80051a0:	49a5      	ldr	r1, [pc, #660]	@ (8005438 <__ssvfiscanf_r+0x2a8>)
 80051a2:	91a0      	str	r1, [sp, #640]	@ 0x280
 80051a4:	f10d 0804 	add.w	r8, sp, #4
 80051a8:	49a4      	ldr	r1, [pc, #656]	@ (800543c <__ssvfiscanf_r+0x2ac>)
 80051aa:	4fa5      	ldr	r7, [pc, #660]	@ (8005440 <__ssvfiscanf_r+0x2b0>)
 80051ac:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80051b0:	4606      	mov	r6, r0
 80051b2:	91a1      	str	r1, [sp, #644]	@ 0x284
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	7813      	ldrb	r3, [r2, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 8158 	beq.w	800546e <__ssvfiscanf_r+0x2de>
 80051be:	5cf9      	ldrb	r1, [r7, r3]
 80051c0:	f011 0108 	ands.w	r1, r1, #8
 80051c4:	f102 0501 	add.w	r5, r2, #1
 80051c8:	d019      	beq.n	80051fe <__ssvfiscanf_r+0x6e>
 80051ca:	6863      	ldr	r3, [r4, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	dd0f      	ble.n	80051f0 <__ssvfiscanf_r+0x60>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	781a      	ldrb	r2, [r3, #0]
 80051d4:	5cba      	ldrb	r2, [r7, r2]
 80051d6:	0712      	lsls	r2, r2, #28
 80051d8:	d401      	bmi.n	80051de <__ssvfiscanf_r+0x4e>
 80051da:	462a      	mov	r2, r5
 80051dc:	e7eb      	b.n	80051b6 <__ssvfiscanf_r+0x26>
 80051de:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80051e0:	3201      	adds	r2, #1
 80051e2:	9245      	str	r2, [sp, #276]	@ 0x114
 80051e4:	6862      	ldr	r2, [r4, #4]
 80051e6:	3301      	adds	r3, #1
 80051e8:	3a01      	subs	r2, #1
 80051ea:	6062      	str	r2, [r4, #4]
 80051ec:	6023      	str	r3, [r4, #0]
 80051ee:	e7ec      	b.n	80051ca <__ssvfiscanf_r+0x3a>
 80051f0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80051f2:	4621      	mov	r1, r4
 80051f4:	4630      	mov	r0, r6
 80051f6:	4798      	blx	r3
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d0e9      	beq.n	80051d0 <__ssvfiscanf_r+0x40>
 80051fc:	e7ed      	b.n	80051da <__ssvfiscanf_r+0x4a>
 80051fe:	2b25      	cmp	r3, #37	@ 0x25
 8005200:	d012      	beq.n	8005228 <__ssvfiscanf_r+0x98>
 8005202:	4699      	mov	r9, r3
 8005204:	6863      	ldr	r3, [r4, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	f340 8093 	ble.w	8005332 <__ssvfiscanf_r+0x1a2>
 800520c:	6822      	ldr	r2, [r4, #0]
 800520e:	7813      	ldrb	r3, [r2, #0]
 8005210:	454b      	cmp	r3, r9
 8005212:	f040 812c 	bne.w	800546e <__ssvfiscanf_r+0x2de>
 8005216:	6863      	ldr	r3, [r4, #4]
 8005218:	3b01      	subs	r3, #1
 800521a:	6063      	str	r3, [r4, #4]
 800521c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800521e:	3201      	adds	r2, #1
 8005220:	3301      	adds	r3, #1
 8005222:	6022      	str	r2, [r4, #0]
 8005224:	9345      	str	r3, [sp, #276]	@ 0x114
 8005226:	e7d8      	b.n	80051da <__ssvfiscanf_r+0x4a>
 8005228:	9141      	str	r1, [sp, #260]	@ 0x104
 800522a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800522c:	7853      	ldrb	r3, [r2, #1]
 800522e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005230:	bf02      	ittt	eq
 8005232:	2310      	moveq	r3, #16
 8005234:	1c95      	addeq	r5, r2, #2
 8005236:	9341      	streq	r3, [sp, #260]	@ 0x104
 8005238:	220a      	movs	r2, #10
 800523a:	46a9      	mov	r9, r5
 800523c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8005240:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8005244:	2b09      	cmp	r3, #9
 8005246:	d91e      	bls.n	8005286 <__ssvfiscanf_r+0xf6>
 8005248:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8005444 <__ssvfiscanf_r+0x2b4>
 800524c:	2203      	movs	r2, #3
 800524e:	4650      	mov	r0, sl
 8005250:	f7fa ffe6 	bl	8000220 <memchr>
 8005254:	b138      	cbz	r0, 8005266 <__ssvfiscanf_r+0xd6>
 8005256:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005258:	eba0 000a 	sub.w	r0, r0, sl
 800525c:	2301      	movs	r3, #1
 800525e:	4083      	lsls	r3, r0
 8005260:	4313      	orrs	r3, r2
 8005262:	9341      	str	r3, [sp, #260]	@ 0x104
 8005264:	464d      	mov	r5, r9
 8005266:	f815 3b01 	ldrb.w	r3, [r5], #1
 800526a:	2b78      	cmp	r3, #120	@ 0x78
 800526c:	d806      	bhi.n	800527c <__ssvfiscanf_r+0xec>
 800526e:	2b57      	cmp	r3, #87	@ 0x57
 8005270:	d810      	bhi.n	8005294 <__ssvfiscanf_r+0x104>
 8005272:	2b25      	cmp	r3, #37	@ 0x25
 8005274:	d0c5      	beq.n	8005202 <__ssvfiscanf_r+0x72>
 8005276:	d857      	bhi.n	8005328 <__ssvfiscanf_r+0x198>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d065      	beq.n	8005348 <__ssvfiscanf_r+0x1b8>
 800527c:	2303      	movs	r3, #3
 800527e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005280:	230a      	movs	r3, #10
 8005282:	9342      	str	r3, [sp, #264]	@ 0x108
 8005284:	e078      	b.n	8005378 <__ssvfiscanf_r+0x1e8>
 8005286:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005288:	fb02 1103 	mla	r1, r2, r3, r1
 800528c:	3930      	subs	r1, #48	@ 0x30
 800528e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005290:	464d      	mov	r5, r9
 8005292:	e7d2      	b.n	800523a <__ssvfiscanf_r+0xaa>
 8005294:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8005298:	2a20      	cmp	r2, #32
 800529a:	d8ef      	bhi.n	800527c <__ssvfiscanf_r+0xec>
 800529c:	a101      	add	r1, pc, #4	@ (adr r1, 80052a4 <__ssvfiscanf_r+0x114>)
 800529e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	08005357 	.word	0x08005357
 80052a8:	0800527d 	.word	0x0800527d
 80052ac:	0800527d 	.word	0x0800527d
 80052b0:	080053b1 	.word	0x080053b1
 80052b4:	0800527d 	.word	0x0800527d
 80052b8:	0800527d 	.word	0x0800527d
 80052bc:	0800527d 	.word	0x0800527d
 80052c0:	0800527d 	.word	0x0800527d
 80052c4:	0800527d 	.word	0x0800527d
 80052c8:	0800527d 	.word	0x0800527d
 80052cc:	0800527d 	.word	0x0800527d
 80052d0:	080053c7 	.word	0x080053c7
 80052d4:	080053ad 	.word	0x080053ad
 80052d8:	0800532f 	.word	0x0800532f
 80052dc:	0800532f 	.word	0x0800532f
 80052e0:	0800532f 	.word	0x0800532f
 80052e4:	0800527d 	.word	0x0800527d
 80052e8:	08005369 	.word	0x08005369
 80052ec:	0800527d 	.word	0x0800527d
 80052f0:	0800527d 	.word	0x0800527d
 80052f4:	0800527d 	.word	0x0800527d
 80052f8:	0800527d 	.word	0x0800527d
 80052fc:	080053d7 	.word	0x080053d7
 8005300:	08005371 	.word	0x08005371
 8005304:	0800534f 	.word	0x0800534f
 8005308:	0800527d 	.word	0x0800527d
 800530c:	0800527d 	.word	0x0800527d
 8005310:	080053d3 	.word	0x080053d3
 8005314:	0800527d 	.word	0x0800527d
 8005318:	080053ad 	.word	0x080053ad
 800531c:	0800527d 	.word	0x0800527d
 8005320:	0800527d 	.word	0x0800527d
 8005324:	08005357 	.word	0x08005357
 8005328:	3b45      	subs	r3, #69	@ 0x45
 800532a:	2b02      	cmp	r3, #2
 800532c:	d8a6      	bhi.n	800527c <__ssvfiscanf_r+0xec>
 800532e:	2305      	movs	r3, #5
 8005330:	e021      	b.n	8005376 <__ssvfiscanf_r+0x1e6>
 8005332:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005334:	4621      	mov	r1, r4
 8005336:	4630      	mov	r0, r6
 8005338:	4798      	blx	r3
 800533a:	2800      	cmp	r0, #0
 800533c:	f43f af66 	beq.w	800520c <__ssvfiscanf_r+0x7c>
 8005340:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005342:	2800      	cmp	r0, #0
 8005344:	f040 808b 	bne.w	800545e <__ssvfiscanf_r+0x2ce>
 8005348:	f04f 30ff 	mov.w	r0, #4294967295
 800534c:	e08b      	b.n	8005466 <__ssvfiscanf_r+0x2d6>
 800534e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005350:	f042 0220 	orr.w	r2, r2, #32
 8005354:	9241      	str	r2, [sp, #260]	@ 0x104
 8005356:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800535c:	9241      	str	r2, [sp, #260]	@ 0x104
 800535e:	2210      	movs	r2, #16
 8005360:	2b6e      	cmp	r3, #110	@ 0x6e
 8005362:	9242      	str	r2, [sp, #264]	@ 0x108
 8005364:	d902      	bls.n	800536c <__ssvfiscanf_r+0x1dc>
 8005366:	e005      	b.n	8005374 <__ssvfiscanf_r+0x1e4>
 8005368:	2300      	movs	r3, #0
 800536a:	9342      	str	r3, [sp, #264]	@ 0x108
 800536c:	2303      	movs	r3, #3
 800536e:	e002      	b.n	8005376 <__ssvfiscanf_r+0x1e6>
 8005370:	2308      	movs	r3, #8
 8005372:	9342      	str	r3, [sp, #264]	@ 0x108
 8005374:	2304      	movs	r3, #4
 8005376:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005378:	6863      	ldr	r3, [r4, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	dd39      	ble.n	80053f2 <__ssvfiscanf_r+0x262>
 800537e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005380:	0659      	lsls	r1, r3, #25
 8005382:	d404      	bmi.n	800538e <__ssvfiscanf_r+0x1fe>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	781a      	ldrb	r2, [r3, #0]
 8005388:	5cba      	ldrb	r2, [r7, r2]
 800538a:	0712      	lsls	r2, r2, #28
 800538c:	d438      	bmi.n	8005400 <__ssvfiscanf_r+0x270>
 800538e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005390:	2b02      	cmp	r3, #2
 8005392:	dc47      	bgt.n	8005424 <__ssvfiscanf_r+0x294>
 8005394:	466b      	mov	r3, sp
 8005396:	4622      	mov	r2, r4
 8005398:	a941      	add	r1, sp, #260	@ 0x104
 800539a:	4630      	mov	r0, r6
 800539c:	f000 fb3c 	bl	8005a18 <_scanf_chars>
 80053a0:	2801      	cmp	r0, #1
 80053a2:	d064      	beq.n	800546e <__ssvfiscanf_r+0x2de>
 80053a4:	2802      	cmp	r0, #2
 80053a6:	f47f af18 	bne.w	80051da <__ssvfiscanf_r+0x4a>
 80053aa:	e7c9      	b.n	8005340 <__ssvfiscanf_r+0x1b0>
 80053ac:	220a      	movs	r2, #10
 80053ae:	e7d7      	b.n	8005360 <__ssvfiscanf_r+0x1d0>
 80053b0:	4629      	mov	r1, r5
 80053b2:	4640      	mov	r0, r8
 80053b4:	f000 fd8c 	bl	8005ed0 <__sccl>
 80053b8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80053ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053be:	9341      	str	r3, [sp, #260]	@ 0x104
 80053c0:	4605      	mov	r5, r0
 80053c2:	2301      	movs	r3, #1
 80053c4:	e7d7      	b.n	8005376 <__ssvfiscanf_r+0x1e6>
 80053c6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80053c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053cc:	9341      	str	r3, [sp, #260]	@ 0x104
 80053ce:	2300      	movs	r3, #0
 80053d0:	e7d1      	b.n	8005376 <__ssvfiscanf_r+0x1e6>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e7cf      	b.n	8005376 <__ssvfiscanf_r+0x1e6>
 80053d6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80053d8:	06c3      	lsls	r3, r0, #27
 80053da:	f53f aefe 	bmi.w	80051da <__ssvfiscanf_r+0x4a>
 80053de:	9b00      	ldr	r3, [sp, #0]
 80053e0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80053e2:	1d19      	adds	r1, r3, #4
 80053e4:	9100      	str	r1, [sp, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	07c0      	lsls	r0, r0, #31
 80053ea:	bf4c      	ite	mi
 80053ec:	801a      	strhmi	r2, [r3, #0]
 80053ee:	601a      	strpl	r2, [r3, #0]
 80053f0:	e6f3      	b.n	80051da <__ssvfiscanf_r+0x4a>
 80053f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80053f4:	4621      	mov	r1, r4
 80053f6:	4630      	mov	r0, r6
 80053f8:	4798      	blx	r3
 80053fa:	2800      	cmp	r0, #0
 80053fc:	d0bf      	beq.n	800537e <__ssvfiscanf_r+0x1ee>
 80053fe:	e79f      	b.n	8005340 <__ssvfiscanf_r+0x1b0>
 8005400:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005402:	3201      	adds	r2, #1
 8005404:	9245      	str	r2, [sp, #276]	@ 0x114
 8005406:	6862      	ldr	r2, [r4, #4]
 8005408:	3a01      	subs	r2, #1
 800540a:	2a00      	cmp	r2, #0
 800540c:	6062      	str	r2, [r4, #4]
 800540e:	dd02      	ble.n	8005416 <__ssvfiscanf_r+0x286>
 8005410:	3301      	adds	r3, #1
 8005412:	6023      	str	r3, [r4, #0]
 8005414:	e7b6      	b.n	8005384 <__ssvfiscanf_r+0x1f4>
 8005416:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005418:	4621      	mov	r1, r4
 800541a:	4630      	mov	r0, r6
 800541c:	4798      	blx	r3
 800541e:	2800      	cmp	r0, #0
 8005420:	d0b0      	beq.n	8005384 <__ssvfiscanf_r+0x1f4>
 8005422:	e78d      	b.n	8005340 <__ssvfiscanf_r+0x1b0>
 8005424:	2b04      	cmp	r3, #4
 8005426:	dc0f      	bgt.n	8005448 <__ssvfiscanf_r+0x2b8>
 8005428:	466b      	mov	r3, sp
 800542a:	4622      	mov	r2, r4
 800542c:	a941      	add	r1, sp, #260	@ 0x104
 800542e:	4630      	mov	r0, r6
 8005430:	f000 fb4c 	bl	8005acc <_scanf_i>
 8005434:	e7b4      	b.n	80053a0 <__ssvfiscanf_r+0x210>
 8005436:	bf00      	nop
 8005438:	080050e1 	.word	0x080050e1
 800543c:	08005157 	.word	0x08005157
 8005440:	080065d7 	.word	0x080065d7
 8005444:	0800658e 	.word	0x0800658e
 8005448:	4b0a      	ldr	r3, [pc, #40]	@ (8005474 <__ssvfiscanf_r+0x2e4>)
 800544a:	2b00      	cmp	r3, #0
 800544c:	f43f aec5 	beq.w	80051da <__ssvfiscanf_r+0x4a>
 8005450:	466b      	mov	r3, sp
 8005452:	4622      	mov	r2, r4
 8005454:	a941      	add	r1, sp, #260	@ 0x104
 8005456:	4630      	mov	r0, r6
 8005458:	f3af 8000 	nop.w
 800545c:	e7a0      	b.n	80053a0 <__ssvfiscanf_r+0x210>
 800545e:	89a3      	ldrh	r3, [r4, #12]
 8005460:	065b      	lsls	r3, r3, #25
 8005462:	f53f af71 	bmi.w	8005348 <__ssvfiscanf_r+0x1b8>
 8005466:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800546a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800546e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005470:	e7f9      	b.n	8005466 <__ssvfiscanf_r+0x2d6>
 8005472:	bf00      	nop
 8005474:	00000000 	.word	0x00000000

08005478 <__sfputc_r>:
 8005478:	6893      	ldr	r3, [r2, #8]
 800547a:	3b01      	subs	r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	b410      	push	{r4}
 8005480:	6093      	str	r3, [r2, #8]
 8005482:	da08      	bge.n	8005496 <__sfputc_r+0x1e>
 8005484:	6994      	ldr	r4, [r2, #24]
 8005486:	42a3      	cmp	r3, r4
 8005488:	db01      	blt.n	800548e <__sfputc_r+0x16>
 800548a:	290a      	cmp	r1, #10
 800548c:	d103      	bne.n	8005496 <__sfputc_r+0x1e>
 800548e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005492:	f7ff bac4 	b.w	8004a1e <__swbuf_r>
 8005496:	6813      	ldr	r3, [r2, #0]
 8005498:	1c58      	adds	r0, r3, #1
 800549a:	6010      	str	r0, [r2, #0]
 800549c:	7019      	strb	r1, [r3, #0]
 800549e:	4608      	mov	r0, r1
 80054a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <__sfputs_r>:
 80054a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a8:	4606      	mov	r6, r0
 80054aa:	460f      	mov	r7, r1
 80054ac:	4614      	mov	r4, r2
 80054ae:	18d5      	adds	r5, r2, r3
 80054b0:	42ac      	cmp	r4, r5
 80054b2:	d101      	bne.n	80054b8 <__sfputs_r+0x12>
 80054b4:	2000      	movs	r0, #0
 80054b6:	e007      	b.n	80054c8 <__sfputs_r+0x22>
 80054b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054bc:	463a      	mov	r2, r7
 80054be:	4630      	mov	r0, r6
 80054c0:	f7ff ffda 	bl	8005478 <__sfputc_r>
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	d1f3      	bne.n	80054b0 <__sfputs_r+0xa>
 80054c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054cc <_vfiprintf_r>:
 80054cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d0:	460d      	mov	r5, r1
 80054d2:	b09d      	sub	sp, #116	@ 0x74
 80054d4:	4614      	mov	r4, r2
 80054d6:	4698      	mov	r8, r3
 80054d8:	4606      	mov	r6, r0
 80054da:	b118      	cbz	r0, 80054e4 <_vfiprintf_r+0x18>
 80054dc:	6a03      	ldr	r3, [r0, #32]
 80054de:	b90b      	cbnz	r3, 80054e4 <_vfiprintf_r+0x18>
 80054e0:	f7ff f968 	bl	80047b4 <__sinit>
 80054e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054e6:	07d9      	lsls	r1, r3, #31
 80054e8:	d405      	bmi.n	80054f6 <_vfiprintf_r+0x2a>
 80054ea:	89ab      	ldrh	r3, [r5, #12]
 80054ec:	059a      	lsls	r2, r3, #22
 80054ee:	d402      	bmi.n	80054f6 <_vfiprintf_r+0x2a>
 80054f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054f2:	f7ff fba2 	bl	8004c3a <__retarget_lock_acquire_recursive>
 80054f6:	89ab      	ldrh	r3, [r5, #12]
 80054f8:	071b      	lsls	r3, r3, #28
 80054fa:	d501      	bpl.n	8005500 <_vfiprintf_r+0x34>
 80054fc:	692b      	ldr	r3, [r5, #16]
 80054fe:	b99b      	cbnz	r3, 8005528 <_vfiprintf_r+0x5c>
 8005500:	4629      	mov	r1, r5
 8005502:	4630      	mov	r0, r6
 8005504:	f7ff faca 	bl	8004a9c <__swsetup_r>
 8005508:	b170      	cbz	r0, 8005528 <_vfiprintf_r+0x5c>
 800550a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800550c:	07dc      	lsls	r4, r3, #31
 800550e:	d504      	bpl.n	800551a <_vfiprintf_r+0x4e>
 8005510:	f04f 30ff 	mov.w	r0, #4294967295
 8005514:	b01d      	add	sp, #116	@ 0x74
 8005516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800551a:	89ab      	ldrh	r3, [r5, #12]
 800551c:	0598      	lsls	r0, r3, #22
 800551e:	d4f7      	bmi.n	8005510 <_vfiprintf_r+0x44>
 8005520:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005522:	f7ff fb8b 	bl	8004c3c <__retarget_lock_release_recursive>
 8005526:	e7f3      	b.n	8005510 <_vfiprintf_r+0x44>
 8005528:	2300      	movs	r3, #0
 800552a:	9309      	str	r3, [sp, #36]	@ 0x24
 800552c:	2320      	movs	r3, #32
 800552e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005532:	f8cd 800c 	str.w	r8, [sp, #12]
 8005536:	2330      	movs	r3, #48	@ 0x30
 8005538:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80056e8 <_vfiprintf_r+0x21c>
 800553c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005540:	f04f 0901 	mov.w	r9, #1
 8005544:	4623      	mov	r3, r4
 8005546:	469a      	mov	sl, r3
 8005548:	f813 2b01 	ldrb.w	r2, [r3], #1
 800554c:	b10a      	cbz	r2, 8005552 <_vfiprintf_r+0x86>
 800554e:	2a25      	cmp	r2, #37	@ 0x25
 8005550:	d1f9      	bne.n	8005546 <_vfiprintf_r+0x7a>
 8005552:	ebba 0b04 	subs.w	fp, sl, r4
 8005556:	d00b      	beq.n	8005570 <_vfiprintf_r+0xa4>
 8005558:	465b      	mov	r3, fp
 800555a:	4622      	mov	r2, r4
 800555c:	4629      	mov	r1, r5
 800555e:	4630      	mov	r0, r6
 8005560:	f7ff ffa1 	bl	80054a6 <__sfputs_r>
 8005564:	3001      	adds	r0, #1
 8005566:	f000 80a7 	beq.w	80056b8 <_vfiprintf_r+0x1ec>
 800556a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800556c:	445a      	add	r2, fp
 800556e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005570:	f89a 3000 	ldrb.w	r3, [sl]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 809f 	beq.w	80056b8 <_vfiprintf_r+0x1ec>
 800557a:	2300      	movs	r3, #0
 800557c:	f04f 32ff 	mov.w	r2, #4294967295
 8005580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005584:	f10a 0a01 	add.w	sl, sl, #1
 8005588:	9304      	str	r3, [sp, #16]
 800558a:	9307      	str	r3, [sp, #28]
 800558c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005590:	931a      	str	r3, [sp, #104]	@ 0x68
 8005592:	4654      	mov	r4, sl
 8005594:	2205      	movs	r2, #5
 8005596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800559a:	4853      	ldr	r0, [pc, #332]	@ (80056e8 <_vfiprintf_r+0x21c>)
 800559c:	f7fa fe40 	bl	8000220 <memchr>
 80055a0:	9a04      	ldr	r2, [sp, #16]
 80055a2:	b9d8      	cbnz	r0, 80055dc <_vfiprintf_r+0x110>
 80055a4:	06d1      	lsls	r1, r2, #27
 80055a6:	bf44      	itt	mi
 80055a8:	2320      	movmi	r3, #32
 80055aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055ae:	0713      	lsls	r3, r2, #28
 80055b0:	bf44      	itt	mi
 80055b2:	232b      	movmi	r3, #43	@ 0x2b
 80055b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055b8:	f89a 3000 	ldrb.w	r3, [sl]
 80055bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80055be:	d015      	beq.n	80055ec <_vfiprintf_r+0x120>
 80055c0:	9a07      	ldr	r2, [sp, #28]
 80055c2:	4654      	mov	r4, sl
 80055c4:	2000      	movs	r0, #0
 80055c6:	f04f 0c0a 	mov.w	ip, #10
 80055ca:	4621      	mov	r1, r4
 80055cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055d0:	3b30      	subs	r3, #48	@ 0x30
 80055d2:	2b09      	cmp	r3, #9
 80055d4:	d94b      	bls.n	800566e <_vfiprintf_r+0x1a2>
 80055d6:	b1b0      	cbz	r0, 8005606 <_vfiprintf_r+0x13a>
 80055d8:	9207      	str	r2, [sp, #28]
 80055da:	e014      	b.n	8005606 <_vfiprintf_r+0x13a>
 80055dc:	eba0 0308 	sub.w	r3, r0, r8
 80055e0:	fa09 f303 	lsl.w	r3, r9, r3
 80055e4:	4313      	orrs	r3, r2
 80055e6:	9304      	str	r3, [sp, #16]
 80055e8:	46a2      	mov	sl, r4
 80055ea:	e7d2      	b.n	8005592 <_vfiprintf_r+0xc6>
 80055ec:	9b03      	ldr	r3, [sp, #12]
 80055ee:	1d19      	adds	r1, r3, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	9103      	str	r1, [sp, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bfbb      	ittet	lt
 80055f8:	425b      	neglt	r3, r3
 80055fa:	f042 0202 	orrlt.w	r2, r2, #2
 80055fe:	9307      	strge	r3, [sp, #28]
 8005600:	9307      	strlt	r3, [sp, #28]
 8005602:	bfb8      	it	lt
 8005604:	9204      	strlt	r2, [sp, #16]
 8005606:	7823      	ldrb	r3, [r4, #0]
 8005608:	2b2e      	cmp	r3, #46	@ 0x2e
 800560a:	d10a      	bne.n	8005622 <_vfiprintf_r+0x156>
 800560c:	7863      	ldrb	r3, [r4, #1]
 800560e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005610:	d132      	bne.n	8005678 <_vfiprintf_r+0x1ac>
 8005612:	9b03      	ldr	r3, [sp, #12]
 8005614:	1d1a      	adds	r2, r3, #4
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	9203      	str	r2, [sp, #12]
 800561a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800561e:	3402      	adds	r4, #2
 8005620:	9305      	str	r3, [sp, #20]
 8005622:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80056f8 <_vfiprintf_r+0x22c>
 8005626:	7821      	ldrb	r1, [r4, #0]
 8005628:	2203      	movs	r2, #3
 800562a:	4650      	mov	r0, sl
 800562c:	f7fa fdf8 	bl	8000220 <memchr>
 8005630:	b138      	cbz	r0, 8005642 <_vfiprintf_r+0x176>
 8005632:	9b04      	ldr	r3, [sp, #16]
 8005634:	eba0 000a 	sub.w	r0, r0, sl
 8005638:	2240      	movs	r2, #64	@ 0x40
 800563a:	4082      	lsls	r2, r0
 800563c:	4313      	orrs	r3, r2
 800563e:	3401      	adds	r4, #1
 8005640:	9304      	str	r3, [sp, #16]
 8005642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005646:	4829      	ldr	r0, [pc, #164]	@ (80056ec <_vfiprintf_r+0x220>)
 8005648:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800564c:	2206      	movs	r2, #6
 800564e:	f7fa fde7 	bl	8000220 <memchr>
 8005652:	2800      	cmp	r0, #0
 8005654:	d03f      	beq.n	80056d6 <_vfiprintf_r+0x20a>
 8005656:	4b26      	ldr	r3, [pc, #152]	@ (80056f0 <_vfiprintf_r+0x224>)
 8005658:	bb1b      	cbnz	r3, 80056a2 <_vfiprintf_r+0x1d6>
 800565a:	9b03      	ldr	r3, [sp, #12]
 800565c:	3307      	adds	r3, #7
 800565e:	f023 0307 	bic.w	r3, r3, #7
 8005662:	3308      	adds	r3, #8
 8005664:	9303      	str	r3, [sp, #12]
 8005666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005668:	443b      	add	r3, r7
 800566a:	9309      	str	r3, [sp, #36]	@ 0x24
 800566c:	e76a      	b.n	8005544 <_vfiprintf_r+0x78>
 800566e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005672:	460c      	mov	r4, r1
 8005674:	2001      	movs	r0, #1
 8005676:	e7a8      	b.n	80055ca <_vfiprintf_r+0xfe>
 8005678:	2300      	movs	r3, #0
 800567a:	3401      	adds	r4, #1
 800567c:	9305      	str	r3, [sp, #20]
 800567e:	4619      	mov	r1, r3
 8005680:	f04f 0c0a 	mov.w	ip, #10
 8005684:	4620      	mov	r0, r4
 8005686:	f810 2b01 	ldrb.w	r2, [r0], #1
 800568a:	3a30      	subs	r2, #48	@ 0x30
 800568c:	2a09      	cmp	r2, #9
 800568e:	d903      	bls.n	8005698 <_vfiprintf_r+0x1cc>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0c6      	beq.n	8005622 <_vfiprintf_r+0x156>
 8005694:	9105      	str	r1, [sp, #20]
 8005696:	e7c4      	b.n	8005622 <_vfiprintf_r+0x156>
 8005698:	fb0c 2101 	mla	r1, ip, r1, r2
 800569c:	4604      	mov	r4, r0
 800569e:	2301      	movs	r3, #1
 80056a0:	e7f0      	b.n	8005684 <_vfiprintf_r+0x1b8>
 80056a2:	ab03      	add	r3, sp, #12
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	462a      	mov	r2, r5
 80056a8:	4b12      	ldr	r3, [pc, #72]	@ (80056f4 <_vfiprintf_r+0x228>)
 80056aa:	a904      	add	r1, sp, #16
 80056ac:	4630      	mov	r0, r6
 80056ae:	f3af 8000 	nop.w
 80056b2:	4607      	mov	r7, r0
 80056b4:	1c78      	adds	r0, r7, #1
 80056b6:	d1d6      	bne.n	8005666 <_vfiprintf_r+0x19a>
 80056b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056ba:	07d9      	lsls	r1, r3, #31
 80056bc:	d405      	bmi.n	80056ca <_vfiprintf_r+0x1fe>
 80056be:	89ab      	ldrh	r3, [r5, #12]
 80056c0:	059a      	lsls	r2, r3, #22
 80056c2:	d402      	bmi.n	80056ca <_vfiprintf_r+0x1fe>
 80056c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056c6:	f7ff fab9 	bl	8004c3c <__retarget_lock_release_recursive>
 80056ca:	89ab      	ldrh	r3, [r5, #12]
 80056cc:	065b      	lsls	r3, r3, #25
 80056ce:	f53f af1f 	bmi.w	8005510 <_vfiprintf_r+0x44>
 80056d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056d4:	e71e      	b.n	8005514 <_vfiprintf_r+0x48>
 80056d6:	ab03      	add	r3, sp, #12
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	462a      	mov	r2, r5
 80056dc:	4b05      	ldr	r3, [pc, #20]	@ (80056f4 <_vfiprintf_r+0x228>)
 80056de:	a904      	add	r1, sp, #16
 80056e0:	4630      	mov	r0, r6
 80056e2:	f000 f879 	bl	80057d8 <_printf_i>
 80056e6:	e7e4      	b.n	80056b2 <_vfiprintf_r+0x1e6>
 80056e8:	08006588 	.word	0x08006588
 80056ec:	08006592 	.word	0x08006592
 80056f0:	00000000 	.word	0x00000000
 80056f4:	080054a7 	.word	0x080054a7
 80056f8:	0800658e 	.word	0x0800658e

080056fc <_printf_common>:
 80056fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005700:	4616      	mov	r6, r2
 8005702:	4698      	mov	r8, r3
 8005704:	688a      	ldr	r2, [r1, #8]
 8005706:	690b      	ldr	r3, [r1, #16]
 8005708:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800570c:	4293      	cmp	r3, r2
 800570e:	bfb8      	it	lt
 8005710:	4613      	movlt	r3, r2
 8005712:	6033      	str	r3, [r6, #0]
 8005714:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005718:	4607      	mov	r7, r0
 800571a:	460c      	mov	r4, r1
 800571c:	b10a      	cbz	r2, 8005722 <_printf_common+0x26>
 800571e:	3301      	adds	r3, #1
 8005720:	6033      	str	r3, [r6, #0]
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	0699      	lsls	r1, r3, #26
 8005726:	bf42      	ittt	mi
 8005728:	6833      	ldrmi	r3, [r6, #0]
 800572a:	3302      	addmi	r3, #2
 800572c:	6033      	strmi	r3, [r6, #0]
 800572e:	6825      	ldr	r5, [r4, #0]
 8005730:	f015 0506 	ands.w	r5, r5, #6
 8005734:	d106      	bne.n	8005744 <_printf_common+0x48>
 8005736:	f104 0a19 	add.w	sl, r4, #25
 800573a:	68e3      	ldr	r3, [r4, #12]
 800573c:	6832      	ldr	r2, [r6, #0]
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	42ab      	cmp	r3, r5
 8005742:	dc26      	bgt.n	8005792 <_printf_common+0x96>
 8005744:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005748:	6822      	ldr	r2, [r4, #0]
 800574a:	3b00      	subs	r3, #0
 800574c:	bf18      	it	ne
 800574e:	2301      	movne	r3, #1
 8005750:	0692      	lsls	r2, r2, #26
 8005752:	d42b      	bmi.n	80057ac <_printf_common+0xb0>
 8005754:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005758:	4641      	mov	r1, r8
 800575a:	4638      	mov	r0, r7
 800575c:	47c8      	blx	r9
 800575e:	3001      	adds	r0, #1
 8005760:	d01e      	beq.n	80057a0 <_printf_common+0xa4>
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	6922      	ldr	r2, [r4, #16]
 8005766:	f003 0306 	and.w	r3, r3, #6
 800576a:	2b04      	cmp	r3, #4
 800576c:	bf02      	ittt	eq
 800576e:	68e5      	ldreq	r5, [r4, #12]
 8005770:	6833      	ldreq	r3, [r6, #0]
 8005772:	1aed      	subeq	r5, r5, r3
 8005774:	68a3      	ldr	r3, [r4, #8]
 8005776:	bf0c      	ite	eq
 8005778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800577c:	2500      	movne	r5, #0
 800577e:	4293      	cmp	r3, r2
 8005780:	bfc4      	itt	gt
 8005782:	1a9b      	subgt	r3, r3, r2
 8005784:	18ed      	addgt	r5, r5, r3
 8005786:	2600      	movs	r6, #0
 8005788:	341a      	adds	r4, #26
 800578a:	42b5      	cmp	r5, r6
 800578c:	d11a      	bne.n	80057c4 <_printf_common+0xc8>
 800578e:	2000      	movs	r0, #0
 8005790:	e008      	b.n	80057a4 <_printf_common+0xa8>
 8005792:	2301      	movs	r3, #1
 8005794:	4652      	mov	r2, sl
 8005796:	4641      	mov	r1, r8
 8005798:	4638      	mov	r0, r7
 800579a:	47c8      	blx	r9
 800579c:	3001      	adds	r0, #1
 800579e:	d103      	bne.n	80057a8 <_printf_common+0xac>
 80057a0:	f04f 30ff 	mov.w	r0, #4294967295
 80057a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a8:	3501      	adds	r5, #1
 80057aa:	e7c6      	b.n	800573a <_printf_common+0x3e>
 80057ac:	18e1      	adds	r1, r4, r3
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	2030      	movs	r0, #48	@ 0x30
 80057b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80057b6:	4422      	add	r2, r4
 80057b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80057bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80057c0:	3302      	adds	r3, #2
 80057c2:	e7c7      	b.n	8005754 <_printf_common+0x58>
 80057c4:	2301      	movs	r3, #1
 80057c6:	4622      	mov	r2, r4
 80057c8:	4641      	mov	r1, r8
 80057ca:	4638      	mov	r0, r7
 80057cc:	47c8      	blx	r9
 80057ce:	3001      	adds	r0, #1
 80057d0:	d0e6      	beq.n	80057a0 <_printf_common+0xa4>
 80057d2:	3601      	adds	r6, #1
 80057d4:	e7d9      	b.n	800578a <_printf_common+0x8e>
	...

080057d8 <_printf_i>:
 80057d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057dc:	7e0f      	ldrb	r7, [r1, #24]
 80057de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057e0:	2f78      	cmp	r7, #120	@ 0x78
 80057e2:	4691      	mov	r9, r2
 80057e4:	4680      	mov	r8, r0
 80057e6:	460c      	mov	r4, r1
 80057e8:	469a      	mov	sl, r3
 80057ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057ee:	d807      	bhi.n	8005800 <_printf_i+0x28>
 80057f0:	2f62      	cmp	r7, #98	@ 0x62
 80057f2:	d80a      	bhi.n	800580a <_printf_i+0x32>
 80057f4:	2f00      	cmp	r7, #0
 80057f6:	f000 80d2 	beq.w	800599e <_printf_i+0x1c6>
 80057fa:	2f58      	cmp	r7, #88	@ 0x58
 80057fc:	f000 80b9 	beq.w	8005972 <_printf_i+0x19a>
 8005800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005804:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005808:	e03a      	b.n	8005880 <_printf_i+0xa8>
 800580a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800580e:	2b15      	cmp	r3, #21
 8005810:	d8f6      	bhi.n	8005800 <_printf_i+0x28>
 8005812:	a101      	add	r1, pc, #4	@ (adr r1, 8005818 <_printf_i+0x40>)
 8005814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005818:	08005871 	.word	0x08005871
 800581c:	08005885 	.word	0x08005885
 8005820:	08005801 	.word	0x08005801
 8005824:	08005801 	.word	0x08005801
 8005828:	08005801 	.word	0x08005801
 800582c:	08005801 	.word	0x08005801
 8005830:	08005885 	.word	0x08005885
 8005834:	08005801 	.word	0x08005801
 8005838:	08005801 	.word	0x08005801
 800583c:	08005801 	.word	0x08005801
 8005840:	08005801 	.word	0x08005801
 8005844:	08005985 	.word	0x08005985
 8005848:	080058af 	.word	0x080058af
 800584c:	0800593f 	.word	0x0800593f
 8005850:	08005801 	.word	0x08005801
 8005854:	08005801 	.word	0x08005801
 8005858:	080059a7 	.word	0x080059a7
 800585c:	08005801 	.word	0x08005801
 8005860:	080058af 	.word	0x080058af
 8005864:	08005801 	.word	0x08005801
 8005868:	08005801 	.word	0x08005801
 800586c:	08005947 	.word	0x08005947
 8005870:	6833      	ldr	r3, [r6, #0]
 8005872:	1d1a      	adds	r2, r3, #4
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6032      	str	r2, [r6, #0]
 8005878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800587c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005880:	2301      	movs	r3, #1
 8005882:	e09d      	b.n	80059c0 <_printf_i+0x1e8>
 8005884:	6833      	ldr	r3, [r6, #0]
 8005886:	6820      	ldr	r0, [r4, #0]
 8005888:	1d19      	adds	r1, r3, #4
 800588a:	6031      	str	r1, [r6, #0]
 800588c:	0606      	lsls	r6, r0, #24
 800588e:	d501      	bpl.n	8005894 <_printf_i+0xbc>
 8005890:	681d      	ldr	r5, [r3, #0]
 8005892:	e003      	b.n	800589c <_printf_i+0xc4>
 8005894:	0645      	lsls	r5, r0, #25
 8005896:	d5fb      	bpl.n	8005890 <_printf_i+0xb8>
 8005898:	f9b3 5000 	ldrsh.w	r5, [r3]
 800589c:	2d00      	cmp	r5, #0
 800589e:	da03      	bge.n	80058a8 <_printf_i+0xd0>
 80058a0:	232d      	movs	r3, #45	@ 0x2d
 80058a2:	426d      	negs	r5, r5
 80058a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058a8:	4859      	ldr	r0, [pc, #356]	@ (8005a10 <_printf_i+0x238>)
 80058aa:	230a      	movs	r3, #10
 80058ac:	e011      	b.n	80058d2 <_printf_i+0xfa>
 80058ae:	6821      	ldr	r1, [r4, #0]
 80058b0:	6833      	ldr	r3, [r6, #0]
 80058b2:	0608      	lsls	r0, r1, #24
 80058b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80058b8:	d402      	bmi.n	80058c0 <_printf_i+0xe8>
 80058ba:	0649      	lsls	r1, r1, #25
 80058bc:	bf48      	it	mi
 80058be:	b2ad      	uxthmi	r5, r5
 80058c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80058c2:	4853      	ldr	r0, [pc, #332]	@ (8005a10 <_printf_i+0x238>)
 80058c4:	6033      	str	r3, [r6, #0]
 80058c6:	bf14      	ite	ne
 80058c8:	230a      	movne	r3, #10
 80058ca:	2308      	moveq	r3, #8
 80058cc:	2100      	movs	r1, #0
 80058ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80058d2:	6866      	ldr	r6, [r4, #4]
 80058d4:	60a6      	str	r6, [r4, #8]
 80058d6:	2e00      	cmp	r6, #0
 80058d8:	bfa2      	ittt	ge
 80058da:	6821      	ldrge	r1, [r4, #0]
 80058dc:	f021 0104 	bicge.w	r1, r1, #4
 80058e0:	6021      	strge	r1, [r4, #0]
 80058e2:	b90d      	cbnz	r5, 80058e8 <_printf_i+0x110>
 80058e4:	2e00      	cmp	r6, #0
 80058e6:	d04b      	beq.n	8005980 <_printf_i+0x1a8>
 80058e8:	4616      	mov	r6, r2
 80058ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80058ee:	fb03 5711 	mls	r7, r3, r1, r5
 80058f2:	5dc7      	ldrb	r7, [r0, r7]
 80058f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058f8:	462f      	mov	r7, r5
 80058fa:	42bb      	cmp	r3, r7
 80058fc:	460d      	mov	r5, r1
 80058fe:	d9f4      	bls.n	80058ea <_printf_i+0x112>
 8005900:	2b08      	cmp	r3, #8
 8005902:	d10b      	bne.n	800591c <_printf_i+0x144>
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	07df      	lsls	r7, r3, #31
 8005908:	d508      	bpl.n	800591c <_printf_i+0x144>
 800590a:	6923      	ldr	r3, [r4, #16]
 800590c:	6861      	ldr	r1, [r4, #4]
 800590e:	4299      	cmp	r1, r3
 8005910:	bfde      	ittt	le
 8005912:	2330      	movle	r3, #48	@ 0x30
 8005914:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005918:	f106 36ff 	addle.w	r6, r6, #4294967295
 800591c:	1b92      	subs	r2, r2, r6
 800591e:	6122      	str	r2, [r4, #16]
 8005920:	f8cd a000 	str.w	sl, [sp]
 8005924:	464b      	mov	r3, r9
 8005926:	aa03      	add	r2, sp, #12
 8005928:	4621      	mov	r1, r4
 800592a:	4640      	mov	r0, r8
 800592c:	f7ff fee6 	bl	80056fc <_printf_common>
 8005930:	3001      	adds	r0, #1
 8005932:	d14a      	bne.n	80059ca <_printf_i+0x1f2>
 8005934:	f04f 30ff 	mov.w	r0, #4294967295
 8005938:	b004      	add	sp, #16
 800593a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	f043 0320 	orr.w	r3, r3, #32
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	4833      	ldr	r0, [pc, #204]	@ (8005a14 <_printf_i+0x23c>)
 8005948:	2778      	movs	r7, #120	@ 0x78
 800594a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	6831      	ldr	r1, [r6, #0]
 8005952:	061f      	lsls	r7, r3, #24
 8005954:	f851 5b04 	ldr.w	r5, [r1], #4
 8005958:	d402      	bmi.n	8005960 <_printf_i+0x188>
 800595a:	065f      	lsls	r7, r3, #25
 800595c:	bf48      	it	mi
 800595e:	b2ad      	uxthmi	r5, r5
 8005960:	6031      	str	r1, [r6, #0]
 8005962:	07d9      	lsls	r1, r3, #31
 8005964:	bf44      	itt	mi
 8005966:	f043 0320 	orrmi.w	r3, r3, #32
 800596a:	6023      	strmi	r3, [r4, #0]
 800596c:	b11d      	cbz	r5, 8005976 <_printf_i+0x19e>
 800596e:	2310      	movs	r3, #16
 8005970:	e7ac      	b.n	80058cc <_printf_i+0xf4>
 8005972:	4827      	ldr	r0, [pc, #156]	@ (8005a10 <_printf_i+0x238>)
 8005974:	e7e9      	b.n	800594a <_printf_i+0x172>
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	f023 0320 	bic.w	r3, r3, #32
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	e7f6      	b.n	800596e <_printf_i+0x196>
 8005980:	4616      	mov	r6, r2
 8005982:	e7bd      	b.n	8005900 <_printf_i+0x128>
 8005984:	6833      	ldr	r3, [r6, #0]
 8005986:	6825      	ldr	r5, [r4, #0]
 8005988:	6961      	ldr	r1, [r4, #20]
 800598a:	1d18      	adds	r0, r3, #4
 800598c:	6030      	str	r0, [r6, #0]
 800598e:	062e      	lsls	r6, r5, #24
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	d501      	bpl.n	8005998 <_printf_i+0x1c0>
 8005994:	6019      	str	r1, [r3, #0]
 8005996:	e002      	b.n	800599e <_printf_i+0x1c6>
 8005998:	0668      	lsls	r0, r5, #25
 800599a:	d5fb      	bpl.n	8005994 <_printf_i+0x1bc>
 800599c:	8019      	strh	r1, [r3, #0]
 800599e:	2300      	movs	r3, #0
 80059a0:	6123      	str	r3, [r4, #16]
 80059a2:	4616      	mov	r6, r2
 80059a4:	e7bc      	b.n	8005920 <_printf_i+0x148>
 80059a6:	6833      	ldr	r3, [r6, #0]
 80059a8:	1d1a      	adds	r2, r3, #4
 80059aa:	6032      	str	r2, [r6, #0]
 80059ac:	681e      	ldr	r6, [r3, #0]
 80059ae:	6862      	ldr	r2, [r4, #4]
 80059b0:	2100      	movs	r1, #0
 80059b2:	4630      	mov	r0, r6
 80059b4:	f7fa fc34 	bl	8000220 <memchr>
 80059b8:	b108      	cbz	r0, 80059be <_printf_i+0x1e6>
 80059ba:	1b80      	subs	r0, r0, r6
 80059bc:	6060      	str	r0, [r4, #4]
 80059be:	6863      	ldr	r3, [r4, #4]
 80059c0:	6123      	str	r3, [r4, #16]
 80059c2:	2300      	movs	r3, #0
 80059c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059c8:	e7aa      	b.n	8005920 <_printf_i+0x148>
 80059ca:	6923      	ldr	r3, [r4, #16]
 80059cc:	4632      	mov	r2, r6
 80059ce:	4649      	mov	r1, r9
 80059d0:	4640      	mov	r0, r8
 80059d2:	47d0      	blx	sl
 80059d4:	3001      	adds	r0, #1
 80059d6:	d0ad      	beq.n	8005934 <_printf_i+0x15c>
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	079b      	lsls	r3, r3, #30
 80059dc:	d413      	bmi.n	8005a06 <_printf_i+0x22e>
 80059de:	68e0      	ldr	r0, [r4, #12]
 80059e0:	9b03      	ldr	r3, [sp, #12]
 80059e2:	4298      	cmp	r0, r3
 80059e4:	bfb8      	it	lt
 80059e6:	4618      	movlt	r0, r3
 80059e8:	e7a6      	b.n	8005938 <_printf_i+0x160>
 80059ea:	2301      	movs	r3, #1
 80059ec:	4632      	mov	r2, r6
 80059ee:	4649      	mov	r1, r9
 80059f0:	4640      	mov	r0, r8
 80059f2:	47d0      	blx	sl
 80059f4:	3001      	adds	r0, #1
 80059f6:	d09d      	beq.n	8005934 <_printf_i+0x15c>
 80059f8:	3501      	adds	r5, #1
 80059fa:	68e3      	ldr	r3, [r4, #12]
 80059fc:	9903      	ldr	r1, [sp, #12]
 80059fe:	1a5b      	subs	r3, r3, r1
 8005a00:	42ab      	cmp	r3, r5
 8005a02:	dcf2      	bgt.n	80059ea <_printf_i+0x212>
 8005a04:	e7eb      	b.n	80059de <_printf_i+0x206>
 8005a06:	2500      	movs	r5, #0
 8005a08:	f104 0619 	add.w	r6, r4, #25
 8005a0c:	e7f5      	b.n	80059fa <_printf_i+0x222>
 8005a0e:	bf00      	nop
 8005a10:	08006599 	.word	0x08006599
 8005a14:	080065aa 	.word	0x080065aa

08005a18 <_scanf_chars>:
 8005a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a1c:	4615      	mov	r5, r2
 8005a1e:	688a      	ldr	r2, [r1, #8]
 8005a20:	4680      	mov	r8, r0
 8005a22:	460c      	mov	r4, r1
 8005a24:	b932      	cbnz	r2, 8005a34 <_scanf_chars+0x1c>
 8005a26:	698a      	ldr	r2, [r1, #24]
 8005a28:	2a00      	cmp	r2, #0
 8005a2a:	bf14      	ite	ne
 8005a2c:	f04f 32ff 	movne.w	r2, #4294967295
 8005a30:	2201      	moveq	r2, #1
 8005a32:	608a      	str	r2, [r1, #8]
 8005a34:	6822      	ldr	r2, [r4, #0]
 8005a36:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8005ac8 <_scanf_chars+0xb0>
 8005a3a:	06d1      	lsls	r1, r2, #27
 8005a3c:	bf5f      	itttt	pl
 8005a3e:	681a      	ldrpl	r2, [r3, #0]
 8005a40:	1d11      	addpl	r1, r2, #4
 8005a42:	6019      	strpl	r1, [r3, #0]
 8005a44:	6816      	ldrpl	r6, [r2, #0]
 8005a46:	2700      	movs	r7, #0
 8005a48:	69a0      	ldr	r0, [r4, #24]
 8005a4a:	b188      	cbz	r0, 8005a70 <_scanf_chars+0x58>
 8005a4c:	2801      	cmp	r0, #1
 8005a4e:	d107      	bne.n	8005a60 <_scanf_chars+0x48>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	781a      	ldrb	r2, [r3, #0]
 8005a54:	6963      	ldr	r3, [r4, #20]
 8005a56:	5c9b      	ldrb	r3, [r3, r2]
 8005a58:	b953      	cbnz	r3, 8005a70 <_scanf_chars+0x58>
 8005a5a:	2f00      	cmp	r7, #0
 8005a5c:	d031      	beq.n	8005ac2 <_scanf_chars+0xaa>
 8005a5e:	e022      	b.n	8005aa6 <_scanf_chars+0x8e>
 8005a60:	2802      	cmp	r0, #2
 8005a62:	d120      	bne.n	8005aa6 <_scanf_chars+0x8e>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005a6c:	071b      	lsls	r3, r3, #28
 8005a6e:	d41a      	bmi.n	8005aa6 <_scanf_chars+0x8e>
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	06da      	lsls	r2, r3, #27
 8005a74:	bf5e      	ittt	pl
 8005a76:	682b      	ldrpl	r3, [r5, #0]
 8005a78:	781b      	ldrbpl	r3, [r3, #0]
 8005a7a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005a7e:	682a      	ldr	r2, [r5, #0]
 8005a80:	686b      	ldr	r3, [r5, #4]
 8005a82:	3201      	adds	r2, #1
 8005a84:	602a      	str	r2, [r5, #0]
 8005a86:	68a2      	ldr	r2, [r4, #8]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	3a01      	subs	r2, #1
 8005a8c:	606b      	str	r3, [r5, #4]
 8005a8e:	3701      	adds	r7, #1
 8005a90:	60a2      	str	r2, [r4, #8]
 8005a92:	b142      	cbz	r2, 8005aa6 <_scanf_chars+0x8e>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	dcd7      	bgt.n	8005a48 <_scanf_chars+0x30>
 8005a98:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	4640      	mov	r0, r8
 8005aa0:	4798      	blx	r3
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d0d0      	beq.n	8005a48 <_scanf_chars+0x30>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	f013 0310 	ands.w	r3, r3, #16
 8005aac:	d105      	bne.n	8005aba <_scanf_chars+0xa2>
 8005aae:	68e2      	ldr	r2, [r4, #12]
 8005ab0:	3201      	adds	r2, #1
 8005ab2:	60e2      	str	r2, [r4, #12]
 8005ab4:	69a2      	ldr	r2, [r4, #24]
 8005ab6:	b102      	cbz	r2, 8005aba <_scanf_chars+0xa2>
 8005ab8:	7033      	strb	r3, [r6, #0]
 8005aba:	6923      	ldr	r3, [r4, #16]
 8005abc:	443b      	add	r3, r7
 8005abe:	6123      	str	r3, [r4, #16]
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ac6:	bf00      	nop
 8005ac8:	080065d7 	.word	0x080065d7

08005acc <_scanf_i>:
 8005acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad0:	4698      	mov	r8, r3
 8005ad2:	4b74      	ldr	r3, [pc, #464]	@ (8005ca4 <_scanf_i+0x1d8>)
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	4682      	mov	sl, r0
 8005ad8:	4616      	mov	r6, r2
 8005ada:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	ab03      	add	r3, sp, #12
 8005ae2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005ae6:	4b70      	ldr	r3, [pc, #448]	@ (8005ca8 <_scanf_i+0x1dc>)
 8005ae8:	69a1      	ldr	r1, [r4, #24]
 8005aea:	4a70      	ldr	r2, [pc, #448]	@ (8005cac <_scanf_i+0x1e0>)
 8005aec:	2903      	cmp	r1, #3
 8005aee:	bf08      	it	eq
 8005af0:	461a      	moveq	r2, r3
 8005af2:	68a3      	ldr	r3, [r4, #8]
 8005af4:	9201      	str	r2, [sp, #4]
 8005af6:	1e5a      	subs	r2, r3, #1
 8005af8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005afc:	bf88      	it	hi
 8005afe:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005b02:	4627      	mov	r7, r4
 8005b04:	bf82      	ittt	hi
 8005b06:	eb03 0905 	addhi.w	r9, r3, r5
 8005b0a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005b0e:	60a3      	strhi	r3, [r4, #8]
 8005b10:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005b14:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8005b18:	bf98      	it	ls
 8005b1a:	f04f 0900 	movls.w	r9, #0
 8005b1e:	6023      	str	r3, [r4, #0]
 8005b20:	463d      	mov	r5, r7
 8005b22:	f04f 0b00 	mov.w	fp, #0
 8005b26:	6831      	ldr	r1, [r6, #0]
 8005b28:	ab03      	add	r3, sp, #12
 8005b2a:	7809      	ldrb	r1, [r1, #0]
 8005b2c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005b30:	2202      	movs	r2, #2
 8005b32:	f7fa fb75 	bl	8000220 <memchr>
 8005b36:	b328      	cbz	r0, 8005b84 <_scanf_i+0xb8>
 8005b38:	f1bb 0f01 	cmp.w	fp, #1
 8005b3c:	d159      	bne.n	8005bf2 <_scanf_i+0x126>
 8005b3e:	6862      	ldr	r2, [r4, #4]
 8005b40:	b92a      	cbnz	r2, 8005b4e <_scanf_i+0x82>
 8005b42:	6822      	ldr	r2, [r4, #0]
 8005b44:	2108      	movs	r1, #8
 8005b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b4a:	6061      	str	r1, [r4, #4]
 8005b4c:	6022      	str	r2, [r4, #0]
 8005b4e:	6822      	ldr	r2, [r4, #0]
 8005b50:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8005b54:	6022      	str	r2, [r4, #0]
 8005b56:	68a2      	ldr	r2, [r4, #8]
 8005b58:	1e51      	subs	r1, r2, #1
 8005b5a:	60a1      	str	r1, [r4, #8]
 8005b5c:	b192      	cbz	r2, 8005b84 <_scanf_i+0xb8>
 8005b5e:	6832      	ldr	r2, [r6, #0]
 8005b60:	1c51      	adds	r1, r2, #1
 8005b62:	6031      	str	r1, [r6, #0]
 8005b64:	7812      	ldrb	r2, [r2, #0]
 8005b66:	f805 2b01 	strb.w	r2, [r5], #1
 8005b6a:	6872      	ldr	r2, [r6, #4]
 8005b6c:	3a01      	subs	r2, #1
 8005b6e:	2a00      	cmp	r2, #0
 8005b70:	6072      	str	r2, [r6, #4]
 8005b72:	dc07      	bgt.n	8005b84 <_scanf_i+0xb8>
 8005b74:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8005b78:	4631      	mov	r1, r6
 8005b7a:	4650      	mov	r0, sl
 8005b7c:	4790      	blx	r2
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	f040 8085 	bne.w	8005c8e <_scanf_i+0x1c2>
 8005b84:	f10b 0b01 	add.w	fp, fp, #1
 8005b88:	f1bb 0f03 	cmp.w	fp, #3
 8005b8c:	d1cb      	bne.n	8005b26 <_scanf_i+0x5a>
 8005b8e:	6863      	ldr	r3, [r4, #4]
 8005b90:	b90b      	cbnz	r3, 8005b96 <_scanf_i+0xca>
 8005b92:	230a      	movs	r3, #10
 8005b94:	6063      	str	r3, [r4, #4]
 8005b96:	6863      	ldr	r3, [r4, #4]
 8005b98:	4945      	ldr	r1, [pc, #276]	@ (8005cb0 <_scanf_i+0x1e4>)
 8005b9a:	6960      	ldr	r0, [r4, #20]
 8005b9c:	1ac9      	subs	r1, r1, r3
 8005b9e:	f000 f997 	bl	8005ed0 <__sccl>
 8005ba2:	f04f 0b00 	mov.w	fp, #0
 8005ba6:	68a3      	ldr	r3, [r4, #8]
 8005ba8:	6822      	ldr	r2, [r4, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d03d      	beq.n	8005c2a <_scanf_i+0x15e>
 8005bae:	6831      	ldr	r1, [r6, #0]
 8005bb0:	6960      	ldr	r0, [r4, #20]
 8005bb2:	f891 c000 	ldrb.w	ip, [r1]
 8005bb6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	d035      	beq.n	8005c2a <_scanf_i+0x15e>
 8005bbe:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8005bc2:	d124      	bne.n	8005c0e <_scanf_i+0x142>
 8005bc4:	0510      	lsls	r0, r2, #20
 8005bc6:	d522      	bpl.n	8005c0e <_scanf_i+0x142>
 8005bc8:	f10b 0b01 	add.w	fp, fp, #1
 8005bcc:	f1b9 0f00 	cmp.w	r9, #0
 8005bd0:	d003      	beq.n	8005bda <_scanf_i+0x10e>
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	f109 39ff 	add.w	r9, r9, #4294967295
 8005bd8:	60a3      	str	r3, [r4, #8]
 8005bda:	6873      	ldr	r3, [r6, #4]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	6073      	str	r3, [r6, #4]
 8005be2:	dd1b      	ble.n	8005c1c <_scanf_i+0x150>
 8005be4:	6833      	ldr	r3, [r6, #0]
 8005be6:	3301      	adds	r3, #1
 8005be8:	6033      	str	r3, [r6, #0]
 8005bea:	68a3      	ldr	r3, [r4, #8]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	60a3      	str	r3, [r4, #8]
 8005bf0:	e7d9      	b.n	8005ba6 <_scanf_i+0xda>
 8005bf2:	f1bb 0f02 	cmp.w	fp, #2
 8005bf6:	d1ae      	bne.n	8005b56 <_scanf_i+0x8a>
 8005bf8:	6822      	ldr	r2, [r4, #0]
 8005bfa:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8005bfe:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005c02:	d1bf      	bne.n	8005b84 <_scanf_i+0xb8>
 8005c04:	2110      	movs	r1, #16
 8005c06:	6061      	str	r1, [r4, #4]
 8005c08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c0c:	e7a2      	b.n	8005b54 <_scanf_i+0x88>
 8005c0e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8005c12:	6022      	str	r2, [r4, #0]
 8005c14:	780b      	ldrb	r3, [r1, #0]
 8005c16:	f805 3b01 	strb.w	r3, [r5], #1
 8005c1a:	e7de      	b.n	8005bda <_scanf_i+0x10e>
 8005c1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005c20:	4631      	mov	r1, r6
 8005c22:	4650      	mov	r0, sl
 8005c24:	4798      	blx	r3
 8005c26:	2800      	cmp	r0, #0
 8005c28:	d0df      	beq.n	8005bea <_scanf_i+0x11e>
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	05d9      	lsls	r1, r3, #23
 8005c2e:	d50d      	bpl.n	8005c4c <_scanf_i+0x180>
 8005c30:	42bd      	cmp	r5, r7
 8005c32:	d909      	bls.n	8005c48 <_scanf_i+0x17c>
 8005c34:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005c38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c3c:	4632      	mov	r2, r6
 8005c3e:	4650      	mov	r0, sl
 8005c40:	4798      	blx	r3
 8005c42:	f105 39ff 	add.w	r9, r5, #4294967295
 8005c46:	464d      	mov	r5, r9
 8005c48:	42bd      	cmp	r5, r7
 8005c4a:	d028      	beq.n	8005c9e <_scanf_i+0x1d2>
 8005c4c:	6822      	ldr	r2, [r4, #0]
 8005c4e:	f012 0210 	ands.w	r2, r2, #16
 8005c52:	d113      	bne.n	8005c7c <_scanf_i+0x1b0>
 8005c54:	702a      	strb	r2, [r5, #0]
 8005c56:	6863      	ldr	r3, [r4, #4]
 8005c58:	9e01      	ldr	r6, [sp, #4]
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	4650      	mov	r0, sl
 8005c5e:	47b0      	blx	r6
 8005c60:	f8d8 3000 	ldr.w	r3, [r8]
 8005c64:	6821      	ldr	r1, [r4, #0]
 8005c66:	1d1a      	adds	r2, r3, #4
 8005c68:	f8c8 2000 	str.w	r2, [r8]
 8005c6c:	f011 0f20 	tst.w	r1, #32
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	d00f      	beq.n	8005c94 <_scanf_i+0x1c8>
 8005c74:	6018      	str	r0, [r3, #0]
 8005c76:	68e3      	ldr	r3, [r4, #12]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	60e3      	str	r3, [r4, #12]
 8005c7c:	6923      	ldr	r3, [r4, #16]
 8005c7e:	1bed      	subs	r5, r5, r7
 8005c80:	445d      	add	r5, fp
 8005c82:	442b      	add	r3, r5
 8005c84:	6123      	str	r3, [r4, #16]
 8005c86:	2000      	movs	r0, #0
 8005c88:	b007      	add	sp, #28
 8005c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8e:	f04f 0b00 	mov.w	fp, #0
 8005c92:	e7ca      	b.n	8005c2a <_scanf_i+0x15e>
 8005c94:	07ca      	lsls	r2, r1, #31
 8005c96:	bf4c      	ite	mi
 8005c98:	8018      	strhmi	r0, [r3, #0]
 8005c9a:	6018      	strpl	r0, [r3, #0]
 8005c9c:	e7eb      	b.n	8005c76 <_scanf_i+0x1aa>
 8005c9e:	2001      	movs	r0, #1
 8005ca0:	e7f2      	b.n	8005c88 <_scanf_i+0x1bc>
 8005ca2:	bf00      	nop
 8005ca4:	08006534 	.word	0x08006534
 8005ca8:	080061bd 	.word	0x080061bd
 8005cac:	0800629d 	.word	0x0800629d
 8005cb0:	080065cb 	.word	0x080065cb

08005cb4 <__sflush_r>:
 8005cb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cbc:	0716      	lsls	r6, r2, #28
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	460c      	mov	r4, r1
 8005cc2:	d454      	bmi.n	8005d6e <__sflush_r+0xba>
 8005cc4:	684b      	ldr	r3, [r1, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	dc02      	bgt.n	8005cd0 <__sflush_r+0x1c>
 8005cca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	dd48      	ble.n	8005d62 <__sflush_r+0xae>
 8005cd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cd2:	2e00      	cmp	r6, #0
 8005cd4:	d045      	beq.n	8005d62 <__sflush_r+0xae>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005cdc:	682f      	ldr	r7, [r5, #0]
 8005cde:	6a21      	ldr	r1, [r4, #32]
 8005ce0:	602b      	str	r3, [r5, #0]
 8005ce2:	d030      	beq.n	8005d46 <__sflush_r+0x92>
 8005ce4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ce6:	89a3      	ldrh	r3, [r4, #12]
 8005ce8:	0759      	lsls	r1, r3, #29
 8005cea:	d505      	bpl.n	8005cf8 <__sflush_r+0x44>
 8005cec:	6863      	ldr	r3, [r4, #4]
 8005cee:	1ad2      	subs	r2, r2, r3
 8005cf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005cf2:	b10b      	cbz	r3, 8005cf8 <__sflush_r+0x44>
 8005cf4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005cf6:	1ad2      	subs	r2, r2, r3
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cfc:	6a21      	ldr	r1, [r4, #32]
 8005cfe:	4628      	mov	r0, r5
 8005d00:	47b0      	blx	r6
 8005d02:	1c43      	adds	r3, r0, #1
 8005d04:	89a3      	ldrh	r3, [r4, #12]
 8005d06:	d106      	bne.n	8005d16 <__sflush_r+0x62>
 8005d08:	6829      	ldr	r1, [r5, #0]
 8005d0a:	291d      	cmp	r1, #29
 8005d0c:	d82b      	bhi.n	8005d66 <__sflush_r+0xb2>
 8005d0e:	4a2a      	ldr	r2, [pc, #168]	@ (8005db8 <__sflush_r+0x104>)
 8005d10:	410a      	asrs	r2, r1
 8005d12:	07d6      	lsls	r6, r2, #31
 8005d14:	d427      	bmi.n	8005d66 <__sflush_r+0xb2>
 8005d16:	2200      	movs	r2, #0
 8005d18:	6062      	str	r2, [r4, #4]
 8005d1a:	04d9      	lsls	r1, r3, #19
 8005d1c:	6922      	ldr	r2, [r4, #16]
 8005d1e:	6022      	str	r2, [r4, #0]
 8005d20:	d504      	bpl.n	8005d2c <__sflush_r+0x78>
 8005d22:	1c42      	adds	r2, r0, #1
 8005d24:	d101      	bne.n	8005d2a <__sflush_r+0x76>
 8005d26:	682b      	ldr	r3, [r5, #0]
 8005d28:	b903      	cbnz	r3, 8005d2c <__sflush_r+0x78>
 8005d2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d2e:	602f      	str	r7, [r5, #0]
 8005d30:	b1b9      	cbz	r1, 8005d62 <__sflush_r+0xae>
 8005d32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d36:	4299      	cmp	r1, r3
 8005d38:	d002      	beq.n	8005d40 <__sflush_r+0x8c>
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f7fe ff80 	bl	8004c40 <_free_r>
 8005d40:	2300      	movs	r3, #0
 8005d42:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d44:	e00d      	b.n	8005d62 <__sflush_r+0xae>
 8005d46:	2301      	movs	r3, #1
 8005d48:	4628      	mov	r0, r5
 8005d4a:	47b0      	blx	r6
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	1c50      	adds	r0, r2, #1
 8005d50:	d1c9      	bne.n	8005ce6 <__sflush_r+0x32>
 8005d52:	682b      	ldr	r3, [r5, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0c6      	beq.n	8005ce6 <__sflush_r+0x32>
 8005d58:	2b1d      	cmp	r3, #29
 8005d5a:	d001      	beq.n	8005d60 <__sflush_r+0xac>
 8005d5c:	2b16      	cmp	r3, #22
 8005d5e:	d11e      	bne.n	8005d9e <__sflush_r+0xea>
 8005d60:	602f      	str	r7, [r5, #0]
 8005d62:	2000      	movs	r0, #0
 8005d64:	e022      	b.n	8005dac <__sflush_r+0xf8>
 8005d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d6a:	b21b      	sxth	r3, r3
 8005d6c:	e01b      	b.n	8005da6 <__sflush_r+0xf2>
 8005d6e:	690f      	ldr	r7, [r1, #16]
 8005d70:	2f00      	cmp	r7, #0
 8005d72:	d0f6      	beq.n	8005d62 <__sflush_r+0xae>
 8005d74:	0793      	lsls	r3, r2, #30
 8005d76:	680e      	ldr	r6, [r1, #0]
 8005d78:	bf08      	it	eq
 8005d7a:	694b      	ldreq	r3, [r1, #20]
 8005d7c:	600f      	str	r7, [r1, #0]
 8005d7e:	bf18      	it	ne
 8005d80:	2300      	movne	r3, #0
 8005d82:	eba6 0807 	sub.w	r8, r6, r7
 8005d86:	608b      	str	r3, [r1, #8]
 8005d88:	f1b8 0f00 	cmp.w	r8, #0
 8005d8c:	dde9      	ble.n	8005d62 <__sflush_r+0xae>
 8005d8e:	6a21      	ldr	r1, [r4, #32]
 8005d90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005d92:	4643      	mov	r3, r8
 8005d94:	463a      	mov	r2, r7
 8005d96:	4628      	mov	r0, r5
 8005d98:	47b0      	blx	r6
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	dc08      	bgt.n	8005db0 <__sflush_r+0xfc>
 8005d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005da2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005da6:	81a3      	strh	r3, [r4, #12]
 8005da8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005db0:	4407      	add	r7, r0
 8005db2:	eba8 0800 	sub.w	r8, r8, r0
 8005db6:	e7e7      	b.n	8005d88 <__sflush_r+0xd4>
 8005db8:	dfbffffe 	.word	0xdfbffffe

08005dbc <_fflush_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	690b      	ldr	r3, [r1, #16]
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	b913      	cbnz	r3, 8005dcc <_fflush_r+0x10>
 8005dc6:	2500      	movs	r5, #0
 8005dc8:	4628      	mov	r0, r5
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	b118      	cbz	r0, 8005dd6 <_fflush_r+0x1a>
 8005dce:	6a03      	ldr	r3, [r0, #32]
 8005dd0:	b90b      	cbnz	r3, 8005dd6 <_fflush_r+0x1a>
 8005dd2:	f7fe fcef 	bl	80047b4 <__sinit>
 8005dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0f3      	beq.n	8005dc6 <_fflush_r+0xa>
 8005dde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005de0:	07d0      	lsls	r0, r2, #31
 8005de2:	d404      	bmi.n	8005dee <_fflush_r+0x32>
 8005de4:	0599      	lsls	r1, r3, #22
 8005de6:	d402      	bmi.n	8005dee <_fflush_r+0x32>
 8005de8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dea:	f7fe ff26 	bl	8004c3a <__retarget_lock_acquire_recursive>
 8005dee:	4628      	mov	r0, r5
 8005df0:	4621      	mov	r1, r4
 8005df2:	f7ff ff5f 	bl	8005cb4 <__sflush_r>
 8005df6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005df8:	07da      	lsls	r2, r3, #31
 8005dfa:	4605      	mov	r5, r0
 8005dfc:	d4e4      	bmi.n	8005dc8 <_fflush_r+0xc>
 8005dfe:	89a3      	ldrh	r3, [r4, #12]
 8005e00:	059b      	lsls	r3, r3, #22
 8005e02:	d4e1      	bmi.n	8005dc8 <_fflush_r+0xc>
 8005e04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e06:	f7fe ff19 	bl	8004c3c <__retarget_lock_release_recursive>
 8005e0a:	e7dd      	b.n	8005dc8 <_fflush_r+0xc>

08005e0c <__swhatbuf_r>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	460c      	mov	r4, r1
 8005e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e14:	2900      	cmp	r1, #0
 8005e16:	b096      	sub	sp, #88	@ 0x58
 8005e18:	4615      	mov	r5, r2
 8005e1a:	461e      	mov	r6, r3
 8005e1c:	da0d      	bge.n	8005e3a <__swhatbuf_r+0x2e>
 8005e1e:	89a3      	ldrh	r3, [r4, #12]
 8005e20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005e24:	f04f 0100 	mov.w	r1, #0
 8005e28:	bf14      	ite	ne
 8005e2a:	2340      	movne	r3, #64	@ 0x40
 8005e2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005e30:	2000      	movs	r0, #0
 8005e32:	6031      	str	r1, [r6, #0]
 8005e34:	602b      	str	r3, [r5, #0]
 8005e36:	b016      	add	sp, #88	@ 0x58
 8005e38:	bd70      	pop	{r4, r5, r6, pc}
 8005e3a:	466a      	mov	r2, sp
 8005e3c:	f000 f8d6 	bl	8005fec <_fstat_r>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	dbec      	blt.n	8005e1e <__swhatbuf_r+0x12>
 8005e44:	9901      	ldr	r1, [sp, #4]
 8005e46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005e4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e4e:	4259      	negs	r1, r3
 8005e50:	4159      	adcs	r1, r3
 8005e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e56:	e7eb      	b.n	8005e30 <__swhatbuf_r+0x24>

08005e58 <__smakebuf_r>:
 8005e58:	898b      	ldrh	r3, [r1, #12]
 8005e5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e5c:	079d      	lsls	r5, r3, #30
 8005e5e:	4606      	mov	r6, r0
 8005e60:	460c      	mov	r4, r1
 8005e62:	d507      	bpl.n	8005e74 <__smakebuf_r+0x1c>
 8005e64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	6123      	str	r3, [r4, #16]
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	6163      	str	r3, [r4, #20]
 8005e70:	b003      	add	sp, #12
 8005e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e74:	ab01      	add	r3, sp, #4
 8005e76:	466a      	mov	r2, sp
 8005e78:	f7ff ffc8 	bl	8005e0c <__swhatbuf_r>
 8005e7c:	9f00      	ldr	r7, [sp, #0]
 8005e7e:	4605      	mov	r5, r0
 8005e80:	4639      	mov	r1, r7
 8005e82:	4630      	mov	r0, r6
 8005e84:	f7fe ff48 	bl	8004d18 <_malloc_r>
 8005e88:	b948      	cbnz	r0, 8005e9e <__smakebuf_r+0x46>
 8005e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e8e:	059a      	lsls	r2, r3, #22
 8005e90:	d4ee      	bmi.n	8005e70 <__smakebuf_r+0x18>
 8005e92:	f023 0303 	bic.w	r3, r3, #3
 8005e96:	f043 0302 	orr.w	r3, r3, #2
 8005e9a:	81a3      	strh	r3, [r4, #12]
 8005e9c:	e7e2      	b.n	8005e64 <__smakebuf_r+0xc>
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	6020      	str	r0, [r4, #0]
 8005ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ea6:	81a3      	strh	r3, [r4, #12]
 8005ea8:	9b01      	ldr	r3, [sp, #4]
 8005eaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005eae:	b15b      	cbz	r3, 8005ec8 <__smakebuf_r+0x70>
 8005eb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f000 f8ab 	bl	8006010 <_isatty_r>
 8005eba:	b128      	cbz	r0, 8005ec8 <__smakebuf_r+0x70>
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	f023 0303 	bic.w	r3, r3, #3
 8005ec2:	f043 0301 	orr.w	r3, r3, #1
 8005ec6:	81a3      	strh	r3, [r4, #12]
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	431d      	orrs	r5, r3
 8005ecc:	81a5      	strh	r5, [r4, #12]
 8005ece:	e7cf      	b.n	8005e70 <__smakebuf_r+0x18>

08005ed0 <__sccl>:
 8005ed0:	b570      	push	{r4, r5, r6, lr}
 8005ed2:	780b      	ldrb	r3, [r1, #0]
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	2b5e      	cmp	r3, #94	@ 0x5e
 8005ed8:	bf0b      	itete	eq
 8005eda:	784b      	ldrbeq	r3, [r1, #1]
 8005edc:	1c4a      	addne	r2, r1, #1
 8005ede:	1c8a      	addeq	r2, r1, #2
 8005ee0:	2100      	movne	r1, #0
 8005ee2:	bf08      	it	eq
 8005ee4:	2101      	moveq	r1, #1
 8005ee6:	3801      	subs	r0, #1
 8005ee8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8005eec:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005ef0:	42a8      	cmp	r0, r5
 8005ef2:	d1fb      	bne.n	8005eec <__sccl+0x1c>
 8005ef4:	b90b      	cbnz	r3, 8005efa <__sccl+0x2a>
 8005ef6:	1e50      	subs	r0, r2, #1
 8005ef8:	bd70      	pop	{r4, r5, r6, pc}
 8005efa:	f081 0101 	eor.w	r1, r1, #1
 8005efe:	54e1      	strb	r1, [r4, r3]
 8005f00:	4610      	mov	r0, r2
 8005f02:	4602      	mov	r2, r0
 8005f04:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005f08:	2d2d      	cmp	r5, #45	@ 0x2d
 8005f0a:	d005      	beq.n	8005f18 <__sccl+0x48>
 8005f0c:	2d5d      	cmp	r5, #93	@ 0x5d
 8005f0e:	d016      	beq.n	8005f3e <__sccl+0x6e>
 8005f10:	2d00      	cmp	r5, #0
 8005f12:	d0f1      	beq.n	8005ef8 <__sccl+0x28>
 8005f14:	462b      	mov	r3, r5
 8005f16:	e7f2      	b.n	8005efe <__sccl+0x2e>
 8005f18:	7846      	ldrb	r6, [r0, #1]
 8005f1a:	2e5d      	cmp	r6, #93	@ 0x5d
 8005f1c:	d0fa      	beq.n	8005f14 <__sccl+0x44>
 8005f1e:	42b3      	cmp	r3, r6
 8005f20:	dcf8      	bgt.n	8005f14 <__sccl+0x44>
 8005f22:	3002      	adds	r0, #2
 8005f24:	461a      	mov	r2, r3
 8005f26:	3201      	adds	r2, #1
 8005f28:	4296      	cmp	r6, r2
 8005f2a:	54a1      	strb	r1, [r4, r2]
 8005f2c:	dcfb      	bgt.n	8005f26 <__sccl+0x56>
 8005f2e:	1af2      	subs	r2, r6, r3
 8005f30:	3a01      	subs	r2, #1
 8005f32:	1c5d      	adds	r5, r3, #1
 8005f34:	42b3      	cmp	r3, r6
 8005f36:	bfa8      	it	ge
 8005f38:	2200      	movge	r2, #0
 8005f3a:	18ab      	adds	r3, r5, r2
 8005f3c:	e7e1      	b.n	8005f02 <__sccl+0x32>
 8005f3e:	4610      	mov	r0, r2
 8005f40:	e7da      	b.n	8005ef8 <__sccl+0x28>

08005f42 <__submore>:
 8005f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f46:	460c      	mov	r4, r1
 8005f48:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005f4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f4e:	4299      	cmp	r1, r3
 8005f50:	d11d      	bne.n	8005f8e <__submore+0x4c>
 8005f52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005f56:	f7fe fedf 	bl	8004d18 <_malloc_r>
 8005f5a:	b918      	cbnz	r0, 8005f64 <__submore+0x22>
 8005f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f68:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005f6a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005f6e:	6360      	str	r0, [r4, #52]	@ 0x34
 8005f70:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005f74:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005f78:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8005f7c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005f80:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8005f84:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8005f88:	6020      	str	r0, [r4, #0]
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	e7e8      	b.n	8005f60 <__submore+0x1e>
 8005f8e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8005f90:	0077      	lsls	r7, r6, #1
 8005f92:	463a      	mov	r2, r7
 8005f94:	f000 f86a 	bl	800606c <_realloc_r>
 8005f98:	4605      	mov	r5, r0
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d0de      	beq.n	8005f5c <__submore+0x1a>
 8005f9e:	eb00 0806 	add.w	r8, r0, r6
 8005fa2:	4601      	mov	r1, r0
 8005fa4:	4632      	mov	r2, r6
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	f000 f852 	bl	8006050 <memcpy>
 8005fac:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8005fb0:	f8c4 8000 	str.w	r8, [r4]
 8005fb4:	e7e9      	b.n	8005f8a <__submore+0x48>

08005fb6 <memmove>:
 8005fb6:	4288      	cmp	r0, r1
 8005fb8:	b510      	push	{r4, lr}
 8005fba:	eb01 0402 	add.w	r4, r1, r2
 8005fbe:	d902      	bls.n	8005fc6 <memmove+0x10>
 8005fc0:	4284      	cmp	r4, r0
 8005fc2:	4623      	mov	r3, r4
 8005fc4:	d807      	bhi.n	8005fd6 <memmove+0x20>
 8005fc6:	1e43      	subs	r3, r0, #1
 8005fc8:	42a1      	cmp	r1, r4
 8005fca:	d008      	beq.n	8005fde <memmove+0x28>
 8005fcc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fd0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fd4:	e7f8      	b.n	8005fc8 <memmove+0x12>
 8005fd6:	4402      	add	r2, r0
 8005fd8:	4601      	mov	r1, r0
 8005fda:	428a      	cmp	r2, r1
 8005fdc:	d100      	bne.n	8005fe0 <memmove+0x2a>
 8005fde:	bd10      	pop	{r4, pc}
 8005fe0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fe4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fe8:	e7f7      	b.n	8005fda <memmove+0x24>
	...

08005fec <_fstat_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4d07      	ldr	r5, [pc, #28]	@ (800600c <_fstat_r+0x20>)
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	4608      	mov	r0, r1
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	602b      	str	r3, [r5, #0]
 8005ffa:	f7fa ff6d 	bl	8000ed8 <_fstat>
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	d102      	bne.n	8006008 <_fstat_r+0x1c>
 8006002:	682b      	ldr	r3, [r5, #0]
 8006004:	b103      	cbz	r3, 8006008 <_fstat_r+0x1c>
 8006006:	6023      	str	r3, [r4, #0]
 8006008:	bd38      	pop	{r3, r4, r5, pc}
 800600a:	bf00      	nop
 800600c:	20000348 	.word	0x20000348

08006010 <_isatty_r>:
 8006010:	b538      	push	{r3, r4, r5, lr}
 8006012:	4d06      	ldr	r5, [pc, #24]	@ (800602c <_isatty_r+0x1c>)
 8006014:	2300      	movs	r3, #0
 8006016:	4604      	mov	r4, r0
 8006018:	4608      	mov	r0, r1
 800601a:	602b      	str	r3, [r5, #0]
 800601c:	f7fa ff6c 	bl	8000ef8 <_isatty>
 8006020:	1c43      	adds	r3, r0, #1
 8006022:	d102      	bne.n	800602a <_isatty_r+0x1a>
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	b103      	cbz	r3, 800602a <_isatty_r+0x1a>
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	bd38      	pop	{r3, r4, r5, pc}
 800602c:	20000348 	.word	0x20000348

08006030 <_sbrk_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	4d06      	ldr	r5, [pc, #24]	@ (800604c <_sbrk_r+0x1c>)
 8006034:	2300      	movs	r3, #0
 8006036:	4604      	mov	r4, r0
 8006038:	4608      	mov	r0, r1
 800603a:	602b      	str	r3, [r5, #0]
 800603c:	f7fa ff74 	bl	8000f28 <_sbrk>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d102      	bne.n	800604a <_sbrk_r+0x1a>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	b103      	cbz	r3, 800604a <_sbrk_r+0x1a>
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	20000348 	.word	0x20000348

08006050 <memcpy>:
 8006050:	440a      	add	r2, r1
 8006052:	4291      	cmp	r1, r2
 8006054:	f100 33ff 	add.w	r3, r0, #4294967295
 8006058:	d100      	bne.n	800605c <memcpy+0xc>
 800605a:	4770      	bx	lr
 800605c:	b510      	push	{r4, lr}
 800605e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006062:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006066:	4291      	cmp	r1, r2
 8006068:	d1f9      	bne.n	800605e <memcpy+0xe>
 800606a:	bd10      	pop	{r4, pc}

0800606c <_realloc_r>:
 800606c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006070:	4680      	mov	r8, r0
 8006072:	4615      	mov	r5, r2
 8006074:	460c      	mov	r4, r1
 8006076:	b921      	cbnz	r1, 8006082 <_realloc_r+0x16>
 8006078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800607c:	4611      	mov	r1, r2
 800607e:	f7fe be4b 	b.w	8004d18 <_malloc_r>
 8006082:	b92a      	cbnz	r2, 8006090 <_realloc_r+0x24>
 8006084:	f7fe fddc 	bl	8004c40 <_free_r>
 8006088:	2400      	movs	r4, #0
 800608a:	4620      	mov	r0, r4
 800608c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006090:	f000 f906 	bl	80062a0 <_malloc_usable_size_r>
 8006094:	4285      	cmp	r5, r0
 8006096:	4606      	mov	r6, r0
 8006098:	d802      	bhi.n	80060a0 <_realloc_r+0x34>
 800609a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800609e:	d8f4      	bhi.n	800608a <_realloc_r+0x1e>
 80060a0:	4629      	mov	r1, r5
 80060a2:	4640      	mov	r0, r8
 80060a4:	f7fe fe38 	bl	8004d18 <_malloc_r>
 80060a8:	4607      	mov	r7, r0
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d0ec      	beq.n	8006088 <_realloc_r+0x1c>
 80060ae:	42b5      	cmp	r5, r6
 80060b0:	462a      	mov	r2, r5
 80060b2:	4621      	mov	r1, r4
 80060b4:	bf28      	it	cs
 80060b6:	4632      	movcs	r2, r6
 80060b8:	f7ff ffca 	bl	8006050 <memcpy>
 80060bc:	4621      	mov	r1, r4
 80060be:	4640      	mov	r0, r8
 80060c0:	f7fe fdbe 	bl	8004c40 <_free_r>
 80060c4:	463c      	mov	r4, r7
 80060c6:	e7e0      	b.n	800608a <_realloc_r+0x1e>

080060c8 <_strtol_l.constprop.0>:
 80060c8:	2b24      	cmp	r3, #36	@ 0x24
 80060ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ce:	4686      	mov	lr, r0
 80060d0:	4690      	mov	r8, r2
 80060d2:	d801      	bhi.n	80060d8 <_strtol_l.constprop.0+0x10>
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d106      	bne.n	80060e6 <_strtol_l.constprop.0+0x1e>
 80060d8:	f7fe fd84 	bl	8004be4 <__errno>
 80060dc:	2316      	movs	r3, #22
 80060de:	6003      	str	r3, [r0, #0]
 80060e0:	2000      	movs	r0, #0
 80060e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e6:	4834      	ldr	r0, [pc, #208]	@ (80061b8 <_strtol_l.constprop.0+0xf0>)
 80060e8:	460d      	mov	r5, r1
 80060ea:	462a      	mov	r2, r5
 80060ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060f0:	5d06      	ldrb	r6, [r0, r4]
 80060f2:	f016 0608 	ands.w	r6, r6, #8
 80060f6:	d1f8      	bne.n	80060ea <_strtol_l.constprop.0+0x22>
 80060f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80060fa:	d12d      	bne.n	8006158 <_strtol_l.constprop.0+0x90>
 80060fc:	782c      	ldrb	r4, [r5, #0]
 80060fe:	2601      	movs	r6, #1
 8006100:	1c95      	adds	r5, r2, #2
 8006102:	f033 0210 	bics.w	r2, r3, #16
 8006106:	d109      	bne.n	800611c <_strtol_l.constprop.0+0x54>
 8006108:	2c30      	cmp	r4, #48	@ 0x30
 800610a:	d12a      	bne.n	8006162 <_strtol_l.constprop.0+0x9a>
 800610c:	782a      	ldrb	r2, [r5, #0]
 800610e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006112:	2a58      	cmp	r2, #88	@ 0x58
 8006114:	d125      	bne.n	8006162 <_strtol_l.constprop.0+0x9a>
 8006116:	786c      	ldrb	r4, [r5, #1]
 8006118:	2310      	movs	r3, #16
 800611a:	3502      	adds	r5, #2
 800611c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006120:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006124:	2200      	movs	r2, #0
 8006126:	fbbc f9f3 	udiv	r9, ip, r3
 800612a:	4610      	mov	r0, r2
 800612c:	fb03 ca19 	mls	sl, r3, r9, ip
 8006130:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006134:	2f09      	cmp	r7, #9
 8006136:	d81b      	bhi.n	8006170 <_strtol_l.constprop.0+0xa8>
 8006138:	463c      	mov	r4, r7
 800613a:	42a3      	cmp	r3, r4
 800613c:	dd27      	ble.n	800618e <_strtol_l.constprop.0+0xc6>
 800613e:	1c57      	adds	r7, r2, #1
 8006140:	d007      	beq.n	8006152 <_strtol_l.constprop.0+0x8a>
 8006142:	4581      	cmp	r9, r0
 8006144:	d320      	bcc.n	8006188 <_strtol_l.constprop.0+0xc0>
 8006146:	d101      	bne.n	800614c <_strtol_l.constprop.0+0x84>
 8006148:	45a2      	cmp	sl, r4
 800614a:	db1d      	blt.n	8006188 <_strtol_l.constprop.0+0xc0>
 800614c:	fb00 4003 	mla	r0, r0, r3, r4
 8006150:	2201      	movs	r2, #1
 8006152:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006156:	e7eb      	b.n	8006130 <_strtol_l.constprop.0+0x68>
 8006158:	2c2b      	cmp	r4, #43	@ 0x2b
 800615a:	bf04      	itt	eq
 800615c:	782c      	ldrbeq	r4, [r5, #0]
 800615e:	1c95      	addeq	r5, r2, #2
 8006160:	e7cf      	b.n	8006102 <_strtol_l.constprop.0+0x3a>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1da      	bne.n	800611c <_strtol_l.constprop.0+0x54>
 8006166:	2c30      	cmp	r4, #48	@ 0x30
 8006168:	bf0c      	ite	eq
 800616a:	2308      	moveq	r3, #8
 800616c:	230a      	movne	r3, #10
 800616e:	e7d5      	b.n	800611c <_strtol_l.constprop.0+0x54>
 8006170:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006174:	2f19      	cmp	r7, #25
 8006176:	d801      	bhi.n	800617c <_strtol_l.constprop.0+0xb4>
 8006178:	3c37      	subs	r4, #55	@ 0x37
 800617a:	e7de      	b.n	800613a <_strtol_l.constprop.0+0x72>
 800617c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006180:	2f19      	cmp	r7, #25
 8006182:	d804      	bhi.n	800618e <_strtol_l.constprop.0+0xc6>
 8006184:	3c57      	subs	r4, #87	@ 0x57
 8006186:	e7d8      	b.n	800613a <_strtol_l.constprop.0+0x72>
 8006188:	f04f 32ff 	mov.w	r2, #4294967295
 800618c:	e7e1      	b.n	8006152 <_strtol_l.constprop.0+0x8a>
 800618e:	1c53      	adds	r3, r2, #1
 8006190:	d108      	bne.n	80061a4 <_strtol_l.constprop.0+0xdc>
 8006192:	2322      	movs	r3, #34	@ 0x22
 8006194:	f8ce 3000 	str.w	r3, [lr]
 8006198:	4660      	mov	r0, ip
 800619a:	f1b8 0f00 	cmp.w	r8, #0
 800619e:	d0a0      	beq.n	80060e2 <_strtol_l.constprop.0+0x1a>
 80061a0:	1e69      	subs	r1, r5, #1
 80061a2:	e006      	b.n	80061b2 <_strtol_l.constprop.0+0xea>
 80061a4:	b106      	cbz	r6, 80061a8 <_strtol_l.constprop.0+0xe0>
 80061a6:	4240      	negs	r0, r0
 80061a8:	f1b8 0f00 	cmp.w	r8, #0
 80061ac:	d099      	beq.n	80060e2 <_strtol_l.constprop.0+0x1a>
 80061ae:	2a00      	cmp	r2, #0
 80061b0:	d1f6      	bne.n	80061a0 <_strtol_l.constprop.0+0xd8>
 80061b2:	f8c8 1000 	str.w	r1, [r8]
 80061b6:	e794      	b.n	80060e2 <_strtol_l.constprop.0+0x1a>
 80061b8:	080065d7 	.word	0x080065d7

080061bc <_strtol_r>:
 80061bc:	f7ff bf84 	b.w	80060c8 <_strtol_l.constprop.0>

080061c0 <_strtoul_l.constprop.0>:
 80061c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061c4:	4e34      	ldr	r6, [pc, #208]	@ (8006298 <_strtoul_l.constprop.0+0xd8>)
 80061c6:	4686      	mov	lr, r0
 80061c8:	460d      	mov	r5, r1
 80061ca:	4628      	mov	r0, r5
 80061cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061d0:	5d37      	ldrb	r7, [r6, r4]
 80061d2:	f017 0708 	ands.w	r7, r7, #8
 80061d6:	d1f8      	bne.n	80061ca <_strtoul_l.constprop.0+0xa>
 80061d8:	2c2d      	cmp	r4, #45	@ 0x2d
 80061da:	d12f      	bne.n	800623c <_strtoul_l.constprop.0+0x7c>
 80061dc:	782c      	ldrb	r4, [r5, #0]
 80061de:	2701      	movs	r7, #1
 80061e0:	1c85      	adds	r5, r0, #2
 80061e2:	f033 0010 	bics.w	r0, r3, #16
 80061e6:	d109      	bne.n	80061fc <_strtoul_l.constprop.0+0x3c>
 80061e8:	2c30      	cmp	r4, #48	@ 0x30
 80061ea:	d12c      	bne.n	8006246 <_strtoul_l.constprop.0+0x86>
 80061ec:	7828      	ldrb	r0, [r5, #0]
 80061ee:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80061f2:	2858      	cmp	r0, #88	@ 0x58
 80061f4:	d127      	bne.n	8006246 <_strtoul_l.constprop.0+0x86>
 80061f6:	786c      	ldrb	r4, [r5, #1]
 80061f8:	2310      	movs	r3, #16
 80061fa:	3502      	adds	r5, #2
 80061fc:	f04f 38ff 	mov.w	r8, #4294967295
 8006200:	2600      	movs	r6, #0
 8006202:	fbb8 f8f3 	udiv	r8, r8, r3
 8006206:	fb03 f908 	mul.w	r9, r3, r8
 800620a:	ea6f 0909 	mvn.w	r9, r9
 800620e:	4630      	mov	r0, r6
 8006210:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8006214:	f1bc 0f09 	cmp.w	ip, #9
 8006218:	d81c      	bhi.n	8006254 <_strtoul_l.constprop.0+0x94>
 800621a:	4664      	mov	r4, ip
 800621c:	42a3      	cmp	r3, r4
 800621e:	dd2a      	ble.n	8006276 <_strtoul_l.constprop.0+0xb6>
 8006220:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006224:	d007      	beq.n	8006236 <_strtoul_l.constprop.0+0x76>
 8006226:	4580      	cmp	r8, r0
 8006228:	d322      	bcc.n	8006270 <_strtoul_l.constprop.0+0xb0>
 800622a:	d101      	bne.n	8006230 <_strtoul_l.constprop.0+0x70>
 800622c:	45a1      	cmp	r9, r4
 800622e:	db1f      	blt.n	8006270 <_strtoul_l.constprop.0+0xb0>
 8006230:	fb00 4003 	mla	r0, r0, r3, r4
 8006234:	2601      	movs	r6, #1
 8006236:	f815 4b01 	ldrb.w	r4, [r5], #1
 800623a:	e7e9      	b.n	8006210 <_strtoul_l.constprop.0+0x50>
 800623c:	2c2b      	cmp	r4, #43	@ 0x2b
 800623e:	bf04      	itt	eq
 8006240:	782c      	ldrbeq	r4, [r5, #0]
 8006242:	1c85      	addeq	r5, r0, #2
 8006244:	e7cd      	b.n	80061e2 <_strtoul_l.constprop.0+0x22>
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1d8      	bne.n	80061fc <_strtoul_l.constprop.0+0x3c>
 800624a:	2c30      	cmp	r4, #48	@ 0x30
 800624c:	bf0c      	ite	eq
 800624e:	2308      	moveq	r3, #8
 8006250:	230a      	movne	r3, #10
 8006252:	e7d3      	b.n	80061fc <_strtoul_l.constprop.0+0x3c>
 8006254:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8006258:	f1bc 0f19 	cmp.w	ip, #25
 800625c:	d801      	bhi.n	8006262 <_strtoul_l.constprop.0+0xa2>
 800625e:	3c37      	subs	r4, #55	@ 0x37
 8006260:	e7dc      	b.n	800621c <_strtoul_l.constprop.0+0x5c>
 8006262:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8006266:	f1bc 0f19 	cmp.w	ip, #25
 800626a:	d804      	bhi.n	8006276 <_strtoul_l.constprop.0+0xb6>
 800626c:	3c57      	subs	r4, #87	@ 0x57
 800626e:	e7d5      	b.n	800621c <_strtoul_l.constprop.0+0x5c>
 8006270:	f04f 36ff 	mov.w	r6, #4294967295
 8006274:	e7df      	b.n	8006236 <_strtoul_l.constprop.0+0x76>
 8006276:	1c73      	adds	r3, r6, #1
 8006278:	d106      	bne.n	8006288 <_strtoul_l.constprop.0+0xc8>
 800627a:	2322      	movs	r3, #34	@ 0x22
 800627c:	f8ce 3000 	str.w	r3, [lr]
 8006280:	4630      	mov	r0, r6
 8006282:	b932      	cbnz	r2, 8006292 <_strtoul_l.constprop.0+0xd2>
 8006284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006288:	b107      	cbz	r7, 800628c <_strtoul_l.constprop.0+0xcc>
 800628a:	4240      	negs	r0, r0
 800628c:	2a00      	cmp	r2, #0
 800628e:	d0f9      	beq.n	8006284 <_strtoul_l.constprop.0+0xc4>
 8006290:	b106      	cbz	r6, 8006294 <_strtoul_l.constprop.0+0xd4>
 8006292:	1e69      	subs	r1, r5, #1
 8006294:	6011      	str	r1, [r2, #0]
 8006296:	e7f5      	b.n	8006284 <_strtoul_l.constprop.0+0xc4>
 8006298:	080065d7 	.word	0x080065d7

0800629c <_strtoul_r>:
 800629c:	f7ff bf90 	b.w	80061c0 <_strtoul_l.constprop.0>

080062a0 <_malloc_usable_size_r>:
 80062a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062a4:	1f18      	subs	r0, r3, #4
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	bfbc      	itt	lt
 80062aa:	580b      	ldrlt	r3, [r1, r0]
 80062ac:	18c0      	addlt	r0, r0, r3
 80062ae:	4770      	bx	lr

080062b0 <_init>:
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b2:	bf00      	nop
 80062b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b6:	bc08      	pop	{r3}
 80062b8:	469e      	mov	lr, r3
 80062ba:	4770      	bx	lr

080062bc <_fini>:
 80062bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062be:	bf00      	nop
 80062c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062c2:	bc08      	pop	{r3}
 80062c4:	469e      	mov	lr, r3
 80062c6:	4770      	bx	lr
